[{"/home/boubin.2/PROWESS/Frontend/src/index.js":"1","/home/boubin.2/PROWESS/Frontend/src/reportWebVitals.js":"2","/home/boubin.2/PROWESS/Frontend/src/App.js":"3","/home/boubin.2/PROWESS/Frontend/src/routes.js":"4","/home/boubin.2/PROWESS/Frontend/src/components/Main.js":"5","/home/boubin.2/PROWESS/Frontend/src/components/Delete.js":"6","/home/boubin.2/PROWESS/Frontend/src/components/App.js":"7","/home/boubin.2/PROWESS/Frontend/src/components/Scheduler/index.js":"8","/home/boubin.2/PROWESS/Frontend/src/components/Scheduler/Scheduler.js":"9"},{"size":660,"mtime":1664205511747,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1664205511747,"results":"12","hashOfConfig":"11"},{"size":182,"mtime":1664205511745,"results":"13","hashOfConfig":"11"},{"size":301,"mtime":1664205511747,"results":"14","hashOfConfig":"11"},{"size":339,"mtime":1664734141254,"results":"15","hashOfConfig":"11"},{"size":9817,"mtime":1666124547029,"results":"16","hashOfConfig":"11"},{"size":19217,"mtime":1666124547028,"results":"17","hashOfConfig":"11"},{"size":89,"mtime":1664205511746,"results":"18","hashOfConfig":"11"},{"size":1132,"mtime":1664205511746,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"1pq8kr0",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/boubin.2/PROWESS/Frontend/src/index.js",["42","43","44"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport routes from './routes';\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/home/boubin.2/PROWESS/Frontend/src/reportWebVitals.js",[],"/home/boubin.2/PROWESS/Frontend/src/App.js",["45"],"import React from 'react'\nimport Main from './components/Main'\nimport Delete from './components/Delete';\n\nconst App = () => (\n    <div>\n    <Main />\n    </div>\n)\n\nexport default App\n","/home/boubin.2/PROWESS/Frontend/src/routes.js",[],"/home/boubin.2/PROWESS/Frontend/src/components/Main.js",[],"/home/boubin.2/PROWESS/Frontend/src/components/Delete.js",["46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72"],"import React, { Component } from 'react';\nimport Scheduler from '../components/Scheduler';\nimport 'react-dates/initialize';\nimport DatePicker from \"react-datepicker\"\nimport moment from \"moment\"\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport 'react-dates/lib/css/_datepicker.css';\nimport 'antd/dist/antd.css'\nimport { TimePicker } from 'antd'\nimport momentPropTypes from 'react-moment-proptypes'\nimport PropTypes from 'prop-types'\nimport {Table, Form, FormGroup, Checkbox, Col, Button, Navbar, Nav, NavDropdown,FormControl} from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '../App.css';\nimport $ from 'jquery';\nimport { saveAs } from 'file-saver'\nimport * as JSZip from 'jszip'\nimport \"./style.css\"\n\nconst data = [];\nconst cfg = require('../config.json')\n\nconst util = require('util')\n\nclass Delete extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n                        user: 'default',\n                        startdate: null,\n                        enddate:  null,\n                        starttime: moment('00:00:00', 'HH:mm:ss').format('HH:mm:ss'),\n                        endtime:  moment('00:00:00', 'HH:mm:ss').format('HH:mm:ss'),\n                        focusedEnd: false,\n                        container: null,\n                        allMics: false,\n                        mic1: false,\n                        mic2: false,\n                        mic3: false,\n                        cam1: false,\n                        cam2: false,\n                        cam3: false,\n                        allCams: false,\n                        allSens: false,\n                        sdr: false,\n                        gpu: false,\n                        test: 'test',\n                        expdescription: '',\n                        id: 0,\n                        calendarData: [],\n                        myExps: [],\n                        currentIds: []\n                    };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.fetch = this.fetch.bind(this);\n        this.fetchMyExps = this.fetchMyExps.bind(this);\n    }\n    handleChange(time, variable){\n        if(variable == 'starttime')\n            this.setState({starttime: time.format('HH:mm:ss')})\n        else if(variable == 'endtime')\n            this.setState({endtime: time.format('HH:mm:ss')})\n    }\n    handleSubmit(event){\n        event.preventDefault();\n        var jsondata = {user: this.state.user,\n                    container: this.state.container,\n                    StartDate: this.state.startdate.format('YYYY-MM-DD'),\n                    endDate: this.state.enddate.format('YYYY-MM-DD'),\n                    starttime: this.state.starttime,\n                    endtime: this.state.endtime,\n                    description: this.state.expdescription,\n                    all_sensors: this.state.allSens,\n                    all_mics: this.state.allMics,\n                    mic1: this.state.mic1,\n                    mic2: this.state.mic2,\n                    mic3: this.state.mic3,\n                    all_cams: this.state.allCams,\n                    cam1: this.state.mic1,\n                    cam2: this.state.mic2,\n                    cam3: this.state.mic3,\n                    gpu: this.state.gpu,\n                    sdr: this.state.sdr\n                }\n\n        console.log(jsondata)\n\n        var expStart = this.state.startdate.format('YYYY-MM-DD')\n        var expStartTime = this.state.starttime\n        var expEnd = this.state.enddate.format('YYYY-MM-DD')\n        var expEndTime = this.state.endtime\n        var text = this.state.container + '\\n' + this.state.expdescription\n        var newExp = {start_date: expStart +' '+ expStartTime, end_date: expEnd+' '+expEndTime,text: text, id: this.state.id}\n\n        console.log(jsondata.endDate)\n\n        //this.setState({calendarData: this.state.calendarData.concat(newExp)})\n        //this.setState({id: this.state.id+1})\n\n        $.ajax({\n            url: 'https://'+cfg.domain+'php/post.php',\n            type: 'POST',\n            data: jsondata,\n            success: function(msg) {\n                console.log(msg);\n            },\n            error: function(request, status, error){\n                    alert(request.responseText);\n            }\n        });\n        this.fetch()\n    }\n    fetchShib() {\n    \tvar context = this;\n\tfetch('https://'+cfg.domain+'/Shibboleth.sso/Session')\n  \t\t.then(response => response.json())\n  \t\t.then((jsonData) => {\n    \t     \t\tconsole.log(jsonData)\n\t\t\tconsole.log('$$$$$$$$$$$$$$$$$$$')\n                        const UID = jsonData.attributes[4].values[0].split('@')[0]\n\t\t\tconsole.log(jsonData.attributes[4].values[0].split('@')[0])\n\t\t\tconsole.log(UID)\n\t\t\tthis.setState({ user: UID})\n\t\t\tconsole.log('User')\n\t\t\tconsole.log(this.state.user)\n\t\t\tconsole.log('$$$$$$$$$$$$$$$$$$$')\n\t\t\tthis.fetchMyExps()\n   \t\t})\n               .catch((error) => {\n                 console.error(error)\n               })\n    }\n\n    fetchMyExps() {\n        var context = this;\n        var jsondata = {user: this.state.user}\n\n        $.ajax({\n            url: 'https://'+cfg.domain+'/php/postExps.php',\n            type: 'POST',\n            data: jsondata,\n            success: function(response) {\n                context.setState({\n                    myExps: response.message\n                });\n                console.log(util.inspect(response))\n            }\n        });\n    }\n    fetch() {\n        var context = this;\n\n        $.ajax({\n            url: 'https://'+cfg.domain+'/php/api.php',\n            method: 'GET',\n            data: data,\n            success: function(response) {\n                context.setState({\n                    calendarData: response.message\n                });\n            }\n        });\n    }\n    componentDidMount(){\n        document.title = \"Experiment Manager | OSU PROWESS\"\n        console.log('Mounting!')\n        this.fetch();\n\tthis.fetchShib();\n        this.fetchMyExps();\n    }\n    handleButtonInput(e) {\n        console.log(e.target.value)\n        var context = this\n        var data = {user: this.state.user, idx: e.target.value}\n        console.log(data)\n        $.ajax({\n            url: 'https://'+cfg.domain+'/php/postDel.php',\n            method: 'post',\n            data: data,\n            success: function(response) {\n            }\n        });\n        this.fetch();\n        this.fetchMyExps();\n    }\n    handleDownload(e) {\n        console.log(e.target.value)\n        var context = this;\n        var user = this.state.user;\n\tvar idx = e.target.value;\n        console.log(data)\n\n\twindow.open('https://'+cfg.domain+'/php/download.php?user='+user+'&idx='+idx)\n\n\n        this.fetch();\n        this.fetchMyExps();\n    }\n\n    myExperiments(){\n        console.log('MyExps: ')\n        console.log(util.inspect(this.state.myExps))\n        var list = []\n        const self = this;\n\tif(this.state.myExps != undefined)\n\t\tfor(var i=0; i<this.state.myExps.length; i++){\n\t\t    var exp = this.state.myExps[i]\n\t\t    var label = 'Container: '+exp.container+' '\n\t\t    var idx = exp.id\n\t\t    this.state.currentIds.push(idx)\n\t\t    var buttonVar = \"primary\"\n\t\t    if(exp.status.substring(0,5) == 'error')\n\t\t\tbuttonVar = \"danger\"\n\t\t    var bv = \"\"\n\t\t    if(exp.status.substring(0,8) == 'Complete') {\n\n\t\t\tvar bv =  <Button value={idx} variant={buttonVar} type=\"submit\" onClick={e => this.handleDownload(e, \"value\")} >\n\t\t\t\t    Download Results\n\t\t\t\t</Button>\n\t\t    }\n\t\t    var listItem =\n\t\t\t<tr>\n\t\t\t    <td>{exp.id}</td>\n\t\t\t    <td>{exp.container}</td>\n\t\t\t    <td>{exp.start_date}</td>\n\t\t\t    <td>{exp.end_date}</td>\n\t\t\t    <td>{exp.status} <br/> {bv} </td>\n\t\t\t    <td>\n\t\t\t\t<Button value={idx} variant={buttonVar} type=\"submit\" onClick={e => this.handleButtonInput(e, \"value\")} >\n\t\t\t\t    Delete\n\t\t\t\t</Button>\n\t\t\t    </td>\n\t\t\t</tr>\n\t\t    list.push(listItem)\n\t\t}\n\t\tconsole.log('CURRENT IDS:')\n\t\tconsole.log(this.state.currentIds)\n        return list\n    }\n    render() {\n        const exps = this.myExperiments()\n\n        return (\n            <div>\n                <Navbar className=\"color-nav-prowess\" expand='xl'>\n                  <Navbar.Brand href=\"#home\">Pomerene Lab IoT Testbed Experiment Scheduler</Navbar.Brand>\n                  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                  <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                      <Nav.Link href=\"/\">Schedule a New Experiment</Nav.Link>\n                      <Nav.Link href=\"/Delete\">View My Scheduled Experiments</Nav.Link>\n                    </Nav>\n                 </Navbar.Collapse>\n                </Navbar>\n\n                <div class=\"conatainer\">\n                <div class='row'>\n                <div class='col-xl'>\n                <div>\n                    <h1>View My Scheduled Experiments</h1>\n                </div>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Experiment ID</th>\n                            <th>Container</th>\n                            <th>Start Time</th>\n                            <th>End Time</th>\n\t\t\t    <th>Status</th>\n                            <th>Delete</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {exps}\n                    </tbody>\n                </Table>\n                </div>\n                </div>\n                <div class=\"row\">\n                <div className='scheduler-container'>\n                    <Scheduler events={this.state.calendarData}/>\n                </div>\n                </div>\n                </div>\n            </div>\n        );\n    }\n }\n export default Delete;\n","/home/boubin.2/PROWESS/Frontend/src/components/App.js",["73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99"],"import React, { Component, Fragment } from 'react';\nimport Scheduler from '../components/Scheduler';\nimport 'react-dates/initialize';\nimport DatePicker from \"react-datepicker\"\nimport moment from \"moment\"\nimport { DateRangePicker, SingleDatePicker, DayPickerRangeController } from 'react-dates';\nimport 'react-dates/lib/css/_datepicker.css';\nimport 'antd/dist/antd.css'\nimport { TimePicker } from 'antd'\nimport momentPropTypes from 'react-moment-proptypes'\nimport PropTypes from 'prop-types'\nimport {Form, FormGroup, Checkbox, Col, Button, Navbar, Nav, NavDropdown,FormControl} from \"react-bootstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '../App.css';\nimport $ from 'jquery';\nimport Select from 'react-select';\nimport './style.css'\n\nconst util = require('util')\nconst cfg = require('../config.json')\n\nconst data = []\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n                        user: 'default',\n                        startdate: null,\n                        enddate:  null,\n                        starttime: moment('00:00:00', 'HH:mm:ss').format('HH:mm:ss'),\n                        endtime:  moment('00:00:00', 'HH:mm:ss').format('HH:mm:ss'),\n                        focusedEnd: false,\n                        container: [\"\"],\n                        containerYAML: [\"\"],\n\t\t\t            volume: [\"\"],\n                        test: 'test',\n                        expdescription: '',\n                        id: 0,\n                        calendarData: [],\n\t\t\t            testbedData: [],\n                        message: 'testtest',\n\t\t\t            status: 'Submitted',\n                        containers: 1,\n                        volumes: 1,\n                        containersYaml: 1,\n                        testbedSelect: 'none',\n                        ram: '1',\n                        cpu: '0.5',\n                        sensors: [],\n                        hardware: [],\n                        tbRam: null,\n                        tbCpu: null,\n                        tbSensors: [],\n\t\t\t            tbHardwre: []\n                    };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.fetch = this.fetch.bind(this);\n    }\n    handleChange(time, variable){\n\tif(variable == 'starttime')\n\t    try {\n            \tthis.setState({starttime: time.format('HH:mm:ss')})\n            } catch(e) {this.setState({starttime: null})}\n\telse if(variable == 'endtime')\n\t    try {\n            \tthis.setState({endtime: time.format('HH:mm:ss')})\n    \t    } catch(e) {this.setState({endtime: null})}\n    }\n    handleSubmit(event){\n        event.preventDefault();\n        var jsondata = {user: this.state.user,\n                    container: this.state.container,\n\t\t    containerYAML: this.state.containerYAML,\n                    volume: this.state.volume,\n                    StartDate: this.state.startdate.format('YYYY-MM-DD'),\n                    endDate: this.state.enddate.format('YYYY-MM-DD'),\n                    starttime: this.state.starttime,\n                    endtime: this.state.endtime,\n                    description: this.state.expdescription,\n                    testbed: this.state.testbedSelect,\n                    ram: this.state.ram,\n                    cpu: this.state.cpu,\n                    sensors: this.state.sensors,\n                    hardware: this.state.hardware,\n                    status: this.state.status\n                }\n\n        console.log(jsondata)\n\n        var expStart = this.state.startdate.format('YYYY-MM-DD')\n        var expStartTime = this.state.starttime\n        var expEnd = this.state.enddate.format('YYYY-MM-DD')\n        var expEndTime = this.state.endtime\n        var text = this.state.container + '\\n' + this.state.expdescription\n        var newExp = {start_date: expStart +' '+ expStartTime, end_date: expEnd+' '+expEndTime,text: text, id: this.state.id}\n\n        console.log(jsondata.endDate)\n\n        //this.setState({calendarData: this.state.calendarData.concat(newExp)})\n        //this.setState({id: this.state.id+1})\n        var context = this;\n        $.ajax({\n            url: 'https://'+cfg.domain+'/php/post.php',\n            type: 'POST',\n            data: jsondata,\n            success: function(msg) {\n                    var text = 'Experiment Successfully Scheduled from '+context.state.startdate.format('YYYY-MM-DD') + ' ' + context.state.starttime + ' to '+ context.state.enddate.format('YYYY-MM-DD') + ' ' +context.state.endtime;\n                    alert(text)\n                    console.log(msg);\n            },\n            error: function(request, status, error){\n                    alert(request.responseText);\n            }\n        });\n        this.fetch()\n    }\n\n   fetch() {\n        var context = this;\n\n        $.ajax({\n            url: 'https://'+cfg.domain+'/php/api.php',\n            method: 'GET',\n            data: data,\n            success: function(response) {\n\t\tvar resp = response.message\n\t\tconsole.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')\n\t\tfor (var key in response.message){\n\t\t\tconsole.log(response.message)\n\t\t\t//console.log(context.state.testbedData.length)\n\t\t\tvar tb = response.message[key].testbed\n\t\t\tfor(var i=0; i< context.state.testbedData.length ;++i){\n\t\t\t\tvar tbData = context.state.testbedData[i]\n\t\t\t\tif(tbData.name == response.message[key].testbed){\n\t\t\t\t\tconsole.log('hit')\n\t\t\t\t\tresponse.message[key].color = '#'+tbData.eventcolor\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\tconsole.log(response.message[key])\n\t\tcontext.setState({\n                    calendarData: response.message\n                });\n            }\n        });\n    }\n    fetchShib() {\n        console.log(cfg.domain)\n        console.log('^^^^^^^^^^^^^^^^^')\n\tfetch('https://'+cfg.domain+'/Shibboleth.sso/Session')\n  \t\t.then(response => response.json())\n  \t\t.then((jsonData) => {\n    \t\t// jsonData is parsed json object received from url\n    \t     \t\tconsole.log(jsonData)\n\t\t\tconsole.log('$$$$$$$$$$$$$$$$$$$')\n                        const UID = jsonData.attributes[4].values[0].split('@')[0]\n\t\t\tconsole.log(jsonData.attributes[4].values[0].split('@')[0])\n\t\t\tconsole.log(UID)\n\t\t\tthis.setState({ user: UID})\n\t\t\tconsole.log('User')\n\t\t\tconsole.log(this.state.user)\n\t\t\tconsole.log('$$$$$$$$$$$$$$$$$$$')\n   \t\t})\n               .catch((error) => {\n                 // handle your errors here\n                 console.error(error)\n               })\n    }\n    fetchTBs() {\n\tconsole.log('###################')\n\tvar context = this\n        $.ajax({\n            url: 'https://'+cfg.domain+'/php/testbeds.php',\n            method: 'GET',\n            data: data,\n            success: function(response) {\n                context.setState({\n\t\t\ttestbedData: response.message\n                });\n\t\tconsole.log('TB Response:')\n\t\tconsole.log(response.message)\n\t\tcontext.fetch()\n            }\n        });\n    }\n    fetchTBRes(name) {\n    \tconsole.log('FETCH TB Results')\n\tvar context = this\n        $.ajax({\n            url: 'https://'+cfg.domain+'/php/testbedres.php?name='+name,\n            method: 'GET',\n            data: data,\n            success: function(response) {\n                context.setState({\n                    testbedRes: response.message\n                });\n\t\tconsole.log(context.state.testbedSelect)\n\t\tconsole.log('TestbedRes Response:')\n\t\tconsole.log(response.message)\n\t\tconsole.log(response.message[0])\n\n\t\tcontext.setState({ram: 1})\n\t\tcontext.setState({cpu: 1})\n\n\t\tcontext.setState({tbRam: response.message[0]})\n\t\tcontext.setState({tbCpu: response.message[1]})\n\t\tvar sensors = response.message[2]\n\n\t\tif(sensors == 'None')\n\t\t\tcontext.setState({tbSensors: null})\n\t\telse {\n\t\t\ttry{\n\t\t\t\tconst result = response.message[2].split('+')\n\t\t\t\tcontext.setState({tbSensors: result})\n\t\t\t\tconsole.log(result)\n\t\t\t}catch(exception) {\n\t\t\t\tconsole.log('Sensor Parsing Error')\n\t\t\t}\n\t\t}\n\t\tvar hardware = response.message[3]\n\t\tif(hardware == 'None')\n\t\t\tcontext.setState({tbHardware: null})\n\t\telse {\n\t\t\ttry{\n\t\t\t\tconst result = response.message[3].split('+')\n\t\t\t\tcontext.setState({tbHardware: result})\n\t\t\t\tconsole.log(result)\n\t\t\t} catch(exception) {\n\t\t\t\tconsole.log('Hardware Parsing Error')\n\t\t\t}\n\t\t}\n\t\tvar ret = []\n\t\tif(context.state.tbSensors != null) {\n\t\t\tfor(var i=0; i<context.state.tbSensors.length; i++){\n\t\t\t\tret.push(false)\n\t\t\t}\n\t\t\tcontext.setState({sensors: ret})\n\t\t}\n\t\tret = []\n\t\tif(context.state.tbHardware != null) {\n\t\t\tfor(var i=0; i<context.state.tbHardware.length; i++){\n\t\t\t\tret.push(false)\n\t\t\t}\n\t\t\tcontext.setState({hardware: ret})\n\t\t}\n            }\n        });\n\n    }\n\n    componentDidMount(){\n        document.title = \"Home | OSU PROWESS\"\n        console.log('Mounting!')\n        this.fetchTBs();\n\tthis.fetch();\n\tthis.fetchShib();\n\tthis.fetchTBRes();\n    }\n    buttonAdd() {\n        if(this.state.containers < 20) {\n            this.setState({ containers: this.state.containers+1 })\n            const list = [...this.state.container, \"\"]\n            this.setState({ container: list})\n        }\n    }\n    buttonSub() {\n        if(this.state.containers > 1) {\n            this.setState( {containers: this.state.containers-1})\n            const list = this.state.container\n            list.pop()\n            this.setState({ container: list })\n        }\n    }\n    buttonAddY() {\n        if(this.state.containersYaml < 20) {\n            this.setState({ containersYaml: this.state.containersYaml+1 })\n            const list = [...this.state.containerYAML, \"\"]\n            this.setState({ containerYAML: list})\n        }\n    }\n    buttonSubY() {\n        if(this.state.containersYaml > 1) {\n            this.setState( {containersYaml: this.state.containersYaml-1})\n            const list = this.state.containerYAML\n            list.pop()\n            this.setState({ containerYAML: list })\n        }\n    }\n\n    buttonAddV() {\n        if(this.state.volumes < 5) {\n            this.setState({ volumes: this.state.volumes+1 })\n            const list = [...this.state.volume, \"\"]\n            this.setState({ volume: list})\n        }\n    }\n    buttonSubV() {\n        if(this.state.volumes > 1) {\n            this.setState( {volumes: this.state.volumes-1})\n            const list = this.state.volume\n            list.pop()\n            this.setState({ volume: list })\n        }\n    }\n\n    containerUpdate(idx, val){\n        const list = this.state.container\n        list[idx] = val\n        this.setState({ container: list })\n    }\n    containerUpdateYAML(idx, val){\n        const list = this.state.containerYAML\n        list[idx] = val\n        this.setState({ containerYAML: list })\n    }\n\n    volumeUpdate(idx, val){\n        const list = this.state.volume\n        list[idx] = val\n        this.setState( {volume: list} )\n    }\n\n    getOpts(){\n\tvar i\n\tvar list = []\n\tfor (i = 0; i < this.state.testbedData.length; ++i) {\n\t\tlist.push({label: this.state.testbedData[i].name})\n\t}\n        return list;\n    }\n\n    containerInput() {\n        const divStyle = {marginTop: \"10px\"}\n        const btn_add =  <button type=\"button\" class=\"btn-primary\" style={{width: \"30px\", margin: \"5px\"}} onClick={ () => this.buttonAdd()}> + </button>\n        const btn_sub =  <button type=\"button\" class=\"btn-primary\" style={{width: \"30px\", margin: \"5px\"}} onClick={ () => this.buttonSub()}> - </button>\n\n        const formInp = []\n        var i;\n        for (i = 0; i< this.state.containers; i++){\n            const idx = i\n            formInp.push(<Form.Control style={{margin: \"5px\"}} type=\"text\" placeholder=\"Enter Dockerhub Repository Name\" onChange={e => this.containerUpdate(idx, e.target.value)}/>\n            )\n        }\n\n        return (\n            <div style={divStyle}>\n            {formInp}\n            {btn_add}\n            {btn_sub}\n\t    </div>\n        )\n    }\n\n  containerInputYAML() {\n        const divStyle = {marginTop: \"10px\"}\n        const btn_add =  <button type=\"button\" class=\"btn-primary\" style={{width: \"30px\", margin: \"5px\"}} onClick={ () => this.buttonAddY()}> + </button>\n        const btn_sub =  <button type=\"button\" class=\"btn-primary\" style={{width: \"30px\", margin: \"5px\"}} onClick={ () => this.buttonSubY()}> - </button>\n\n        const formInp = []\n        var i;\n        for (i = 0; i< this.state.containersYaml; i++){\n            const idx = i\n            formInp.push(<Form.Control style={{margin: \"5px\"}} as=\"textarea\" rows={5} placeholder=\"Enter Container YAML\" onChange={e => this.containerUpdateYAML(idx, e.target.value)}/>\n            )\n        }\n\n        return (\n            <div style={divStyle}>\n            {formInp}\n            {btn_add}\n            {btn_sub}\n\t    </div>\n        )\n    }\n\n    selectTB(e){\n\tthis.setState({ testbedSelect: e.label });\n\tconsole.log('testbedSelect Currently');\n        console.log(this.state.testbedSelect);\n\tconsole.log(e.label);\n\tconsole.log(e);\n\tthis.fetchTBRes(e.label);\n    }\n\n    updateHardware(i, checked) {\n\tvar newHardware = this.state.hardware\n\tnewHardware[i] = checked\n\tthis.setState({hardware: newHardware})\n    }\n\n    getHardware(){\n\n\tvar ret = []\n\ttry{\n\t\tif(this.state.tbHardware.length > 0) {\n\t\t\tret.push(<p>Specialized Hardware</p>)\n\t\t}\n\n\t\tfor(var i = 0; i<this.state.tbHardware.length; ++i){\n\t\t\tvar name = this.state.tbHardware[i]\n\t\t\tret.push(<Form.Check inline label= {name} type={'checkbox'} id={'inline-${type}-3'} onChange={e => this.updateHardware(i, e.target.checked)}/>)\n\t\t}\n\t} catch(exception) {\n\t\tconsole.log('error rendering hardware buttons')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t{ret}\n\t\t</div>\n     \t)\n    }\n\n    updateSensors(i, checked) {\n\tvar newSensors = this.state.sensors\n\tnewSensors[i] = checked\n\tthis.setState({sensors: newSensors})\n    }\n\n    getCPUandRAM() {\n\n\tvar ret = []\n\n\tif(this.state.tbRam > 0){\n\t\tret.push(<p>RAM: {this.state.ram}GB</p>)\n\t\tvar max = this.state.tbRam.toString();\n\t\tret.push(\n\t\t<div>\n\t\t<input\n      \t\tid=\"typeinp\"\n      \t\ttype=\"range\"\n      \t\tmin=\"1\" max={max}\n\t\tvalue={\"1\"}\n      \t\tvalue={this.state.ram}\n      \t\tonChange={e => this.setState({ram: e.target.value})}\n      \t\tstep=\"1\"/>\n\t\t</div>\n\t\t)\n\t}\n\n\tif(this.state.tbCpu > 0){\n\t\tret.push(<p>CPUs: {this.state.cpu}</p>)\n\t\tvar max = this.state.tbCpu.toString();\n\t\tret.push(\n\t\t<div>\n\t\t<input\n      \t\tid=\"typeinp\"\n      \t\ttype=\"range\"\n      \t\tmin=\"0.5\" max={max}\n\t\tdefaultValue={\"0.5\"}\n      \t\tvalue={this.state.cpu}\n      \t\tonChange={e => this.setState({cpu: e.target.value})}\n      \t\tstep=\"0.5\"/>\n\t\t</div>\n\t\t)\n\t}\n\n\n\n\treturn (\n\t\t<div>\n\t\t{ret}\n\t\t</div>\n\t)\n    }\n\n    getSensors(){\n\n\tvar ret = []\n\ttry{\n\t\tif(this.state.tbSensors.length > 0)\n\t\t\tret.push(<p>Sensors</p>)\n\n\t\tfor(var i = 0; i<this.state.tbSensors.length; ++i){\n\t\t\tvar name = this.state.tbSensors[i]\n\t\t\tret.push(<Form.Check inline label= {name} type={'checkbox'} id={'inline-${type}-3'} onChange={e => this.updateSensors(i, e.target.checked)}/>)\n\t\t}\n\t} catch(exception) {\n\t\tconsole.log('error rendering sensor buttons')\n\t}\n\n\treturn (\n\t\t<div>\n\t\t{ret}\n\t\t</div>\n     \t)\n    }\n    volumeInput(){\n        const divStyle = {marginTop: \"10px\"}\n        const btn_add =  <button type=\"button\" class=\"btn-primary\" style={{width: \"30px\", margin: \"5px\"}} onClick={ () => this.buttonAddV()}> + </button>\n        const btn_sub =  <button type=\"button\" class=\"btn-primary\" style={{width: \"30px\", margin: \"5px\"}} onClick={ () => this.buttonSubV()}> - </button>\n\n        const formInp = []\n        var i;\n        for (i = 0; i< this.state.volumes; i++){\n            const idx = i\n            formInp.push(<Form.Control style={{margin: \"5px\"}} type=\"text\" placeholder=\"Enter Volume Name\" onChange={e => this.volumeUpdate(idx, e.target.value)}/>\n            )\n        }\n\n        return (\n            <div style={divStyle}>\n            {formInp}\n            {btn_add}\n            {btn_sub}\n            </div>\n        )\n\n    }\n\n    render() {\n\treturn (\n            <div>\n                <Navbar className=\"color-nav-prowess\" expand='xl'>\n                  <Navbar.Brand href=\"#home\">Pomerene Lab IoT Testbed Experiment Scheduler</Navbar.Brand>\n                  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                  <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                      <Nav.Link href=\"/\">Schedule a New Experiment</Nav.Link>\n                      <Nav.Link href=\"/delete\">View My Scheduled Experiments</Nav.Link>\n                    </Nav>\n                 </Navbar.Collapse>\n                </Navbar>\n                <div class=\"container\">\n                <div>\n                    <h1>Schedule a New Experiment</h1>\n                </div>\n                <br/>\n\n\t\t<div class=\"row\">\n                <div class=\"col-md\">\n\t\t\t<p>Testbed Node</p>\n\t\t\t<Select options={ this.getOpts() } onChange={e => this.selectTB(e)} />\n\t\t\t<br/>\n\n\t\t</div>\n                </div>\n\n                <div class=\"row\">\n                <div class=\"col-md\">\n                    <p>Start Date</p>\n                    <SingleDatePicker\n                    date={this.state.startdate}\n                    onDateChange={(startdate) => this.setState( {startdate})}\n                    focused={this.state.focused}\n                    onFocusChange={({focused}) => this.setState({focused})}\n                    id=\"startdate\"/>\n                </div>\n                <div class=\"col-md\">\n                    <p>End Date</p>\n                    <SingleDatePicker\n                    date={this.state.enddate}\n                    onDateChange={(enddate) => this.setState( {enddate})}\n                    focused={this.state.focusedEnd}\n                    onFocusChange={({focused: focusedEnd}) => this.setState({focusedEnd})}\n                    id=\"enddate\"/>\n                </div>\n                </div>\n\n                <div class=\"row\">\n                <div class=\"col-md\">\n                <p>Start Time</p>\n                <TimePicker defaultValue={moment('00:00:00', 'HH:mm:ss')} size=\"large\" onChange={(e) => this.handleChange(e,'starttime')}/>\n                </div>\n                <div class=\"col-md\">\n                <p>End time</p>\n                <TimePicker defaultValue={moment('00:00:00', 'HH:mm:ss')} size=\"large\" onChange={(e) => this.handleChange(e,'endtime')}/>\n                </div>\n                </div>\n                <div>\n\n                <Form onSubmit={this.handleSubmit}>\n                <p> Experiment Container(s) </p>\n\t\t{this.containerInput()}\n\n\t\t<p> Experiment Container(s) YAML </p>\n\t\t{this.containerInputYAML()}\n\n                <p> Shared Volumes (Optional) </p>\n\t\t{this.volumeInput()}\n\n                <Form.Group controlId=\"textarea\">\n\n                <Form.Label>Experiment Description</Form.Label>\n                <Form.Control as=\"textarea\" rows={3} onChange={e => this.setState({ expdescription: e.target.value })}/>\n                </Form.Group>\n\n\t\t{ this.getCPUandRAM() }\n\n\t\t{ this.getSensors() }\n\n\t\t{ this.getHardware() }\n\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n                </Form>\n                </div>\n\n                <div class=\"row\">\n                <div className='scheduler-container'>\n                    <Scheduler events={this.state.calendarData}/>\n                </div>\n                </div>\n                </div>\n            </div>\n        );\n    }\n }\n export default App;\n","/home/boubin.2/PROWESS/Frontend/src/components/Scheduler/index.js",[],"/home/boubin.2/PROWESS/Frontend/src/components/Scheduler/Scheduler.js",[],{"ruleId":"100","severity":1,"message":"101","line":7,"column":8,"nodeType":"102","messageId":"103","endLine":7,"endColumn":14},{"ruleId":"100","severity":1,"message":"104","line":8,"column":9,"nodeType":"102","messageId":"103","endLine":8,"endColumn":23},{"ruleId":"100","severity":1,"message":"105","line":8,"column":25,"nodeType":"102","messageId":"103","endLine":8,"endColumn":42},{"ruleId":"100","severity":1,"message":"106","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":14},{"ruleId":"100","severity":1,"message":"107","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":18},{"ruleId":"100","severity":1,"message":"108","line":6,"column":10,"nodeType":"102","messageId":"103","endLine":6,"endColumn":25},{"ruleId":"100","severity":1,"message":"109","line":6,"column":27,"nodeType":"102","messageId":"103","endLine":6,"endColumn":43},{"ruleId":"100","severity":1,"message":"110","line":6,"column":45,"nodeType":"102","messageId":"103","endLine":6,"endColumn":69},{"ruleId":"100","severity":1,"message":"111","line":9,"column":10,"nodeType":"102","messageId":"103","endLine":9,"endColumn":20},{"ruleId":"100","severity":1,"message":"112","line":10,"column":8,"nodeType":"102","messageId":"103","endLine":10,"endColumn":23},{"ruleId":"100","severity":1,"message":"113","line":11,"column":8,"nodeType":"102","messageId":"103","endLine":11,"endColumn":17},{"ruleId":"100","severity":1,"message":"114","line":12,"column":16,"nodeType":"102","messageId":"103","endLine":12,"endColumn":20},{"ruleId":"100","severity":1,"message":"115","line":12,"column":22,"nodeType":"102","messageId":"103","endLine":12,"endColumn":31},{"ruleId":"100","severity":1,"message":"116","line":12,"column":33,"nodeType":"102","messageId":"103","endLine":12,"endColumn":41},{"ruleId":"100","severity":1,"message":"117","line":12,"column":43,"nodeType":"102","messageId":"103","endLine":12,"endColumn":46},{"ruleId":"100","severity":1,"message":"118","line":12,"column":69,"nodeType":"102","messageId":"103","endLine":12,"endColumn":80},{"ruleId":"100","severity":1,"message":"119","line":12,"column":81,"nodeType":"102","messageId":"103","endLine":12,"endColumn":92},{"ruleId":"100","severity":1,"message":"120","line":16,"column":10,"nodeType":"102","messageId":"103","endLine":16,"endColumn":16},{"ruleId":"100","severity":1,"message":"121","line":17,"column":13,"nodeType":"102","messageId":"103","endLine":17,"endColumn":18},{"ruleId":"122","severity":1,"message":"123","line":61,"column":21,"nodeType":"124","messageId":"125","endLine":61,"endColumn":23},{"ruleId":"122","severity":1,"message":"123","line":63,"column":26,"nodeType":"124","messageId":"125","endLine":63,"endColumn":28},{"ruleId":"100","severity":1,"message":"126","line":95,"column":13,"nodeType":"102","messageId":"103","endLine":95,"endColumn":19},{"ruleId":"100","severity":1,"message":"127","line":116,"column":10,"nodeType":"102","messageId":"103","endLine":116,"endColumn":17},{"ruleId":"100","severity":1,"message":"127","line":175,"column":13,"nodeType":"102","messageId":"103","endLine":175,"endColumn":20},{"ruleId":"100","severity":1,"message":"127","line":190,"column":13,"nodeType":"102","messageId":"103","endLine":190,"endColumn":20},{"ruleId":"100","severity":1,"message":"128","line":206,"column":15,"nodeType":"102","messageId":"103","endLine":206,"endColumn":19},{"ruleId":"122","severity":1,"message":"129","line":207,"column":23,"nodeType":"124","messageId":"125","endLine":207,"endColumn":25},{"ruleId":"100","severity":1,"message":"130","line":210,"column":11,"nodeType":"102","messageId":"103","endLine":210,"endColumn":16},{"ruleId":"122","severity":1,"message":"123","line":214,"column":36,"nodeType":"124","messageId":"125","endLine":214,"endColumn":38},{"ruleId":"122","severity":1,"message":"123","line":217,"column":36,"nodeType":"124","messageId":"125","endLine":217,"endColumn":38},{"ruleId":"131","severity":1,"message":"132","line":219,"column":8,"nodeType":"102","messageId":"133","endLine":219,"endColumn":10},{"ruleId":"100","severity":1,"message":"134","line":1,"column":28,"nodeType":"102","messageId":"103","endLine":1,"endColumn":36},{"ruleId":"100","severity":1,"message":"107","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":18},{"ruleId":"100","severity":1,"message":"108","line":6,"column":10,"nodeType":"102","messageId":"103","endLine":6,"endColumn":25},{"ruleId":"100","severity":1,"message":"110","line":6,"column":45,"nodeType":"102","messageId":"103","endLine":6,"endColumn":69},{"ruleId":"100","severity":1,"message":"112","line":10,"column":8,"nodeType":"102","messageId":"103","endLine":10,"endColumn":23},{"ruleId":"100","severity":1,"message":"113","line":11,"column":8,"nodeType":"102","messageId":"103","endLine":11,"endColumn":17},{"ruleId":"100","severity":1,"message":"115","line":12,"column":15,"nodeType":"102","messageId":"103","endLine":12,"endColumn":24},{"ruleId":"100","severity":1,"message":"116","line":12,"column":26,"nodeType":"102","messageId":"103","endLine":12,"endColumn":34},{"ruleId":"100","severity":1,"message":"117","line":12,"column":36,"nodeType":"102","messageId":"103","endLine":12,"endColumn":39},{"ruleId":"100","severity":1,"message":"118","line":12,"column":62,"nodeType":"102","messageId":"103","endLine":12,"endColumn":73},{"ruleId":"100","severity":1,"message":"119","line":12,"column":74,"nodeType":"102","messageId":"103","endLine":12,"endColumn":85},{"ruleId":"100","severity":1,"message":"135","line":19,"column":7,"nodeType":"102","messageId":"103","endLine":19,"endColumn":11},{"ruleId":"122","severity":1,"message":"123","line":62,"column":14,"nodeType":"124","messageId":"125","endLine":62,"endColumn":16},{"ruleId":"122","severity":1,"message":"123","line":66,"column":19,"nodeType":"124","messageId":"125","endLine":66,"endColumn":21},{"ruleId":"100","severity":1,"message":"126","line":97,"column":13,"nodeType":"102","messageId":"103","endLine":97,"endColumn":19},{"ruleId":"100","severity":1,"message":"136","line":128,"column":7,"nodeType":"102","messageId":"103","endLine":128,"endColumn":11},{"ruleId":"100","severity":1,"message":"137","line":133,"column":8,"nodeType":"102","messageId":"103","endLine":133,"endColumn":10},{"ruleId":"122","severity":1,"message":"123","line":136,"column":20,"nodeType":"124","messageId":"125","endLine":136,"endColumn":22},{"ruleId":"122","severity":1,"message":"123","line":211,"column":14,"nodeType":"124","messageId":"125","endLine":211,"endColumn":16},{"ruleId":"122","severity":1,"message":"123","line":223,"column":15,"nodeType":"124","messageId":"125","endLine":223,"endColumn":17},{"ruleId":"131","severity":1,"message":"138","line":243,"column":12,"nodeType":"102","messageId":"133","endLine":243,"endColumn":13},{"ruleId":"139","severity":1,"message":"140","line":403,"column":68,"nodeType":"141","messageId":"142","endLine":403,"endColumn":86},{"ruleId":"143","severity":1,"message":"144","line":403,"column":98,"nodeType":"145","messageId":"146","endLine":403,"endColumn":143},{"ruleId":"147","severity":1,"message":"148","line":436,"column":9,"nodeType":"149","messageId":"150","endLine":436,"endColumn":31},{"ruleId":"131","severity":1,"message":"151","line":445,"column":7,"nodeType":"102","messageId":"133","endLine":445,"endColumn":10},{"ruleId":"139","severity":1,"message":"140","line":478,"column":68,"nodeType":"141","messageId":"142","endLine":478,"endColumn":86},{"ruleId":"143","severity":1,"message":"144","line":478,"column":98,"nodeType":"145","messageId":"146","endLine":478,"endColumn":142},"no-unused-vars","'routes' is defined but never used.","Identifier","unusedVar","'BootstrapTable' is defined but never used.","'TableHeaderColumn' is defined but never used.","'Delete' is defined but never used.","'DatePicker' is defined but never used.","'DateRangePicker' is defined but never used.","'SingleDatePicker' is defined but never used.","'DayPickerRangeController' is defined but never used.","'TimePicker' is defined but never used.","'momentPropTypes' is defined but never used.","'PropTypes' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Checkbox' is defined but never used.","'Col' is defined but never used.","'NavDropdown' is defined but never used.","'FormControl' is defined but never used.","'saveAs' is defined but never used.","'JSZip' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'newExp' is assigned a value but never used.","'context' is assigned a value but never used.","'self' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'label' is assigned a value but never used.","no-redeclare","'bv' is already defined.","redeclared","'Fragment' is defined but never used.","'util' is assigned a value but never used.","'resp' is assigned a value but never used.","'tb' is assigned a value but never used.","'i' is already defined.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","ArrowFunctionExpression","unsafeRefs","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'max' is already defined."]