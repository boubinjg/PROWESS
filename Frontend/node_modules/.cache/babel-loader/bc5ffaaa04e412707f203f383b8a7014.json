{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Array = GetIntrinsic('%Array%');\nvar $species = GetIntrinsic('%Symbol.species%', true);\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Get = require('./Get');\n\nvar IsArray = require('./IsArray');\n\nvar IsConstructor = require('./IsConstructor');\n\nvar IsInteger = require('./IsInteger');\n\nvar Type = require('./Type'); // https://ecma-international.org/ecma-262/6.0/#sec-arrayspeciescreate\n\n\nmodule.exports = function ArraySpeciesCreate(originalArray, length) {\n  if (!IsInteger(length) || length < 0) {\n    throw new $TypeError('Assertion failed: length must be an integer >= 0');\n  }\n\n  var len = length === 0 ? 0 : length;\n  var C;\n  var isArray = IsArray(originalArray);\n\n  if (isArray) {\n    C = Get(originalArray, 'constructor'); // TODO: figure out how to make a cross-realm normal Array, a same-realm Array\n    // if (IsConstructor(C)) {\n    // \tif C is another realm's Array, C = undefined\n    // \tObject.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?\n    // }\n\n    if ($species && Type(C) === 'Object') {\n      C = Get(C, $species);\n\n      if (C === null) {\n        C = void 0;\n      }\n    }\n  }\n\n  if (typeof C === 'undefined') {\n    return $Array(len);\n  }\n\n  if (!IsConstructor(C)) {\n    throw new $TypeError('C must be a constructor');\n  }\n\n  return new C(len); // Construct(C, len);\n};","map":{"version":3,"sources":["/home/boubin.2/PROWESS/Frontend/node_modules/es-abstract/2020/ArraySpeciesCreate.js"],"names":["GetIntrinsic","require","$Array","$species","$TypeError","Get","IsArray","IsConstructor","IsInteger","Type","module","exports","ArraySpeciesCreate","originalArray","length","len","C","isArray"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,MAAM,GAAGF,YAAY,CAAC,SAAD,CAAzB;AACA,IAAIG,QAAQ,GAAGH,YAAY,CAAC,kBAAD,EAAqB,IAArB,CAA3B;AACA,IAAII,UAAU,GAAGJ,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIK,GAAG,GAAGJ,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIM,aAAa,GAAGN,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIO,SAAS,GAAGP,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIQ,IAAI,GAAGR,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAS,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA4BC,aAA5B,EAA2CC,MAA3C,EAAmD;AACnE,MAAI,CAACN,SAAS,CAACM,MAAD,CAAV,IAAsBA,MAAM,GAAG,CAAnC,EAAsC;AACrC,UAAM,IAAIV,UAAJ,CAAe,kDAAf,CAAN;AACA;;AACD,MAAIW,GAAG,GAAGD,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAA7B;AACA,MAAIE,CAAJ;AACA,MAAIC,OAAO,GAAGX,OAAO,CAACO,aAAD,CAArB;;AACA,MAAII,OAAJ,EAAa;AACZD,IAAAA,CAAC,GAAGX,GAAG,CAACQ,aAAD,EAAgB,aAAhB,CAAP,CADY,CAEZ;AACA;AACA;AACA;AACA;;AACA,QAAIV,QAAQ,IAAIM,IAAI,CAACO,CAAD,CAAJ,KAAY,QAA5B,EAAsC;AACrCA,MAAAA,CAAC,GAAGX,GAAG,CAACW,CAAD,EAAIb,QAAJ,CAAP;;AACA,UAAIa,CAAC,KAAK,IAAV,EAAgB;AACfA,QAAAA,CAAC,GAAG,KAAK,CAAT;AACA;AACD;AACD;;AACD,MAAI,OAAOA,CAAP,KAAa,WAAjB,EAA8B;AAC7B,WAAOd,MAAM,CAACa,GAAD,CAAb;AACA;;AACD,MAAI,CAACR,aAAa,CAACS,CAAD,CAAlB,EAAuB;AACtB,UAAM,IAAIZ,UAAJ,CAAe,yBAAf,CAAN;AACA;;AACD,SAAO,IAAIY,CAAJ,CAAMD,GAAN,CAAP,CA3BmE,CA2BhD;AACnB,CA5BD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Array = GetIntrinsic('%Array%');\nvar $species = GetIntrinsic('%Symbol.species%', true);\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Get = require('./Get');\nvar IsArray = require('./IsArray');\nvar IsConstructor = require('./IsConstructor');\nvar IsInteger = require('./IsInteger');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-arrayspeciescreate\n\nmodule.exports = function ArraySpeciesCreate(originalArray, length) {\n\tif (!IsInteger(length) || length < 0) {\n\t\tthrow new $TypeError('Assertion failed: length must be an integer >= 0');\n\t}\n\tvar len = length === 0 ? 0 : length;\n\tvar C;\n\tvar isArray = IsArray(originalArray);\n\tif (isArray) {\n\t\tC = Get(originalArray, 'constructor');\n\t\t// TODO: figure out how to make a cross-realm normal Array, a same-realm Array\n\t\t// if (IsConstructor(C)) {\n\t\t// \tif C is another realm's Array, C = undefined\n\t\t// \tObject.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?\n\t\t// }\n\t\tif ($species && Type(C) === 'Object') {\n\t\t\tC = Get(C, $species);\n\t\t\tif (C === null) {\n\t\t\t\tC = void 0;\n\t\t\t}\n\t\t}\n\t}\n\tif (typeof C === 'undefined') {\n\t\treturn $Array(len);\n\t}\n\tif (!IsConstructor(C)) {\n\t\tthrow new $TypeError('C must be a constructor');\n\t}\n\treturn new C(len); // Construct(C, len);\n};\n\n"]},"metadata":{},"sourceType":"script"}