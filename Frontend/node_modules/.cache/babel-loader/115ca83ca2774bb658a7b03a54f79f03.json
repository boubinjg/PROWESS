{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getInputHeight;\n/* eslint-disable camelcase */\n\nfunction getPadding(vertical, top, bottom) {\n  var isTopDefined = typeof top === 'number';\n  var isBottomDefined = typeof bottom === 'number';\n  var isVerticalDefined = typeof vertical === 'number';\n\n  if (isTopDefined && isBottomDefined) {\n    return top + bottom;\n  }\n\n  if (isTopDefined && isVerticalDefined) {\n    return top + vertical;\n  }\n\n  if (isTopDefined) {\n    return top;\n  }\n\n  if (isBottomDefined && isVerticalDefined) {\n    return bottom + vertical;\n  }\n\n  if (isBottomDefined) {\n    return bottom;\n  }\n\n  if (isVerticalDefined) {\n    return 2 * vertical;\n  }\n\n  return 0;\n}\n\nfunction getInputHeight(_ref, small) {\n  var _ref$font$input = _ref.font.input,\n      lineHeight = _ref$font$input.lineHeight,\n      lineHeight_small = _ref$font$input.lineHeight_small,\n      _ref$spacing = _ref.spacing,\n      inputPadding = _ref$spacing.inputPadding,\n      displayTextPaddingVertical = _ref$spacing.displayTextPaddingVertical,\n      displayTextPaddingTop = _ref$spacing.displayTextPaddingTop,\n      displayTextPaddingBottom = _ref$spacing.displayTextPaddingBottom,\n      displayTextPaddingVertical_small = _ref$spacing.displayTextPaddingVertical_small,\n      displayTextPaddingTop_small = _ref$spacing.displayTextPaddingTop_small,\n      displayTextPaddingBottom_small = _ref$spacing.displayTextPaddingBottom_small;\n  var calcLineHeight = small ? lineHeight_small : lineHeight;\n  var padding = small ? getPadding(displayTextPaddingVertical_small, displayTextPaddingTop_small, displayTextPaddingBottom_small) : getPadding(displayTextPaddingVertical, displayTextPaddingTop, displayTextPaddingBottom);\n  return parseInt(calcLineHeight, 10) + 2 * inputPadding + padding;\n}","map":{"version":3,"sources":["/home/boubin.2/PROWESS/Frontend/node_modules/react-dates/lib/utils/getInputHeight.js"],"names":["Object","defineProperty","exports","value","getInputHeight","getPadding","vertical","top","bottom","isTopDefined","isBottomDefined","isVerticalDefined","_ref","small","_ref$font$input","font","input","lineHeight","lineHeight_small","_ref$spacing","spacing","inputPadding","displayTextPaddingVertical","displayTextPaddingTop","displayTextPaddingBottom","displayTextPaddingVertical_small","displayTextPaddingTop_small","displayTextPaddingBottom_small","calcLineHeight","padding","parseInt"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,cAArB;AAEA;;AACA,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,GAA9B,EAAmCC,MAAnC,EAA2C;AACzC,MAAIC,YAAY,GAAG,OAAOF,GAAP,KAAe,QAAlC;AACA,MAAIG,eAAe,GAAG,OAAOF,MAAP,KAAkB,QAAxC;AACA,MAAIG,iBAAiB,GAAG,OAAOL,QAAP,KAAoB,QAA5C;;AAEA,MAAIG,YAAY,IAAIC,eAApB,EAAqC;AACnC,WAAOH,GAAG,GAAGC,MAAb;AACD;;AAED,MAAIC,YAAY,IAAIE,iBAApB,EAAuC;AACrC,WAAOJ,GAAG,GAAGD,QAAb;AACD;;AAED,MAAIG,YAAJ,EAAkB;AAChB,WAAOF,GAAP;AACD;;AAED,MAAIG,eAAe,IAAIC,iBAAvB,EAA0C;AACxC,WAAOH,MAAM,GAAGF,QAAhB;AACD;;AAED,MAAII,eAAJ,EAAqB;AACnB,WAAOF,MAAP;AACD;;AAED,MAAIG,iBAAJ,EAAuB;AACrB,WAAO,IAAIL,QAAX;AACD;;AAED,SAAO,CAAP;AACD;;AAED,SAASF,cAAT,CAAwBQ,IAAxB,EAA8BC,KAA9B,EAAqC;AACnC,MAAIC,eAAe,GAAGF,IAAI,CAACG,IAAL,CAAUC,KAAhC;AAAA,MACIC,UAAU,GAAGH,eAAe,CAACG,UADjC;AAAA,MAEIC,gBAAgB,GAAGJ,eAAe,CAACI,gBAFvC;AAAA,MAGIC,YAAY,GAAGP,IAAI,CAACQ,OAHxB;AAAA,MAIIC,YAAY,GAAGF,YAAY,CAACE,YAJhC;AAAA,MAKIC,0BAA0B,GAAGH,YAAY,CAACG,0BAL9C;AAAA,MAMIC,qBAAqB,GAAGJ,YAAY,CAACI,qBANzC;AAAA,MAOIC,wBAAwB,GAAGL,YAAY,CAACK,wBAP5C;AAAA,MAQIC,gCAAgC,GAAGN,YAAY,CAACM,gCARpD;AAAA,MASIC,2BAA2B,GAAGP,YAAY,CAACO,2BAT/C;AAAA,MAUIC,8BAA8B,GAAGR,YAAY,CAACQ,8BAVlD;AAWA,MAAIC,cAAc,GAAGf,KAAK,GAAGK,gBAAH,GAAsBD,UAAhD;AACA,MAAIY,OAAO,GAAGhB,KAAK,GAAGR,UAAU,CAACoB,gCAAD,EAAmCC,2BAAnC,EAAgEC,8BAAhE,CAAb,GAA+GtB,UAAU,CAACiB,0BAAD,EAA6BC,qBAA7B,EAAoDC,wBAApD,CAA5I;AACA,SAAOM,QAAQ,CAACF,cAAD,EAAiB,EAAjB,CAAR,GAA+B,IAAIP,YAAnC,GAAkDQ,OAAzD;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getInputHeight;\n\n/* eslint-disable camelcase */\nfunction getPadding(vertical, top, bottom) {\n  var isTopDefined = typeof top === 'number';\n  var isBottomDefined = typeof bottom === 'number';\n  var isVerticalDefined = typeof vertical === 'number';\n\n  if (isTopDefined && isBottomDefined) {\n    return top + bottom;\n  }\n\n  if (isTopDefined && isVerticalDefined) {\n    return top + vertical;\n  }\n\n  if (isTopDefined) {\n    return top;\n  }\n\n  if (isBottomDefined && isVerticalDefined) {\n    return bottom + vertical;\n  }\n\n  if (isBottomDefined) {\n    return bottom;\n  }\n\n  if (isVerticalDefined) {\n    return 2 * vertical;\n  }\n\n  return 0;\n}\n\nfunction getInputHeight(_ref, small) {\n  var _ref$font$input = _ref.font.input,\n      lineHeight = _ref$font$input.lineHeight,\n      lineHeight_small = _ref$font$input.lineHeight_small,\n      _ref$spacing = _ref.spacing,\n      inputPadding = _ref$spacing.inputPadding,\n      displayTextPaddingVertical = _ref$spacing.displayTextPaddingVertical,\n      displayTextPaddingTop = _ref$spacing.displayTextPaddingTop,\n      displayTextPaddingBottom = _ref$spacing.displayTextPaddingBottom,\n      displayTextPaddingVertical_small = _ref$spacing.displayTextPaddingVertical_small,\n      displayTextPaddingTop_small = _ref$spacing.displayTextPaddingTop_small,\n      displayTextPaddingBottom_small = _ref$spacing.displayTextPaddingBottom_small;\n  var calcLineHeight = small ? lineHeight_small : lineHeight;\n  var padding = small ? getPadding(displayTextPaddingVertical_small, displayTextPaddingTop_small, displayTextPaddingBottom_small) : getPadding(displayTextPaddingVertical, displayTextPaddingTop, displayTextPaddingBottom);\n  return parseInt(calcLineHeight, 10) + 2 * inputPadding + padding;\n}"]},"metadata":{},"sourceType":"script"}