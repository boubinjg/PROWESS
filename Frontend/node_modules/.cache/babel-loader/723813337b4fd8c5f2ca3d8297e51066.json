{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\n\nvar Call = require('./Call');\n\nvar CreateDataPropertyOrThrow = require('./CreateDataPropertyOrThrow');\n\nvar Get = require('./Get');\n\nvar HasProperty = require('./HasProperty');\n\nvar IsArray = require('./IsArray');\n\nvar LengthOfArrayLike = require('./LengthOfArrayLike');\n\nvar ToString = require('./ToString'); // https://262.ecma-international.org/11.0/#sec-flattenintoarray\n// eslint-disable-next-line max-params\n\n\nmodule.exports = function FlattenIntoArray(target, source, sourceLen, start, depth) {\n  var mapperFunction;\n\n  if (arguments.length > 5) {\n    mapperFunction = arguments[5];\n  }\n\n  var targetIndex = start;\n  var sourceIndex = 0;\n\n  while (sourceIndex < sourceLen) {\n    var P = ToString(sourceIndex);\n    var exists = HasProperty(source, P);\n\n    if (exists === true) {\n      var element = Get(source, P);\n\n      if (typeof mapperFunction !== 'undefined') {\n        if (arguments.length <= 6) {\n          throw new $TypeError('Assertion failed: thisArg is required when mapperFunction is provided');\n        }\n\n        element = Call(mapperFunction, arguments[6], [element, sourceIndex, source]);\n      }\n\n      var shouldFlatten = false;\n\n      if (depth > 0) {\n        shouldFlatten = IsArray(element);\n      }\n\n      if (shouldFlatten) {\n        var elementLen = LengthOfArrayLike(element);\n        targetIndex = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);\n      } else {\n        if (targetIndex >= MAX_SAFE_INTEGER) {\n          throw new $TypeError('index too large');\n        }\n\n        CreateDataPropertyOrThrow(target, ToString(targetIndex), element);\n        targetIndex += 1;\n      }\n    }\n\n    sourceIndex += 1;\n  }\n\n  return targetIndex;\n};","map":{"version":3,"sources":["/home/jayson/Code/IoTLabScratchpad/IoTLabScheduler/Frontend/node_modules/es-abstract/2020/FlattenIntoArray.js"],"names":["GetIntrinsic","require","$TypeError","MAX_SAFE_INTEGER","Call","CreateDataPropertyOrThrow","Get","HasProperty","IsArray","LengthOfArrayLike","ToString","module","exports","FlattenIntoArray","target","source","sourceLen","start","depth","mapperFunction","arguments","length","targetIndex","sourceIndex","P","exists","element","shouldFlatten","elementLen"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,gBAAgB,GAAGF,OAAO,CAAC,2BAAD,CAA9B;;AAEA,IAAIG,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAII,yBAAyB,GAAGJ,OAAO,CAAC,6BAAD,CAAvC;;AACA,IAAIK,GAAG,GAAGL,OAAO,CAAC,OAAD,CAAjB;;AACA,IAAIM,WAAW,GAAGN,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIO,OAAO,GAAGP,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIQ,iBAAiB,GAAGR,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAIS,QAAQ,GAAGT,OAAO,CAAC,YAAD,CAAtB,C,CAEA;AAEA;;;AACAU,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,MAAlC,EAA0CC,SAA1C,EAAqDC,KAArD,EAA4DC,KAA5D,EAAmE;AACnF,MAAIC,cAAJ;;AACA,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACzBF,IAAAA,cAAc,GAAGC,SAAS,CAAC,CAAD,CAA1B;AACA;;AAED,MAAIE,WAAW,GAAGL,KAAlB;AACA,MAAIM,WAAW,GAAG,CAAlB;;AACA,SAAOA,WAAW,GAAGP,SAArB,EAAgC;AAC/B,QAAIQ,CAAC,GAAGd,QAAQ,CAACa,WAAD,CAAhB;AACA,QAAIE,MAAM,GAAGlB,WAAW,CAACQ,MAAD,EAASS,CAAT,CAAxB;;AACA,QAAIC,MAAM,KAAK,IAAf,EAAqB;AACpB,UAAIC,OAAO,GAAGpB,GAAG,CAACS,MAAD,EAASS,CAAT,CAAjB;;AACA,UAAI,OAAOL,cAAP,KAA0B,WAA9B,EAA2C;AAC1C,YAAIC,SAAS,CAACC,MAAV,IAAoB,CAAxB,EAA2B;AAC1B,gBAAM,IAAInB,UAAJ,CAAe,uEAAf,CAAN;AACA;;AACDwB,QAAAA,OAAO,GAAGtB,IAAI,CAACe,cAAD,EAAiBC,SAAS,CAAC,CAAD,CAA1B,EAA+B,CAACM,OAAD,EAAUH,WAAV,EAAuBR,MAAvB,CAA/B,CAAd;AACA;;AACD,UAAIY,aAAa,GAAG,KAApB;;AACA,UAAIT,KAAK,GAAG,CAAZ,EAAe;AACdS,QAAAA,aAAa,GAAGnB,OAAO,CAACkB,OAAD,CAAvB;AACA;;AACD,UAAIC,aAAJ,EAAmB;AAClB,YAAIC,UAAU,GAAGnB,iBAAiB,CAACiB,OAAD,CAAlC;AACAJ,QAAAA,WAAW,GAAGT,gBAAgB,CAACC,MAAD,EAASY,OAAT,EAAkBE,UAAlB,EAA8BN,WAA9B,EAA2CJ,KAAK,GAAG,CAAnD,CAA9B;AACA,OAHD,MAGO;AACN,YAAII,WAAW,IAAInB,gBAAnB,EAAqC;AACpC,gBAAM,IAAID,UAAJ,CAAe,iBAAf,CAAN;AACA;;AACDG,QAAAA,yBAAyB,CAACS,MAAD,EAASJ,QAAQ,CAACY,WAAD,CAAjB,EAAgCI,OAAhC,CAAzB;AACAJ,QAAAA,WAAW,IAAI,CAAf;AACA;AACD;;AACDC,IAAAA,WAAW,IAAI,CAAf;AACA;;AAED,SAAOD,WAAP;AACA,CAtCD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\n\nvar Call = require('./Call');\nvar CreateDataPropertyOrThrow = require('./CreateDataPropertyOrThrow');\nvar Get = require('./Get');\nvar HasProperty = require('./HasProperty');\nvar IsArray = require('./IsArray');\nvar LengthOfArrayLike = require('./LengthOfArrayLike');\nvar ToString = require('./ToString');\n\n// https://262.ecma-international.org/11.0/#sec-flattenintoarray\n\n// eslint-disable-next-line max-params\nmodule.exports = function FlattenIntoArray(target, source, sourceLen, start, depth) {\n\tvar mapperFunction;\n\tif (arguments.length > 5) {\n\t\tmapperFunction = arguments[5];\n\t}\n\n\tvar targetIndex = start;\n\tvar sourceIndex = 0;\n\twhile (sourceIndex < sourceLen) {\n\t\tvar P = ToString(sourceIndex);\n\t\tvar exists = HasProperty(source, P);\n\t\tif (exists === true) {\n\t\t\tvar element = Get(source, P);\n\t\t\tif (typeof mapperFunction !== 'undefined') {\n\t\t\t\tif (arguments.length <= 6) {\n\t\t\t\t\tthrow new $TypeError('Assertion failed: thisArg is required when mapperFunction is provided');\n\t\t\t\t}\n\t\t\t\telement = Call(mapperFunction, arguments[6], [element, sourceIndex, source]);\n\t\t\t}\n\t\t\tvar shouldFlatten = false;\n\t\t\tif (depth > 0) {\n\t\t\t\tshouldFlatten = IsArray(element);\n\t\t\t}\n\t\t\tif (shouldFlatten) {\n\t\t\t\tvar elementLen = LengthOfArrayLike(element);\n\t\t\t\ttargetIndex = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);\n\t\t\t} else {\n\t\t\t\tif (targetIndex >= MAX_SAFE_INTEGER) {\n\t\t\t\t\tthrow new $TypeError('index too large');\n\t\t\t\t}\n\t\t\t\tCreateDataPropertyOrThrow(target, ToString(targetIndex), element);\n\t\t\t\ttargetIndex += 1;\n\t\t\t}\n\t\t}\n\t\tsourceIndex += 1;\n\t}\n\n\treturn targetIndex;\n};\n"]},"metadata":{},"sourceType":"script"}