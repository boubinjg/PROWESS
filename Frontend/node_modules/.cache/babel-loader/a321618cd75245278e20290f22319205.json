{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsArray = require('./IsArray');\n\nvar $apply = GetIntrinsic('%Reflect.apply%', true) || callBound('%Function.prototype.apply%'); // https://ecma-international.org/ecma-262/6.0/#sec-call\n\nmodule.exports = function Call(F, V) {\n  var argumentsList = arguments.length > 2 ? arguments[2] : [];\n\n  if (!IsArray(argumentsList)) {\n    throw new $TypeError('Assertion failed: optional `argumentsList`, if provided, must be a List');\n  }\n\n  return $apply(F, V, argumentsList);\n};","map":{"version":3,"sources":["/home/boubin_lab/Github/PROWESS/Frontend/node_modules/es-abstract/2020/Call.js"],"names":["GetIntrinsic","require","callBound","$TypeError","IsArray","$apply","module","exports","Call","F","V","argumentsList","arguments","length"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGH,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAII,OAAO,GAAGH,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAII,MAAM,GAAGL,YAAY,CAAC,iBAAD,EAAoB,IAApB,CAAZ,IAAyCE,SAAS,CAAC,4BAAD,CAA/D,C,CAEA;;AAEAI,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoB;AACpC,MAAIC,aAAa,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsC,EAA1D;;AACA,MAAI,CAACR,OAAO,CAACO,aAAD,CAAZ,EAA6B;AAC5B,UAAM,IAAIR,UAAJ,CAAe,yEAAf,CAAN;AACA;;AACD,SAAOE,MAAM,CAACI,CAAD,EAAIC,CAAJ,EAAOC,aAAP,CAAb;AACA,CAND","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar IsArray = require('./IsArray');\n\nvar $apply = GetIntrinsic('%Reflect.apply%', true) || callBound('%Function.prototype.apply%');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-call\n\nmodule.exports = function Call(F, V) {\n\tvar argumentsList = arguments.length > 2 ? arguments[2] : [];\n\tif (!IsArray(argumentsList)) {\n\t\tthrow new $TypeError('Assertion failed: optional `argumentsList`, if provided, must be a List');\n\t}\n\treturn $apply(F, V, argumentsList);\n};\n"]},"metadata":{},"sourceType":"script"}