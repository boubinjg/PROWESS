{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getDetachedContainerStyles;\n\nvar _constants = require(\"../constants\");\n/**\n * Calculate and return a CSS transform style to position a detached element\n * next to a reference element. The open and anchor direction indicate wether\n * it should be positioned above/below and/or to the left/right of the\n * reference element.\n *\n * Assuming r(0,0), r(1,1), d(0,0), d(1,1) for the bottom-left and top-right\n * corners of the reference and detached elements, respectively:\n *  - openDirection = DOWN, anchorDirection = LEFT => d(0,1) == r(0,1)\n *  - openDirection = UP, anchorDirection = LEFT => d(0,0) == r(0,0)\n *  - openDirection = DOWN, anchorDirection = RIGHT => d(1,1) == r(1,1)\n *  - openDirection = UP, anchorDirection = RIGHT => d(1,0) == r(1,0)\n *\n * By using a CSS transform, we allow to further position it using\n * top/bottom CSS properties for the anchor gutter.\n *\n * @param {string} openDirection The vertical positioning of the popup\n * @param {string} anchorDirection The horizontal position of the popup\n * @param {HTMLElement} referenceEl The reference element\n */\n\n\nfunction getDetachedContainerStyles(openDirection, anchorDirection, referenceEl) {\n  var referenceRect = referenceEl.getBoundingClientRect();\n  var offsetX = referenceRect.left;\n  var offsetY = referenceRect.top;\n\n  if (openDirection === _constants.OPEN_UP) {\n    offsetY = -(window.innerHeight - referenceRect.bottom);\n  }\n\n  if (anchorDirection === _constants.ANCHOR_RIGHT) {\n    offsetX = -(window.innerWidth - referenceRect.right);\n  }\n\n  return {\n    transform: \"translate3d(\".concat(Math.round(offsetX), \"px, \").concat(Math.round(offsetY), \"px, 0)\")\n  };\n}","map":{"version":3,"sources":["/home/boubin.2/PROWESS/Frontend/node_modules/react-dates/lib/utils/getDetachedContainerStyles.js"],"names":["Object","defineProperty","exports","value","getDetachedContainerStyles","_constants","require","openDirection","anchorDirection","referenceEl","referenceRect","getBoundingClientRect","offsetX","left","offsetY","top","OPEN_UP","window","innerHeight","bottom","ANCHOR_RIGHT","innerWidth","right","transform","concat","Math","round"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,0BAArB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,0BAAT,CAAoCG,aAApC,EAAmDC,eAAnD,EAAoEC,WAApE,EAAiF;AAC/E,MAAIC,aAAa,GAAGD,WAAW,CAACE,qBAAZ,EAApB;AACA,MAAIC,OAAO,GAAGF,aAAa,CAACG,IAA5B;AACA,MAAIC,OAAO,GAAGJ,aAAa,CAACK,GAA5B;;AAEA,MAAIR,aAAa,KAAKF,UAAU,CAACW,OAAjC,EAA0C;AACxCF,IAAAA,OAAO,GAAG,EAAEG,MAAM,CAACC,WAAP,GAAqBR,aAAa,CAACS,MAArC,CAAV;AACD;;AAED,MAAIX,eAAe,KAAKH,UAAU,CAACe,YAAnC,EAAiD;AAC/CR,IAAAA,OAAO,GAAG,EAAEK,MAAM,CAACI,UAAP,GAAoBX,aAAa,CAACY,KAApC,CAAV;AACD;;AAED,SAAO;AACLC,IAAAA,SAAS,EAAE,eAAeC,MAAf,CAAsBC,IAAI,CAACC,KAAL,CAAWd,OAAX,CAAtB,EAA2C,MAA3C,EAAmDY,MAAnD,CAA0DC,IAAI,CAACC,KAAL,CAAWZ,OAAX,CAA1D,EAA+E,QAA/E;AADN,GAAP;AAGD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getDetachedContainerStyles;\n\nvar _constants = require(\"../constants\");\n\n/**\n * Calculate and return a CSS transform style to position a detached element\n * next to a reference element. The open and anchor direction indicate wether\n * it should be positioned above/below and/or to the left/right of the\n * reference element.\n *\n * Assuming r(0,0), r(1,1), d(0,0), d(1,1) for the bottom-left and top-right\n * corners of the reference and detached elements, respectively:\n *  - openDirection = DOWN, anchorDirection = LEFT => d(0,1) == r(0,1)\n *  - openDirection = UP, anchorDirection = LEFT => d(0,0) == r(0,0)\n *  - openDirection = DOWN, anchorDirection = RIGHT => d(1,1) == r(1,1)\n *  - openDirection = UP, anchorDirection = RIGHT => d(1,0) == r(1,0)\n *\n * By using a CSS transform, we allow to further position it using\n * top/bottom CSS properties for the anchor gutter.\n *\n * @param {string} openDirection The vertical positioning of the popup\n * @param {string} anchorDirection The horizontal position of the popup\n * @param {HTMLElement} referenceEl The reference element\n */\nfunction getDetachedContainerStyles(openDirection, anchorDirection, referenceEl) {\n  var referenceRect = referenceEl.getBoundingClientRect();\n  var offsetX = referenceRect.left;\n  var offsetY = referenceRect.top;\n\n  if (openDirection === _constants.OPEN_UP) {\n    offsetY = -(window.innerHeight - referenceRect.bottom);\n  }\n\n  if (anchorDirection === _constants.ANCHOR_RIGHT) {\n    offsetX = -(window.innerWidth - referenceRect.right);\n  }\n\n  return {\n    transform: \"translate3d(\".concat(Math.round(offsetX), \"px, \").concat(Math.round(offsetY), \"px, 0)\")\n  };\n}"]},"metadata":{},"sourceType":"script"}