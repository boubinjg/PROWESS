{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = shapeValidator;\n\nvar _isPlainObject = _interopRequireDefault(require(\"./helpers/isPlainObject\"));\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction shapeValidator(shapeTypes) {\n  if (!(0, _isPlainObject[\"default\"])(shapeTypes)) {\n    throw new TypeError('shape must be a normal object');\n  }\n\n  function shape(props, propName, componentName, location) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return null;\n    } // code adapted from PropTypes.shape: https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L381\n    // eslint-disable-next-line guard-for-in, no-restricted-syntax\n\n\n    for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n      rest[_key - 4] = arguments[_key];\n    }\n\n    for (var key in shapeTypes) {\n      var checker = shapeTypes[key];\n\n      if (checker) {\n        var error = checker.apply(void 0, [propValue, key, componentName, location].concat(rest));\n\n        if (error) {\n          return error;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  shape.isRequired = function shapeRequired(props, propName, componentName) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return new TypeError(\"\".concat(componentName, \": \").concat(propName, \" is required.\"));\n    }\n\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      rest[_key2 - 3] = arguments[_key2];\n    }\n\n    return shape.apply(void 0, [props, propName, componentName].concat(rest));\n  };\n\n  return (0, _wrapValidator[\"default\"])(shape, 'shape', shapeTypes);\n}","map":{"version":3,"sources":["../src/shape.js"],"names":["rest","propValue","props","checker","shapeTypes","error","shape"],"mappings":";;;;;;;AAAA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;;;;;;;AAEe,SAAA,cAAA,CAAA,UAAA,EAAoC;AACjD,MAAI,CAAC,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAL,UAAK,CAAL,EAAgC;AAC9B,UAAM,IAAA,SAAA,CAAN,+BAAM,CAAN;AACD;;AAED,WAAA,KAAA,CAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAAA,QAAA,EAAkE;AAAA,QAC5CC,SAD4C,GAC9BC,KAD8B,CAAA,QAAA,CAAA;;AAEhE,QAAID,SAAS,IAAb,IAAA,EAAuB;AACrB,aAAA,IAAA;AAH8D,KAAA,CAKhE;AACA;;;AANgE,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAND,IAAM,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,MAAAA,IAAM,CAAA,IAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;;AAOhE,SAAK,IAAL,GAAA,IAAA,UAAA,EAA8B;AAC5B,UAAMG,OAAO,GAAGC,UAAU,CAA1B,GAA0B,CAA1B;;AACA,UAAA,OAAA,EAAa;AACX,YAAMC,KAAK,GAAGF,OAAO,CAAPA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,SAAAA,EAAAA,GAAAA,EAAAA,aAAAA,EAAAA,QAAAA,EAAAA,MAAAA,CAAd,IAAcA,CAAAA,CAAd;;AAOA,YAAA,KAAA,EAAW;AACT,iBAAA,KAAA;AACD;AACF;AACF;;AACD,WAAA,IAAA;AACD;;AAEDG,EAAAA,KAAK,CAALA,UAAAA,GAAmB,SAAA,aAAA,CAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAAgE;AAAA,QAC7DL,SAD6D,GAC/CC,KAD+C,CAAA,QAAA,CAAA;;AAEjF,QAAID,SAAS,IAAb,IAAA,EAAuB;AACrB,aAAO,IAAA,SAAA,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,IAAA,EAAA,MAAA,CAAA,QAAA,EAAP,eAAO,CAAA,CAAP;AACD;;AAJgF,SAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAAND,IAAM,GAAA,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AAANA,MAAAA,IAAM,CAAA,KAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,KAAA,CAANA;AAAM;;AAKjF,WAAOM,KAAK,CAALA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,aAAAA,EAAAA,MAAAA,CAAP,IAAOA,CAAAA,CAAP;AALFA,GAAAA;;AAQA,SAAO,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAA,KAAA,EAAA,OAAA,EAAP,UAAO,CAAP;AACD","sourcesContent":["import isPlainObject from './helpers/isPlainObject';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function shapeValidator(shapeTypes) {\n  if (!isPlainObject(shapeTypes)) {\n    throw new TypeError('shape must be a normal object');\n  }\n\n  function shape(props, propName, componentName, location, ...rest) {\n    const { [propName]: propValue } = props;\n    if (propValue == null) {\n      return null;\n    }\n    // code adapted from PropTypes.shape: https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L381\n    // eslint-disable-next-line guard-for-in, no-restricted-syntax\n    for (const key in shapeTypes) {\n      const checker = shapeTypes[key];\n      if (checker) {\n        const error = checker(\n          propValue,\n          key,\n          componentName,\n          location,\n          ...rest,\n        );\n        if (error) {\n          return error;\n        }\n      }\n    }\n    return null;\n  }\n\n  shape.isRequired = function shapeRequired(props, propName, componentName, ...rest) {\n    const { [propName]: propValue } = props;\n    if (propValue == null) {\n      return new TypeError(`${componentName}: ${propName} is required.`);\n    }\n    return shape(props, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(shape, 'shape', shapeTypes);\n}\n"]},"metadata":{},"sourceType":"script"}