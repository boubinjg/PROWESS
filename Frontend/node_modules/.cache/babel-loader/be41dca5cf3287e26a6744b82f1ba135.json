{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getScrollParent = getScrollParent;\nexports.getScrollAncestorsOverflowY = getScrollAncestorsOverflowY;\nexports[\"default\"] = disableScroll;\n\nvar getScrollingRoot = function getScrollingRoot() {\n  return document.scrollingElement || document.documentElement;\n};\n/**\n * Recursively finds the scroll parent of a node. The scroll parrent of a node\n * is the closest node that is scrollable. A node is scrollable if:\n *  - it is allowed to scroll via CSS ('overflow-y' not visible or hidden);\n *  - and its children/content are \"bigger\" than the node's box height.\n *\n * The root of the document always scrolls by default.\n *\n * @param {HTMLElement} node Any DOM element.\n * @return {HTMLElement} The scroll parent element.\n */\n\n\nfunction getScrollParent(node) {\n  var parent = node.parentElement;\n  if (parent == null) return getScrollingRoot();\n\n  var _window$getComputedSt = window.getComputedStyle(parent),\n      overflowY = _window$getComputedSt.overflowY;\n\n  var canScroll = overflowY !== 'visible' && overflowY !== 'hidden';\n\n  if (canScroll && parent.scrollHeight > parent.clientHeight) {\n    return parent;\n  }\n\n  return getScrollParent(parent);\n}\n/**\n * Recursively traverses the tree upwards from the given node, capturing all\n * ancestor nodes that scroll along with their current 'overflow-y' CSS\n * property.\n *\n * @param {HTMLElement} node Any DOM element.\n * @param {Map<HTMLElement,string>} [acc] Accumulator map.\n * @return {Map<HTMLElement,string>} Map of ancestors with their 'overflow-y' value.\n */\n\n\nfunction getScrollAncestorsOverflowY(node) {\n  var acc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  var scrollingRoot = getScrollingRoot();\n  var scrollParent = getScrollParent(node);\n  acc.set(scrollParent, scrollParent.style.overflowY);\n  if (scrollParent === scrollingRoot) return acc;\n  return getScrollAncestorsOverflowY(scrollParent, acc);\n}\n/**\n * Disabling the scroll on a node involves finding all the scrollable ancestors\n * and set their 'overflow-y' CSS property to 'hidden'. When all ancestors have\n * 'overflow-y: hidden' (up to the document element) there is no scroll\n * container, thus all the scroll outside of the node is disabled. In order to\n * enable scroll again, we store the previous value of the 'overflow-y' for\n * every ancestor in a closure and reset it back.\n *\n * @param {HTMLElement} node Any DOM element.\n */\n\n\nfunction disableScroll(node) {\n  var scrollAncestorsOverflowY = getScrollAncestorsOverflowY(node);\n\n  var toggle = function toggle(on) {\n    return scrollAncestorsOverflowY.forEach(function (overflowY, ancestor) {\n      ancestor.style.setProperty('overflow-y', on ? 'hidden' : overflowY);\n    });\n  };\n\n  toggle(true);\n  return function () {\n    return toggle(false);\n  };\n}","map":{"version":3,"sources":["/home/boubin.2/PROWESS/Frontend/node_modules/react-dates/lib/utils/disableScroll.js"],"names":["Object","defineProperty","exports","value","getScrollParent","getScrollAncestorsOverflowY","disableScroll","getScrollingRoot","document","scrollingElement","documentElement","node","parent","parentElement","_window$getComputedSt","window","getComputedStyle","overflowY","canScroll","scrollHeight","clientHeight","acc","arguments","length","undefined","Map","scrollingRoot","scrollParent","set","style","scrollAncestorsOverflowY","toggle","on","forEach","ancestor","setProperty"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAF,OAAO,CAACG,2BAAR,GAAsCA,2BAAtC;AACAH,OAAO,CAAC,SAAD,CAAP,GAAqBI,aAArB;;AAEA,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;AACjD,SAAOC,QAAQ,CAACC,gBAAT,IAA6BD,QAAQ,CAACE,eAA7C;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASN,eAAT,CAAyBO,IAAzB,EAA+B;AAC7B,MAAIC,MAAM,GAAGD,IAAI,CAACE,aAAlB;AACA,MAAID,MAAM,IAAI,IAAd,EAAoB,OAAOL,gBAAgB,EAAvB;;AAEpB,MAAIO,qBAAqB,GAAGC,MAAM,CAACC,gBAAP,CAAwBJ,MAAxB,CAA5B;AAAA,MACIK,SAAS,GAAGH,qBAAqB,CAACG,SADtC;;AAGA,MAAIC,SAAS,GAAGD,SAAS,KAAK,SAAd,IAA2BA,SAAS,KAAK,QAAzD;;AAEA,MAAIC,SAAS,IAAIN,MAAM,CAACO,YAAP,GAAsBP,MAAM,CAACQ,YAA9C,EAA4D;AAC1D,WAAOR,MAAP;AACD;;AAED,SAAOR,eAAe,CAACQ,MAAD,CAAtB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASP,2BAAT,CAAqCM,IAArC,EAA2C;AACzC,MAAIU,GAAG,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAIG,GAAJ,EAA9E;AACA,MAAIC,aAAa,GAAGnB,gBAAgB,EAApC;AACA,MAAIoB,YAAY,GAAGvB,eAAe,CAACO,IAAD,CAAlC;AACAU,EAAAA,GAAG,CAACO,GAAJ,CAAQD,YAAR,EAAsBA,YAAY,CAACE,KAAb,CAAmBZ,SAAzC;AACA,MAAIU,YAAY,KAAKD,aAArB,EAAoC,OAAOL,GAAP;AACpC,SAAOhB,2BAA2B,CAACsB,YAAD,EAAeN,GAAf,CAAlC;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASf,aAAT,CAAuBK,IAAvB,EAA6B;AAC3B,MAAImB,wBAAwB,GAAGzB,2BAA2B,CAACM,IAAD,CAA1D;;AAEA,MAAIoB,MAAM,GAAG,SAASA,MAAT,CAAgBC,EAAhB,EAAoB;AAC/B,WAAOF,wBAAwB,CAACG,OAAzB,CAAiC,UAAUhB,SAAV,EAAqBiB,QAArB,EAA+B;AACrEA,MAAAA,QAAQ,CAACL,KAAT,CAAeM,WAAf,CAA2B,YAA3B,EAAyCH,EAAE,GAAG,QAAH,GAAcf,SAAzD;AACD,KAFM,CAAP;AAGD,GAJD;;AAMAc,EAAAA,MAAM,CAAC,IAAD,CAAN;AACA,SAAO,YAAY;AACjB,WAAOA,MAAM,CAAC,KAAD,CAAb;AACD,GAFD;AAGD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getScrollParent = getScrollParent;\nexports.getScrollAncestorsOverflowY = getScrollAncestorsOverflowY;\nexports[\"default\"] = disableScroll;\n\nvar getScrollingRoot = function getScrollingRoot() {\n  return document.scrollingElement || document.documentElement;\n};\n/**\n * Recursively finds the scroll parent of a node. The scroll parrent of a node\n * is the closest node that is scrollable. A node is scrollable if:\n *  - it is allowed to scroll via CSS ('overflow-y' not visible or hidden);\n *  - and its children/content are \"bigger\" than the node's box height.\n *\n * The root of the document always scrolls by default.\n *\n * @param {HTMLElement} node Any DOM element.\n * @return {HTMLElement} The scroll parent element.\n */\n\n\nfunction getScrollParent(node) {\n  var parent = node.parentElement;\n  if (parent == null) return getScrollingRoot();\n\n  var _window$getComputedSt = window.getComputedStyle(parent),\n      overflowY = _window$getComputedSt.overflowY;\n\n  var canScroll = overflowY !== 'visible' && overflowY !== 'hidden';\n\n  if (canScroll && parent.scrollHeight > parent.clientHeight) {\n    return parent;\n  }\n\n  return getScrollParent(parent);\n}\n/**\n * Recursively traverses the tree upwards from the given node, capturing all\n * ancestor nodes that scroll along with their current 'overflow-y' CSS\n * property.\n *\n * @param {HTMLElement} node Any DOM element.\n * @param {Map<HTMLElement,string>} [acc] Accumulator map.\n * @return {Map<HTMLElement,string>} Map of ancestors with their 'overflow-y' value.\n */\n\n\nfunction getScrollAncestorsOverflowY(node) {\n  var acc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  var scrollingRoot = getScrollingRoot();\n  var scrollParent = getScrollParent(node);\n  acc.set(scrollParent, scrollParent.style.overflowY);\n  if (scrollParent === scrollingRoot) return acc;\n  return getScrollAncestorsOverflowY(scrollParent, acc);\n}\n/**\n * Disabling the scroll on a node involves finding all the scrollable ancestors\n * and set their 'overflow-y' CSS property to 'hidden'. When all ancestors have\n * 'overflow-y: hidden' (up to the document element) there is no scroll\n * container, thus all the scroll outside of the node is disabled. In order to\n * enable scroll again, we store the previous value of the 'overflow-y' for\n * every ancestor in a closure and reset it back.\n *\n * @param {HTMLElement} node Any DOM element.\n */\n\n\nfunction disableScroll(node) {\n  var scrollAncestorsOverflowY = getScrollAncestorsOverflowY(node);\n\n  var toggle = function toggle(on) {\n    return scrollAncestorsOverflowY.forEach(function (overflowY, ancestor) {\n      ancestor.style.setProperty('overflow-y', on ? 'hidden' : overflowY);\n    });\n  };\n\n  toggle(true);\n  return function () {\n    return toggle(false);\n  };\n}"]},"metadata":{},"sourceType":"script"}