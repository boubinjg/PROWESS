{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = range;\n\nvar _and = _interopRequireDefault(require(\"./and\"));\n\nvar _between = _interopRequireDefault(require(\"./between\"));\n\nvar _integer = _interopRequireDefault(require(\"./integer\"));\n\nvar _isInteger = _interopRequireDefault(require(\"./helpers/isInteger\"));\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n/* istanbul ignore next */\nMath.pow(2, 53) - 1;\n\nfunction isValidLength(x) {\n  return (0, _isInteger[\"default\"])(x) && Math.abs(x) < MAX_SAFE_INTEGER;\n}\n\nfunction range(min, max) {\n  if (!isValidLength(min) || !isValidLength(max)) {\n    throw new RangeError(\"\\\"range\\\" requires two integers: \".concat(min, \" and \").concat(max, \" given\"));\n  }\n\n  if (min === max) {\n    throw new RangeError('min and max must not be the same');\n  }\n\n  return (0, _wrapValidator[\"default\"])((0, _and[\"default\"])([(0, _integer[\"default\"])(), (0, _between[\"default\"])({\n    gte: min,\n    lt: max\n  })], 'range'), 'range', {\n    min: min,\n    max: max\n  });\n}","map":{"version":3,"sources":["../src/range.js"],"names":["MAX_SAFE_INTEGER","Number","Math","isValidLength","min","gte","lt","max"],"mappings":";;;;;;;AAAA,IAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;;;;;;;AAEA,IAAMA,gBAAgB,GAAGC,MAAM,CAANA,gBAAAA;AAA2B;AAA2B,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,EAAA,IAA/E,CAAA;;AAEA,SAAA,aAAA,CAAA,CAAA,EAA0B;AACxB,SAAO,CAAA,GAAA,UAAA,CAAA,SAAA,CAAA,EAAA,CAAA,KAAgBC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAvB,gBAAA;AACD;;AAEc,SAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAyB;AACtC,MAAI,CAACC,aAAa,CAAd,GAAc,CAAd,IAAuB,CAACA,aAAa,CAAzC,GAAyC,CAAzC,EAAgD;AAC9C,UAAM,IAAA,UAAA,CAAA,oCAAA,MAAA,CAAA,GAAA,EAAA,OAAA,EAAA,MAAA,CAAA,GAAA,EAAN,QAAM,CAAA,CAAN;AACD;;AACD,MAAIC,GAAG,KAAP,GAAA,EAAiB;AACf,UAAM,IAAA,UAAA,CAAN,kCAAM,CAAN;AACD;;AACD,SAAO,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAc,CAAA,GAAA,IAAA,CAAA,SAAA,CAAA,EAAI,CAAC,CAAA,GAAA,QAAA,CAAD,SAAC,CAAA,GAAD,EAAY,CAAA,GAAA,QAAA,CAAA,SAAA,CAAA,EAAQ;AAAEC,IAAAA,GAAG,EAAL,GAAA;AAAYC,IAAAA,EAAE,EAAEC;AAAhB,GAAR,CAAZ,CAAJ,EAAd,OAAc,CAAd,EAAA,OAAA,EAAkF;AAAEH,IAAAA,GAAG,EAAL,GAAA;AAAOG,IAAAA,GAAG,EAAHA;AAAP,GAAlF,CAAP;AACD","sourcesContent":["import and from './and';\nimport between from './between';\nimport integer from './integer';\nimport isInteger from './helpers/isInteger';\nimport wrapValidator from './helpers/wrapValidator';\n\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ (2 ** 53) - 1;\n\nfunction isValidLength(x) {\n  return isInteger(x) && Math.abs(x) < MAX_SAFE_INTEGER;\n}\n\nexport default function range(min, max) {\n  if (!isValidLength(min) || !isValidLength(max)) {\n    throw new RangeError(`\"range\" requires two integers: ${min} and ${max} given`);\n  }\n  if (min === max) {\n    throw new RangeError('min and max must not be the same');\n  }\n  return wrapValidator(and([integer(), between({ gte: min, lt: max })], 'range'), 'range', { min, max });\n}\n"]},"metadata":{},"sourceType":"script"}