{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = calculateDimension;\n\nfunction calculateDimension(el, axis) {\n  var borderBox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var withMargin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (!el) {\n    return 0;\n  }\n\n  var axisStart = axis === 'width' ? 'Left' : 'Top';\n  var axisEnd = axis === 'width' ? 'Right' : 'Bottom'; // Only read styles if we need to\n\n  var style = !borderBox || withMargin ? window.getComputedStyle(el) : null; // Offset includes border and padding\n\n  var offsetWidth = el.offsetWidth,\n      offsetHeight = el.offsetHeight;\n  var size = axis === 'width' ? offsetWidth : offsetHeight; // Get the inner size\n\n  if (!borderBox) {\n    size -= parseFloat(style[\"padding\".concat(axisStart)]) + parseFloat(style[\"padding\".concat(axisEnd)]) + parseFloat(style[\"border\".concat(axisStart, \"Width\")]) + parseFloat(style[\"border\".concat(axisEnd, \"Width\")]);\n  } // Apply margin\n\n\n  if (withMargin) {\n    size += parseFloat(style[\"margin\".concat(axisStart)]) + parseFloat(style[\"margin\".concat(axisEnd)]);\n  }\n\n  return size;\n}","map":{"version":3,"sources":["/home/jayson/Code/IoTLabScratchpad/IoTLabScheduler/Frontend/node_modules/react-dates/lib/utils/calculateDimension.js"],"names":["Object","defineProperty","exports","value","calculateDimension","el","axis","borderBox","arguments","length","undefined","withMargin","axisStart","axisEnd","style","window","getComputedStyle","offsetWidth","offsetHeight","size","parseFloat","concat"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,kBAArB;;AAEA,SAASA,kBAAT,CAA4BC,EAA5B,EAAgCC,IAAhC,EAAsC;AACpC,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAApF;AACA,MAAIG,UAAU,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAArF;;AAEA,MAAI,CAACH,EAAL,EAAS;AACP,WAAO,CAAP;AACD;;AAED,MAAIO,SAAS,GAAGN,IAAI,KAAK,OAAT,GAAmB,MAAnB,GAA4B,KAA5C;AACA,MAAIO,OAAO,GAAGP,IAAI,KAAK,OAAT,GAAmB,OAAnB,GAA6B,QAA3C,CAToC,CASiB;;AAErD,MAAIQ,KAAK,GAAG,CAACP,SAAD,IAAcI,UAAd,GAA2BI,MAAM,CAACC,gBAAP,CAAwBX,EAAxB,CAA3B,GAAyD,IAArE,CAXoC,CAWuC;;AAE3E,MAAIY,WAAW,GAAGZ,EAAE,CAACY,WAArB;AAAA,MACIC,YAAY,GAAGb,EAAE,CAACa,YADtB;AAEA,MAAIC,IAAI,GAAGb,IAAI,KAAK,OAAT,GAAmBW,WAAnB,GAAiCC,YAA5C,CAfoC,CAesB;;AAE1D,MAAI,CAACX,SAAL,EAAgB;AACdY,IAAAA,IAAI,IAAIC,UAAU,CAACN,KAAK,CAAC,UAAUO,MAAV,CAAiBT,SAAjB,CAAD,CAAN,CAAV,GAAiDQ,UAAU,CAACN,KAAK,CAAC,UAAUO,MAAV,CAAiBR,OAAjB,CAAD,CAAN,CAA3D,GAAgGO,UAAU,CAACN,KAAK,CAAC,SAASO,MAAT,CAAgBT,SAAhB,EAA2B,OAA3B,CAAD,CAAN,CAA1G,GAAyJQ,UAAU,CAACN,KAAK,CAAC,SAASO,MAAT,CAAgBR,OAAhB,EAAyB,OAAzB,CAAD,CAAN,CAA3K;AACD,GAnBmC,CAmBlC;;;AAGF,MAAIF,UAAJ,EAAgB;AACdQ,IAAAA,IAAI,IAAIC,UAAU,CAACN,KAAK,CAAC,SAASO,MAAT,CAAgBT,SAAhB,CAAD,CAAN,CAAV,GAAgDQ,UAAU,CAACN,KAAK,CAAC,SAASO,MAAT,CAAgBR,OAAhB,CAAD,CAAN,CAAlE;AACD;;AAED,SAAOM,IAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = calculateDimension;\n\nfunction calculateDimension(el, axis) {\n  var borderBox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var withMargin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (!el) {\n    return 0;\n  }\n\n  var axisStart = axis === 'width' ? 'Left' : 'Top';\n  var axisEnd = axis === 'width' ? 'Right' : 'Bottom'; // Only read styles if we need to\n\n  var style = !borderBox || withMargin ? window.getComputedStyle(el) : null; // Offset includes border and padding\n\n  var offsetWidth = el.offsetWidth,\n      offsetHeight = el.offsetHeight;\n  var size = axis === 'width' ? offsetWidth : offsetHeight; // Get the inner size\n\n  if (!borderBox) {\n    size -= parseFloat(style[\"padding\".concat(axisStart)]) + parseFloat(style[\"padding\".concat(axisEnd)]) + parseFloat(style[\"border\".concat(axisStart, \"Width\")]) + parseFloat(style[\"border\".concat(axisEnd, \"Width\")]);\n  } // Apply margin\n\n\n  if (withMargin) {\n    size += parseFloat(style[\"margin\".concat(axisStart)]) + parseFloat(style[\"margin\".concat(axisEnd)]);\n  }\n\n  return size;\n}"]},"metadata":{},"sourceType":"script"}