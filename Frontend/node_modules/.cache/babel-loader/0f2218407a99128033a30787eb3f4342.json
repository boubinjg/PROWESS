{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getCalendarMonthWeeks;\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _constants = require(\"../constants\");\n\nfunction getCalendarMonthWeeks(month, enableOutsideDays) {\n  var firstDayOfWeek = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _moment[\"default\"].localeData().firstDayOfWeek();\n\n  if (!_moment[\"default\"].isMoment(month) || !month.isValid()) {\n    throw new TypeError('`month` must be a valid moment object');\n  }\n\n  if (_constants.WEEKDAYS.indexOf(firstDayOfWeek) === -1) {\n    throw new TypeError('`firstDayOfWeek` must be an integer between 0 and 6');\n  } // set utc offset to get correct dates in future (when timezone changes)\n\n\n  var firstOfMonth = month.clone().startOf('month').hour(12);\n  var lastOfMonth = month.clone().endOf('month').hour(12); // calculate the exact first and last days to fill the entire matrix\n  // (considering days outside month)\n\n  var prevDays = (firstOfMonth.day() + 7 - firstDayOfWeek) % 7;\n  var nextDays = (firstDayOfWeek + 6 - lastOfMonth.day()) % 7;\n  var firstDay = firstOfMonth.clone().subtract(prevDays, 'day');\n  var lastDay = lastOfMonth.clone().add(nextDays, 'day');\n  var totalDays = lastDay.diff(firstDay, 'days') + 1;\n  var currentDay = firstDay.clone();\n  var weeksInMonth = [];\n\n  for (var i = 0; i < totalDays; i += 1) {\n    if (i % 7 === 0) {\n      weeksInMonth.push([]);\n    }\n\n    var day = null;\n\n    if (i >= prevDays && i < totalDays - nextDays || enableOutsideDays) {\n      day = currentDay.clone();\n    }\n\n    weeksInMonth[weeksInMonth.length - 1].push(day);\n    currentDay.add(1, 'day');\n  }\n\n  return weeksInMonth;\n}","map":{"version":3,"sources":["/home/boubin.2/PROWESS/Frontend/node_modules/react-dates/lib/utils/getCalendarMonthWeeks.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","getCalendarMonthWeeks","_moment","_constants","month","enableOutsideDays","firstDayOfWeek","arguments","length","undefined","localeData","isMoment","isValid","TypeError","WEEKDAYS","indexOf","firstOfMonth","clone","startOf","hour","lastOfMonth","endOf","prevDays","day","nextDays","firstDay","subtract","lastDay","add","totalDays","diff","currentDay","weeksInMonth","i","push"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,qBAArB;;AAEA,IAAIC,OAAO,GAAGP,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAApC;;AAEA,IAAIO,UAAU,GAAGP,OAAO,CAAC,cAAD,CAAxB;;AAEA,SAASK,qBAAT,CAA+BG,KAA/B,EAAsCC,iBAAtC,EAAyD;AACvD,MAAIC,cAAc,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEL,OAAO,CAAC,SAAD,CAAP,CAAmBQ,UAAnB,GAAgCJ,cAAhC,EAAzF;;AAEA,MAAI,CAACJ,OAAO,CAAC,SAAD,CAAP,CAAmBS,QAAnB,CAA4BP,KAA5B,CAAD,IAAuC,CAACA,KAAK,CAACQ,OAAN,EAA5C,EAA6D;AAC3D,UAAM,IAAIC,SAAJ,CAAc,uCAAd,CAAN;AACD;;AAED,MAAIV,UAAU,CAACW,QAAX,CAAoBC,OAApB,CAA4BT,cAA5B,MAAgD,CAAC,CAArD,EAAwD;AACtD,UAAM,IAAIO,SAAJ,CAAc,qDAAd,CAAN;AACD,GATsD,CASrD;;;AAGF,MAAIG,YAAY,GAAGZ,KAAK,CAACa,KAAN,GAAcC,OAAd,CAAsB,OAAtB,EAA+BC,IAA/B,CAAoC,EAApC,CAAnB;AACA,MAAIC,WAAW,GAAGhB,KAAK,CAACa,KAAN,GAAcI,KAAd,CAAoB,OAApB,EAA6BF,IAA7B,CAAkC,EAAlC,CAAlB,CAbuD,CAaE;AACzD;;AAEA,MAAIG,QAAQ,GAAG,CAACN,YAAY,CAACO,GAAb,KAAqB,CAArB,GAAyBjB,cAA1B,IAA4C,CAA3D;AACA,MAAIkB,QAAQ,GAAG,CAAClB,cAAc,GAAG,CAAjB,GAAqBc,WAAW,CAACG,GAAZ,EAAtB,IAA2C,CAA1D;AACA,MAAIE,QAAQ,GAAGT,YAAY,CAACC,KAAb,GAAqBS,QAArB,CAA8BJ,QAA9B,EAAwC,KAAxC,CAAf;AACA,MAAIK,OAAO,GAAGP,WAAW,CAACH,KAAZ,GAAoBW,GAApB,CAAwBJ,QAAxB,EAAkC,KAAlC,CAAd;AACA,MAAIK,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAaL,QAAb,EAAuB,MAAvB,IAAiC,CAAjD;AACA,MAAIM,UAAU,GAAGN,QAAQ,CAACR,KAAT,EAAjB;AACA,MAAIe,YAAY,GAAG,EAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAApB,EAA+BI,CAAC,IAAI,CAApC,EAAuC;AACrC,QAAIA,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACfD,MAAAA,YAAY,CAACE,IAAb,CAAkB,EAAlB;AACD;;AAED,QAAIX,GAAG,GAAG,IAAV;;AAEA,QAAIU,CAAC,IAAIX,QAAL,IAAiBW,CAAC,GAAGJ,SAAS,GAAGL,QAAjC,IAA6CnB,iBAAjD,EAAoE;AAClEkB,MAAAA,GAAG,GAAGQ,UAAU,CAACd,KAAX,EAAN;AACD;;AAEDe,IAAAA,YAAY,CAACA,YAAY,CAACxB,MAAb,GAAsB,CAAvB,CAAZ,CAAsC0B,IAAtC,CAA2CX,GAA3C;AACAQ,IAAAA,UAAU,CAACH,GAAX,CAAe,CAAf,EAAkB,KAAlB;AACD;;AAED,SAAOI,YAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getCalendarMonthWeeks;\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _constants = require(\"../constants\");\n\nfunction getCalendarMonthWeeks(month, enableOutsideDays) {\n  var firstDayOfWeek = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _moment[\"default\"].localeData().firstDayOfWeek();\n\n  if (!_moment[\"default\"].isMoment(month) || !month.isValid()) {\n    throw new TypeError('`month` must be a valid moment object');\n  }\n\n  if (_constants.WEEKDAYS.indexOf(firstDayOfWeek) === -1) {\n    throw new TypeError('`firstDayOfWeek` must be an integer between 0 and 6');\n  } // set utc offset to get correct dates in future (when timezone changes)\n\n\n  var firstOfMonth = month.clone().startOf('month').hour(12);\n  var lastOfMonth = month.clone().endOf('month').hour(12); // calculate the exact first and last days to fill the entire matrix\n  // (considering days outside month)\n\n  var prevDays = (firstOfMonth.day() + 7 - firstDayOfWeek) % 7;\n  var nextDays = (firstDayOfWeek + 6 - lastOfMonth.day()) % 7;\n  var firstDay = firstOfMonth.clone().subtract(prevDays, 'day');\n  var lastDay = lastOfMonth.clone().add(nextDays, 'day');\n  var totalDays = lastDay.diff(firstDay, 'days') + 1;\n  var currentDay = firstDay.clone();\n  var weeksInMonth = [];\n\n  for (var i = 0; i < totalDays; i += 1) {\n    if (i % 7 === 0) {\n      weeksInMonth.push([]);\n    }\n\n    var day = null;\n\n    if (i >= prevDays && i < totalDays - nextDays || enableOutsideDays) {\n      day = currentDay.clone();\n    }\n\n    weeksInMonth[weeksInMonth.length - 1].push(day);\n    currentDay.add(1, 'day');\n  }\n\n  return weeksInMonth;\n}"]},"metadata":{},"sourceType":"script"}