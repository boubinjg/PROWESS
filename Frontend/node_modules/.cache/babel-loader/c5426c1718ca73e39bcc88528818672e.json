{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getVisibleDays;\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _toISOMonthString = _interopRequireDefault(require(\"./toISOMonthString\"));\n\nfunction getVisibleDays(month, numberOfMonths, enableOutsideDays, withoutTransitionMonths) {\n  if (!_moment[\"default\"].isMoment(month)) return {};\n  var visibleDaysByMonth = {};\n  var currentMonth = withoutTransitionMonths ? month.clone() : month.clone().subtract(1, 'month');\n\n  for (var i = 0; i < (withoutTransitionMonths ? numberOfMonths : numberOfMonths + 2); i += 1) {\n    var visibleDays = []; // set utc offset to get correct dates in future (when timezone changes)\n\n    var baseDate = currentMonth.clone();\n    var firstOfMonth = baseDate.clone().startOf('month').hour(12);\n    var lastOfMonth = baseDate.clone().endOf('month').hour(12);\n    var currentDay = firstOfMonth.clone(); // days belonging to the previous month\n\n    if (enableOutsideDays) {\n      for (var j = 0; j < currentDay.weekday(); j += 1) {\n        var prevDay = currentDay.clone().subtract(j + 1, 'day');\n        visibleDays.unshift(prevDay);\n      }\n    }\n\n    while (currentDay < lastOfMonth) {\n      visibleDays.push(currentDay.clone());\n      currentDay.add(1, 'day');\n    }\n\n    if (enableOutsideDays) {\n      // weekday() returns the index of the day of the week according to the locale\n      // this means if the week starts on Monday, weekday() will return 0 for a Monday date, not 1\n      if (currentDay.weekday() !== 0) {\n        // days belonging to the next month\n        for (var k = currentDay.weekday(), count = 0; k < 7; k += 1, count += 1) {\n          var nextDay = currentDay.clone().add(count, 'day');\n          visibleDays.push(nextDay);\n        }\n      }\n    }\n\n    visibleDaysByMonth[(0, _toISOMonthString[\"default\"])(currentMonth)] = visibleDays;\n    currentMonth = currentMonth.clone().add(1, 'month');\n  }\n\n  return visibleDaysByMonth;\n}","map":{"version":3,"sources":["/home/jayson/Code/IoTLabScratchpad/IoTLabScheduler/Frontend/node_modules/react-dates/lib/utils/getVisibleDays.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","getVisibleDays","_moment","_toISOMonthString","month","numberOfMonths","enableOutsideDays","withoutTransitionMonths","isMoment","visibleDaysByMonth","currentMonth","clone","subtract","i","visibleDays","baseDate","firstOfMonth","startOf","hour","lastOfMonth","endOf","currentDay","j","weekday","prevDay","unshift","push","add","k","count","nextDay"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getVisibleDays;\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\nvar _toISOMonthString = _interopRequireDefault(require(\"./toISOMonthString\"));\n\nfunction getVisibleDays(month, numberOfMonths, enableOutsideDays, withoutTransitionMonths) {\n  if (!_moment[\"default\"].isMoment(month)) return {};\n  var visibleDaysByMonth = {};\n  var currentMonth = withoutTransitionMonths ? month.clone() : month.clone().subtract(1, 'month');\n\n  for (var i = 0; i < (withoutTransitionMonths ? numberOfMonths : numberOfMonths + 2); i += 1) {\n    var visibleDays = []; // set utc offset to get correct dates in future (when timezone changes)\n\n    var baseDate = currentMonth.clone();\n    var firstOfMonth = baseDate.clone().startOf('month').hour(12);\n    var lastOfMonth = baseDate.clone().endOf('month').hour(12);\n    var currentDay = firstOfMonth.clone(); // days belonging to the previous month\n\n    if (enableOutsideDays) {\n      for (var j = 0; j < currentDay.weekday(); j += 1) {\n        var prevDay = currentDay.clone().subtract(j + 1, 'day');\n        visibleDays.unshift(prevDay);\n      }\n    }\n\n    while (currentDay < lastOfMonth) {\n      visibleDays.push(currentDay.clone());\n      currentDay.add(1, 'day');\n    }\n\n    if (enableOutsideDays) {\n      // weekday() returns the index of the day of the week according to the locale\n      // this means if the week starts on Monday, weekday() will return 0 for a Monday date, not 1\n      if (currentDay.weekday() !== 0) {\n        // days belonging to the next month\n        for (var k = currentDay.weekday(), count = 0; k < 7; k += 1, count += 1) {\n          var nextDay = currentDay.clone().add(count, 'day');\n          visibleDays.push(nextDay);\n        }\n      }\n    }\n\n    visibleDaysByMonth[(0, _toISOMonthString[\"default\"])(currentMonth)] = visibleDays;\n    currentMonth = currentMonth.clone().add(1, 'month');\n  }\n\n  return visibleDaysByMonth;\n}"]},"metadata":{},"sourceType":"script"}