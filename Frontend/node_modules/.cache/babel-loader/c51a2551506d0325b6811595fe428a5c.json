{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = mutuallyExclusiveTrue;\n\nvar _propTypes = require(\"prop-types\");\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction mutuallyExclusiveTrue() {\n  for (var _len = arguments.length, exclusiveProps = new Array(_len), _key = 0; _key < _len; _key++) {\n    exclusiveProps[_key] = arguments[_key];\n  }\n\n  if (exclusiveProps.length < 1) {\n    throw new TypeError('at least one prop that is mutually exclusive is required');\n  }\n\n  if (!exclusiveProps.every(function (x) {\n    return typeof x === 'string';\n  })) {\n    throw new TypeError('all exclusive true props must be strings');\n  }\n\n  var propsList = exclusiveProps.join(', or ');\n\n  var validator = function mutuallyExclusiveTrueProps(props, propName, componentName) {\n    var countProps = function countProps(count, prop) {\n      return count + (props[prop] ? 1 : 0);\n    };\n\n    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n\n    if (exclusivePropCount > 1) {\n      return new Error(\"A \".concat(componentName, \" cannot have more than one of these boolean props be true: \").concat(propsList));\n    }\n\n    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      rest[_key2 - 3] = arguments[_key2];\n    }\n\n    return _propTypes.bool.apply(void 0, [props, propName, componentName].concat(rest));\n  };\n\n  validator.isRequired = function mutuallyExclusiveTruePropsRequired(props, propName, componentName) {\n    var countProps = function countProps(count, prop) {\n      return count + (props[prop] ? 1 : 0);\n    };\n\n    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n\n    if (exclusivePropCount > 1) {\n      return new Error(\"A \".concat(componentName, \" cannot have more than one of these boolean props be true: \").concat(propsList));\n    }\n\n    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      rest[_key3 - 3] = arguments[_key3];\n    }\n\n    return _propTypes.bool.isRequired.apply(_propTypes.bool, [props, propName, componentName].concat(rest));\n  };\n\n  return (0, _wrapValidator[\"default\"])(validator, \"mutuallyExclusiveTrueProps: \".concat(propsList), exclusiveProps);\n}","map":{"version":3,"sources":["../src/mutuallyExclusiveTrueProps.js"],"names":["exclusiveProps","propsList","validator","rest","countProps","count","props","exclusivePropCount","bool"],"mappings":"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","sourcesContent":["import { bool } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function mutuallyExclusiveTrue(...exclusiveProps) {\n  if (exclusiveProps.length < 1) {\n    throw new TypeError('at least one prop that is mutually exclusive is required');\n  }\n  if (!exclusiveProps.every((x) => typeof x === 'string')) {\n    throw new TypeError('all exclusive true props must be strings');\n  }\n\n  const propsList = exclusiveProps.join(', or ');\n\n  const validator = function mutuallyExclusiveTrueProps(props, propName, componentName, ...rest) {\n    const countProps = (count, prop) => (count + (props[prop] ? 1 : 0));\n\n    const exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n    if (exclusivePropCount > 1) {\n      return new Error(`A ${componentName} cannot have more than one of these boolean props be true: ${propsList}`);\n    }\n    return bool(props, propName, componentName, ...rest);\n  };\n\n  validator.isRequired = function mutuallyExclusiveTruePropsRequired(\n    props,\n    propName,\n    componentName,\n    ...rest\n  ) {\n    const countProps = (count, prop) => (count + (props[prop] ? 1 : 0));\n\n    const exclusivePropCount = exclusiveProps.reduce(countProps, 0);\n    if (exclusivePropCount > 1) {\n      return new Error(`A ${componentName} cannot have more than one of these boolean props be true: ${propsList}`);\n    }\n    return bool.isRequired(props, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(validator, `mutuallyExclusiveTrueProps: ${propsList}`, exclusiveProps);\n}\n"]},"metadata":{},"sourceType":"script"}