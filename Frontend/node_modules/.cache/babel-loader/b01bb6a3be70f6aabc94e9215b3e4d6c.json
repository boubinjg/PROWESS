{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = stringEndsWithValidator;\n\nvar _propTypes = require(\"prop-types\");\n\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction stringEndsWithValidator(end) {\n  if (typeof end !== 'string' || end.length === 0) {\n    throw new TypeError('a non-empty string is required');\n  }\n\n  var validator = function stringEndsWith(props, propName, componentName) {\n    var propValue = props[propName];\n\n    if (propValue == null) {\n      return null;\n    }\n\n    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n\n    var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));\n\n    if (stringError) {\n      return stringError;\n    }\n\n    if (!propValue.endsWith(end) || propValue.length <= end.length) {\n      return new TypeError(\"\".concat(componentName, \": \").concat(propName, \" does not end with \\\"\").concat(end, \"\\\"\"));\n    }\n\n    return null;\n  };\n\n  validator.isRequired = function requiredStringEndsWith() {\n    var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);\n\n    if (stringError) {\n      return stringError;\n    }\n\n    return validator.apply(void 0, arguments);\n  };\n\n  return (0, _wrapValidator[\"default\"])(validator, \"stringEndsWith: \".concat(end));\n}","map":{"version":3,"sources":["../src/stringEndsWith.js"],"names":["end","validator","rest","propValue","props","stringError","string"],"mappings":";;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;;;;;;;AAEe,SAAA,uBAAA,CAAA,GAAA,EAAsC;AACnD,MAAI,OAAA,GAAA,KAAA,QAAA,IAA2BA,GAAG,CAAHA,MAAAA,KAA/B,CAAA,EAAiD;AAC/C,UAAM,IAAA,SAAA,CAAN,gCAAM,CAAN;AACD;;AAED,MAAMC,SAAS,GAAG,SAAA,cAAA,CAAA,KAAA,EAAA,QAAA,EAAA,aAAA,EAAiE;AAAA,QAC7DE,SAD6D,GAC/CC,KAD+C,CAAA,QAAA,CAAA;;AAGjF,QAAID,SAAS,IAAb,IAAA,EAAuB;AACrB,aAAA,IAAA;AACD;;AALgF,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAND,IAAM,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAANA,MAAAA,IAAM,CAAA,IAAA,GAAA,CAAA,CAANA,GAAM,SAAA,CAAA,IAAA,CAANA;AAAM;;AAOjF,QAAMG,WAAW,GAAGC,UAAAA,CAAAA,MAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAAA,QAAAA,EAAAA,aAAAA,EAAAA,MAAAA,CAApB,IAAoBA,CAAAA,CAApB;;AACA,QAAA,WAAA,EAAiB;AACf,aAAA,WAAA;AACD;;AAED,QAAI,CAACH,SAAS,CAATA,QAAAA,CAAD,GAACA,CAAD,IAA4BA,SAAS,CAATA,MAAAA,IAAoBH,GAAG,CAAvD,MAAA,EAAgE;AAC9D,aAAO,IAAA,SAAA,CAAA,GAAA,MAAA,CAAA,aAAA,EAAA,IAAA,EAAA,MAAA,CAAA,QAAA,EAAA,uBAAA,EAAA,MAAA,CAAA,GAAA,EAAP,IAAO,CAAA,CAAP;AACD;;AACD,WAAA,IAAA;AAfF,GAAA;;AAkBAC,EAAAA,SAAS,CAATA,UAAAA,GAAuB,SAAA,sBAAA,GAAyC;AAC9D,QAAMI,WAAW,GAAGC,UAAAA,CAAAA,MAAAA,CAAAA,UAAAA,CAAAA,KAAAA,CAAAA,UAAAA,CAAAA,MAAAA,EAApB,SAAoBA,CAApB;;AACA,QAAA,WAAA,EAAiB;AACf,aAAA,WAAA;AACD;;AACD,WAAOL,SAAS,CAATA,KAAAA,CAAAA,KAAAA,CAAAA,EAAP,SAAOA,CAAP;AALFA,GAAAA;;AAQA,SAAO,CAAA,GAAA,cAAA,CAAA,SAAA,CAAA,EAAA,SAAA,EAAA,mBAAA,MAAA,CAAP,GAAO,CAAA,CAAP;AACD","sourcesContent":["import { string } from 'prop-types';\nimport wrapValidator from './helpers/wrapValidator';\n\nexport default function stringEndsWithValidator(end) {\n  if (typeof end !== 'string' || end.length === 0) {\n    throw new TypeError('a non-empty string is required');\n  }\n\n  const validator = function stringEndsWith(props, propName, componentName, ...rest) {\n    const { [propName]: propValue } = props;\n\n    if (propValue == null) {\n      return null;\n    }\n\n    const stringError = string(props, propName, componentName, ...rest);\n    if (stringError) {\n      return stringError;\n    }\n\n    if (!propValue.endsWith(end) || propValue.length <= end.length) {\n      return new TypeError(`${componentName}: ${propName} does not end with \"${end}\"`);\n    }\n    return null;\n  };\n\n  validator.isRequired = function requiredStringEndsWith(...args) {\n    const stringError = string.isRequired(...args);\n    if (stringError) {\n      return stringError;\n    }\n    return validator(...args);\n  };\n\n  return wrapValidator(validator, `stringEndsWith: ${end}`);\n}\n"]},"metadata":{},"sourceType":"script"}