{"version":3,"file":"index.cjs.production.min.js","sources":["../src/shared.ts","../src/hooks/useLatest.ts","../src/utils/arrayToMap.ts","../src/utils/isFileList.ts","../src/utils/isObject.ts","../src/utils/cloneObject.ts","../src/utils/compact.ts","../src/utils/isPlainObject.ts","../src/utils/deepMerge.ts","../src/utils/isUndefined.ts","../src/utils/filterErrors.ts","../src/utils/stringToPath.ts","../src/utils/get.ts","../src/utils/invariant.ts","../src/utils/isFunction.ts","../src/utils/isAsyncFunction.ts","../src/utils/isCheckboxInput.ts","../src/utils/isEmptyObject.ts","../src/utils/isFieldElement.ts","../src/utils/isFileInput.ts","../src/utils/isRadioInput.ts","../src/utils/isSelectMultiple.ts","../src/utils/set.ts","../src/utils/unset.ts","../src/hooks/useState.ts","../src/utils/getIsDirty.ts","../src/useFormState.ts","../src/useControlled.ts","../src/useForm.ts","../src/utils/isSelectOne.ts","../src/utils/isInputElement.ts","../src/utils/isNumberInput.ts","../src/utils/isRangeInput.ts","../src/utils/runWithLowPriority.ts","../src/useFormMethods.ts"],"sourcesContent":["import { Map, Methods } from \"./types\";\n\nlet one: Methods | undefined;\nconst all: Map<Methods> = {};\n\nexport const get = (id?: string): Methods => (id ? all[id] : (one as Methods));\n\nexport const set = (id: string | undefined, methods: Methods): void => {\n  if (id) {\n    all[id] = methods;\n  } else {\n    one = methods;\n  }\n};\n\nexport const remove = (id?: string): void => {\n  if (id) {\n    delete all[id];\n  } else {\n    one = undefined;\n  }\n};\n","import { MutableRefObject, useRef, useEffect } from \"react\";\n\nexport default <T>(val: T): MutableRefObject<T> => {\n  const ref = useRef(val);\n\n  useEffect(() => {\n    ref.current = val;\n  });\n\n  return ref;\n};\n","import { Map } from \"../types\";\n\nexport default (arr: any[]): Map =>\n  arr.reduce((obj, key) => {\n    obj[key] = true;\n    return obj;\n  }, {});\n","export default (value: unknown): value is FileList => value instanceof FileList;\n","export default (value: unknown): value is Object =>\n  value !== null && typeof value === \"object\";\n","import isFileList from \"./isFileList\";\nimport isObject from \"./isObject\";\n\nconst cloneObject = (object: unknown): any => {\n  if (object instanceof Event) throw new Error(\"Unable to clone event.\");\n\n  if (!isObject(object) || isFileList(object)) return object;\n\n  if (object instanceof Date) return new Date(object.getTime());\n\n  if (Array.isArray(object)) return object.map((val) => cloneObject(val));\n\n  return Object.keys(object).reduce((obj: Record<string, any>, key) => {\n    obj[key] = cloneObject((object as Record<string, any>)[key]);\n    return obj;\n  }, {});\n};\n\nexport default cloneObject;\n","export default (arr: any[]): any[] => arr.filter(Boolean);\n","import isObject from \"./isObject\";\n\nexport default (value: unknown): value is Object =>\n  !Array.isArray(value) && !(value instanceof Date) && isObject(value);\n","import isPlainObject from \"./isPlainObject\";\n\nconst deepMerge = (...objects: any[]): any =>\n  objects.reduce((prev, obj) => {\n    Object.keys(obj).forEach((key) => {\n      const prevValue = prev[key];\n      const currValue = obj[key];\n\n      if (Array.isArray(prevValue) && Array.isArray(currValue)) {\n        prev[key] = [...prevValue, ...currValue];\n      } else if (isPlainObject(prevValue) && isPlainObject(currValue)) {\n        prev[key] = deepMerge(prevValue, currValue);\n      } else {\n        prev[key] = currValue;\n      }\n    });\n\n    return prev;\n  }, {});\n\nexport default deepMerge;\n","export default (value: unknown): value is undefined => value === undefined;\n","import { Map } from \"../types\";\nimport isPlainObject from \"./isPlainObject\";\nimport isUndefined from \"./isUndefined\";\n\nconst filterErrors = (error: unknown, touched: unknown): any => {\n  if (!isPlainObject(error)) return touched ? error : undefined;\n\n  return Object.keys(error).reduce((obj: Map<any>, key) => {\n    const nextErrors = filterErrors(\n      (error as Map<any>)[key],\n      (touched as Map<any>)[key] || false\n    );\n\n    if (!isUndefined(nextErrors)) {\n      obj[key] = nextErrors;\n    } else {\n      delete obj[key];\n    }\n\n    return obj;\n  }, {});\n};\n\nexport default filterErrors;\n","import compact from \"./compact\";\n\nexport default (str: string): string[] => {\n  if (typeof str !== \"string\") throw new TypeError(\"Expected a string.\");\n  if (!str.length) return [];\n\n  return compact(str.split(/[.[\\]]+/));\n};\n","import isPlainObject from \"./isPlainObject\";\nimport isUndefined from \"./isUndefined\";\nimport stringToPath from \"./stringToPath\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport default (object: any, path: string, defaultValue?: unknown): any => {\n  if (!isPlainObject(object) || !path) return defaultValue;\n\n  const value = stringToPath(path).reduce(\n    (obj, key) => (obj || {})[key],\n    object\n  );\n\n  return !isUndefined(value) ? value : defaultValue;\n};\n","export default (condition: boolean, message: string): void => {\n  if (__DEV__ && condition) throw new Error(message);\n};\n","export default (value: unknown): value is Function =>\n  typeof value === \"function\";\n","import isFunction from \"./isFunction\";\n\nexport default (value: unknown): value is Promise<any> =>\n  isFunction(value) && value.constructor.name === \"AsyncFunction\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"checkbox\";\n","import { Map } from \"../types\";\nimport isPlainObject from \"./isPlainObject\";\n\nexport default (value: unknown): value is Map<never> =>\n  isPlainObject(value) && !Object.keys(value).length;\n","import { FieldElement } from \"../types\";\n\nexport default (element: HTMLElement): element is FieldElement =>\n  /INPUT|TEXTAREA|SELECT/.test(element.tagName);\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"file\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"radio\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLSelectElement =>\n  field.type === \"select-multiple\";\n","import cloneObject from \"./cloneObject\";\nimport isPlainObject from \"./isPlainObject\";\nimport stringToPath from \"./stringToPath\";\n\nexport default (\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  object: any,\n  path: string,\n  value: unknown,\n  immutable = false\n): any => {\n  if (!isPlainObject(object)) throw new TypeError(\"Expected an object.\");\n\n  const segs = stringToPath(path);\n  const newObject = immutable ? cloneObject(object) : object;\n\n  segs.slice(0, -1).reduce((obj, key, idx) => {\n    const nextIsNumber = !Number.isNaN(+segs[idx + 1]);\n    if (\n      (isPlainObject(obj[key]) && !nextIsNumber) ||\n      (Array.isArray(obj[key]) && nextIsNumber)\n    )\n      return obj[key];\n    obj[key] = nextIsNumber ? [] : {};\n    return obj[key];\n  }, newObject)[segs[segs.length - 1] || \"\"] = value;\n\n  return newObject;\n};\n","/* eslint-disable no-prototype-builtins */\n\nimport cloneObject from \"./cloneObject\";\nimport isEmptyObject from \"./isEmptyObject\";\nimport isPlainObject from \"./isPlainObject\";\nimport isUndefined from \"./isUndefined\";\nimport stringToPath from \"./stringToPath\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst unset = (object: any, path: string, immutable = false): any => {\n  if (!isPlainObject(object)) throw new TypeError(\"Expected an object.\");\n\n  const refObject = immutable ? cloneObject(object) : object;\n  const newObject = refObject;\n\n  if (newObject.hasOwnProperty(path)) {\n    delete newObject[path];\n    return refObject;\n  }\n\n  const segs = stringToPath(path);\n\n  if (!segs.length) return refObject;\n\n  const last = segs.pop() as string;\n  const target = segs.reduce((obj, key) => (obj || {})[key], newObject);\n\n  if (Array.isArray(target)) {\n    let index = +last;\n\n    if (index < target.length - 1) {\n      target.splice(index, 1);\n    } else {\n      while (index >= 0) {\n        // @ts-expect-error\n        if (index == last || isUndefined(target[index])) {\n          target.splice(index, 1);\n          index -= 1;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (isPlainObject(target)) {\n    delete target[last];\n  }\n\n  return isEmptyObject(target) || (Array.isArray(target) && !target.length)\n    ? unset(refObject, segs.join(\".\"))\n    : refObject;\n};\n\nexport default unset;\n","import { useReducer, useRef, useCallback } from \"react\";\nimport { dequal } from \"dequal/lite\";\n\nimport {\n  Debug,\n  FormState,\n  FormStateReturn,\n  Observer,\n  ObserverHandler,\n  SetStateRef,\n  SetUsedState,\n} from \"../types\";\nimport useLatest from \"./useLatest\";\nimport { get, getIsDirty, isEmptyObject, set } from \"../utils\";\n\nexport default <V>(\n  initialState: FormState<V>,\n  onChange?: Debug<V>\n): FormStateReturn<V> => {\n  const [, forceUpdate] = useReducer((c) => c + 1, 0);\n  const stateRef = useRef(initialState);\n  const stateObserversRef = useRef<Observer[]>([\n    { usedState: {}, update: forceUpdate },\n  ]);\n  const onChangeRef = useLatest(onChange || (() => undefined));\n\n  const setStateRef = useCallback<SetStateRef>(\n    (path, value, { fieldPath, shouldUpdate = true } = {}) => {\n      const key = path.split(\".\")[0];\n\n      if (!key) {\n        if (!dequal(stateRef.current, value)) {\n          stateRef.current = value;\n          onChangeRef.current(stateRef.current);\n\n          stateObserversRef.current.forEach(({ usedState, update }) => {\n            if (shouldUpdate && !isEmptyObject(usedState)) update();\n          });\n        }\n\n        return;\n      }\n\n      if (\n        (path !== \"values\" && key === \"values\") ||\n        !dequal(get(stateRef.current, path), value)\n      ) {\n        const state = set(stateRef.current, path, value, true);\n        const {\n          errors,\n          dirty,\n          isDirty: prevIsDirty,\n          isValid: prevIsValid,\n        } = state;\n        let { submitCount: prevSubmitCount } = state;\n        const isDirty = key === \"dirty\" ? getIsDirty(dirty) : prevIsDirty;\n        const isValid = key === \"errors\" ? isEmptyObject(errors) : prevIsValid;\n        const submitCount =\n          key === \"isSubmitting\" && value\n            ? (prevSubmitCount += 1)\n            : prevSubmitCount;\n\n        stateRef.current = { ...state, isDirty, isValid, submitCount };\n        onChangeRef.current(stateRef.current);\n\n        if (!shouldUpdate) return;\n\n        path = fieldPath || path;\n        stateObserversRef.current.forEach(({ usedState, update }) => {\n          if (\n            Object.keys(usedState).some(\n              (k) => path.startsWith(k) || k.startsWith(path)\n            ) ||\n            (usedState.isDirty && isDirty !== prevIsDirty) ||\n            (usedState.isValid && isValid !== prevIsValid)\n          )\n            update();\n        });\n      }\n    },\n    [onChangeRef]\n  );\n\n  const setUsedState = useCallback<SetUsedState>((usedState) => {\n    stateObserversRef.current[0].usedState = usedState;\n  }, []);\n\n  const subscribeObserver = useCallback<ObserverHandler>(\n    (observer) => stateObserversRef.current.push(observer),\n    []\n  );\n\n  const unsubscribeObserver = useCallback<ObserverHandler>((observer) => {\n    stateObserversRef.current = stateObserversRef.current.filter(\n      (o) => o !== observer\n    );\n  }, []);\n\n  return {\n    stateRef,\n    setStateRef,\n    setUsedState,\n    subscribeObserver,\n    unsubscribeObserver,\n  };\n};\n","import isObject from \"./isObject\";\n\nconst getIsDirty = (dirty: object): boolean => {\n  const search = (dty: object, found: any[] = []) => {\n    for (const val of Object.values(dty)) {\n      if (val === true) {\n        found.push(val);\n        return found;\n      }\n\n      if (isObject(val)) search(val, found);\n    }\n\n    return found;\n  };\n\n  return !!search(dirty).length;\n};\n\nexport default getIsDirty;\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { useEffect, useReducer, useRef } from \"react\";\n\nimport { FormStateConfig, FormValues, Observer, Path } from \"./types\";\nimport { get } from \"./shared\";\nimport { invariant } from \"./utils\";\n\nexport default <V extends FormValues = FormValues>(\n  path: Path,\n  { formId, ...rest }: FormStateConfig<V> = {}\n): any => {\n  const methods = get(formId);\n  const methodName = \"useFormState\";\n\n  invariant(\n    !methods,\n    `💡 react-cool-form > ${methodName}: You must provide the corresponding ID to \"useForm\" hook. See: https://react-cool-form.netlify.app/docs/api-reference/use-form#id`\n  );\n\n  const observerRef = useRef<Observer>();\n  const [, forceUpdate] = useReducer((c) => c + 1, 0);\n  const { getFormState, subscribeObserver, unsubscribeObserver } = methods;\n\n  useEffect(() => {\n    // @ts-expect-error\n    subscribeObserver(observerRef.current);\n\n    // @ts-expect-error\n    return () => unsubscribeObserver(observerRef.current);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return getFormState(path, {\n    ...rest,\n    methodName,\n    callback: (usedState) => {\n      if (!observerRef.current)\n        observerRef.current = { usedState, update: forceUpdate };\n    },\n  });\n};\n","import { useEffect, useRef } from \"react\";\n\nimport { ControlledConfig, ControlledReturn, FormValues } from \"./types\";\nimport * as shared from \"./shared\";\nimport { get, invariant, isFieldElement, isUndefined, warn } from \"./utils\";\nimport useFormState from \"./useFormState\";\n\nexport default <V extends FormValues = FormValues>(\n  name: string,\n  {\n    formId,\n    defaultValue,\n    validate,\n    parse,\n    format,\n    errorWithTouched,\n    ...props\n  }: ControlledConfig<V> = {}\n): ControlledReturn => {\n  invariant(\n    !name,\n    '💡 react-cool-form > useControlled: Missing \"name\" parameter.'\n  );\n\n  const methods = shared.get(formId);\n\n  invariant(\n    !methods,\n    '💡 react-cool-form > useControlled: You must provide the corresponding ID to \"useForm\" hook. See: https://react-cool-form.netlify.app/docs/api-reference/use-form#id'\n  );\n\n  const hasWarn = useRef(false);\n  const meta = useFormState(\n    {\n      value: `values.${name}`,\n      error: `errors.${name}`,\n      isTouched: `touched.${name}`,\n      isDirty: `dirty.${name}`,\n    },\n    { formId, errorWithTouched }\n  );\n  const {\n    shouldRemoveField,\n    defaultValuesRef,\n    initialStateRef,\n    controlledsRef,\n    fieldValidatorsRef,\n    changedFieldRef,\n    getNodeValue,\n    setDefaultValue,\n    setTouchedMaybeValidate,\n    handleChangeEvent,\n    removeField,\n  } = methods;\n\n  useEffect(\n    () => () => {\n      if (shouldRemoveField) removeField(name);\n    },\n    [name, removeField, shouldRemoveField]\n  );\n\n  controlledsRef.current[name] = true;\n  if (validate) fieldValidatorsRef.current[name] = validate;\n\n  let value;\n\n  if (isUndefined(get(initialStateRef.current.values, name))) {\n    value = get(defaultValuesRef.current, name);\n    value = !isUndefined(value) ? value : defaultValue;\n\n    if (!isUndefined(value)) {\n      setDefaultValue(name, value);\n    } else if (!hasWarn.current) {\n      warn(\n        `💡 react-cool-form > useControlled: Please provide a default value for \"${name}\" field.`\n      );\n      hasWarn.current = true;\n    }\n  }\n\n  value = !isUndefined(meta.value) ? meta.value : value;\n  value = (format ? format(value) : value) ?? \"\";\n  const { onChange, onBlur, ...restProps } = props;\n\n  return [\n    {\n      name,\n      value,\n      onChange: (...event) => {\n        let val;\n\n        if (parse) {\n          val = parse(...event);\n        } else {\n          const e = event[0];\n          val =\n            e?.nativeEvent instanceof Event && isFieldElement(e.target)\n              ? getNodeValue(name)\n              : e;\n        }\n\n        handleChangeEvent(name, val);\n        if (onChange) onChange(...event);\n        changedFieldRef.current = name;\n      },\n      onBlur: (e) => {\n        setTouchedMaybeValidate(name);\n        if (onBlur) onBlur(e);\n        changedFieldRef.current = undefined;\n      },\n      ...restProps,\n    },\n    { error: meta.error, isTouched: !!meta.isTouched, isDirty: !!meta.isDirty },\n  ];\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { dequal } from \"dequal/lite\";\n\nimport * as shared from \"./shared\";\nimport {\n  ClearErrors,\n  Field,\n  FieldElement,\n  Fields,\n  FieldValidator,\n  FormConfig,\n  FormErrors,\n  FormMethods,\n  FormState,\n  FormValues,\n  GetFormState,\n  GetNodeValue,\n  GetState,\n  HandleChangeEvent,\n  Handlers,\n  Map,\n  Parsers,\n  RegisterField,\n  RegisterForm,\n  RemoveField,\n  Reset,\n  RunValidation,\n  Select,\n  SetDefaultValue,\n  SetDirty,\n  SetError,\n  SetTouched,\n  SetTouchedMaybeValidate,\n  SetValue,\n  Submit,\n} from \"./types\";\nimport { useLatest, useState } from \"./hooks\";\nimport {\n  arrayToMap,\n  compact,\n  deepMerge,\n  filterErrors,\n  get,\n  isAsyncFunction,\n  isCheckboxInput,\n  isEmptyObject,\n  isFieldElement,\n  isFileInput,\n  isFileList,\n  isFunction,\n  isInputElement,\n  isNumberInput,\n  isPlainObject,\n  isRadioInput,\n  isRangeInput,\n  isSelectMultiple,\n  isSelectOne,\n  isUndefined,\n  runWithLowPriority,\n  set,\n  unset,\n  warn,\n} from \"./utils\";\n\nexport default <V extends FormValues = FormValues>({\n  id,\n  defaultValues = {} as V,\n  validate,\n  validateOnChange = true,\n  validateOnBlur = true,\n  builtInValidationMode = \"message\",\n  shouldRemoveField = true,\n  excludeFields = [],\n  onReset,\n  onSubmit,\n  onError,\n  debug,\n}: FormConfig<V> = {}): FormMethods<V> => {\n  const handlersRef = useRef<Handlers>({});\n  const observerRef = useRef<MutationObserver>();\n  const formRef = useRef<HTMLElement>();\n  const fieldsRef = useRef<Fields>({});\n  const fieldParsersRef = useRef<Parsers>({});\n  const controlledsRef = useRef<Map>({});\n  const excludeFieldsRef = useRef<Map>(arrayToMap(excludeFields));\n  const changedFieldRef = useRef<string>();\n  const formValidatorRef = useLatest(validate);\n  const fieldValidatorsRef = useRef<Map<FieldValidator<V>>>({});\n  const onResetRef = useLatest(onReset || (() => undefined));\n  const onSubmitRef = useLatest(onSubmit || (() => undefined));\n  const onErrorRef = useLatest(onError || (() => undefined));\n  const defaultValuesRef = useRef(defaultValues);\n  const initialStateRef = useRef<FormState<V>>({\n    values: defaultValuesRef.current,\n    touched: {},\n    errors: {},\n    isDirty: false,\n    dirty: {},\n    isValidating: false,\n    isValid: true,\n    isSubmitting: false,\n    isSubmitted: false,\n    submitCount: 0,\n  });\n  const {\n    stateRef,\n    setStateRef,\n    setUsedState,\n    subscribeObserver,\n    unsubscribeObserver,\n  } = useState<V>(initialStateRef.current, debug);\n\n  const handleUnset = useCallback(\n    (path: string) => {\n      const [t, n] = path.split(\".\");\n      setStateRef(\n        t,\n        unset(stateRef.current[t as keyof FormState<V>], n, true),\n        {\n          fieldPath: path,\n        }\n      );\n    },\n    [setStateRef, stateRef]\n  );\n\n  const getFields = useCallback(\n    (form: HTMLElement) =>\n      Array.from(form.querySelectorAll(\"input,textarea,select\"))\n        .filter((element) => {\n          const field = element as FieldElement;\n          const {\n            type,\n            name,\n            id: fieldId,\n            classList,\n            dataset: { rcfExclude },\n          } = field;\n\n          const classes = Array.from(classList);\n          const { current: exclude } = excludeFieldsRef;\n\n          if (\n            /button|image|submit|reset/.test(type) ||\n            (fieldId && exclude[`#${fieldId}`]) ||\n            classes.find((n) => exclude[`.${n}`])\n          )\n            return false;\n\n          if (rcfExclude !== \"true\" && !name) {\n            warn(\n              '💡 react-cool-form > field: Missing \"name\" attribute. Do you want to exclude the field? See: https://react-cool-form.netlify.app/docs/api-reference/use-form/#excludefields'\n            );\n            return false;\n          }\n\n          return (\n            controlledsRef.current[name] ||\n            (rcfExclude !== \"true\" && !exclude[name])\n          );\n        })\n        .reduce((acc: Fields, elm) => {\n          const field = elm as FieldElement;\n          const { name } = field;\n\n          acc[name] = { ...acc[name], field: acc[name]?.field || field };\n\n          if (isCheckboxInput(field) || isRadioInput(field)) {\n            acc[name].options = acc[name].options\n              ? [...(acc[name].options as HTMLInputElement[]), field]\n              : [field];\n          } else if (isSelectOne(field) || isSelectMultiple(field)) {\n            acc[name].options = Array.from(field.options);\n          }\n\n          return acc;\n        }, {}),\n    []\n  );\n\n  const getNodeValue = useCallback<GetNodeValue>(\n    (name, fields = fieldsRef.current) => {\n      const { field, options } = fields[name];\n      let value = field.value as any;\n\n      if (isInputElement(field)) {\n        if (fieldParsersRef.current[name]?.valueAsNumber) {\n          value = field.valueAsNumber;\n          return value;\n        }\n        if (fieldParsersRef.current[name]?.valueAsDate) {\n          value = field.valueAsDate;\n          return value;\n        }\n      }\n\n      if (isNumberInput(field) || isRangeInput(field))\n        value = field.valueAsNumber || \"\";\n\n      if (isCheckboxInput(field)) {\n        const checkboxes = options as HTMLInputElement[];\n        const checkbox = checkboxes[0];\n\n        if (checkboxes.length > 1) {\n          value = checkboxes.filter((c) => c.checked).map((c) => c.value);\n        } else if (checkbox.hasAttribute(\"value\") && checkbox.value) {\n          value = checkbox.checked ? [checkbox.value] : [];\n        } else {\n          value = checkbox.checked;\n        }\n      }\n\n      if (isRadioInput(field))\n        value =\n          (options as HTMLInputElement[]).find((radio) => radio.checked)\n            ?.value || \"\";\n\n      if (isSelectMultiple(field))\n        value = (options as HTMLOptionElement[])\n          .filter((option) => option.selected)\n          .map((option) => option.value);\n\n      if (isFileInput(field)) value = field.files;\n\n      return value;\n    },\n    []\n  );\n\n  const setNodeValue = useCallback(\n    (name: string, value: any, fields: Fields = fieldsRef.current) => {\n      if (!fields[name] || controlledsRef.current[name]) return;\n\n      const { field, options } = fields[name];\n\n      if (isCheckboxInput(field)) {\n        const checkboxes = options as HTMLInputElement[];\n\n        if (checkboxes.length > 1) {\n          checkboxes.forEach((checkbox) => {\n            checkbox.checked = Array.isArray(value)\n              ? value.includes(checkbox.value)\n              : !!value;\n          });\n        } else {\n          checkboxes[0].checked = !!value;\n        }\n      } else if (isRadioInput(field)) {\n        (options as HTMLInputElement[]).forEach((radio) => {\n          radio.checked = radio.value === value;\n        });\n      } else if (isSelectMultiple(field) && Array.isArray(value)) {\n        (options as HTMLOptionElement[]).forEach((option) => {\n          option.selected = !!value.includes(option.value);\n        });\n      } else if (isFileInput(field)) {\n        if (isFileList(value)) field.files = value;\n        if (!value) field.value = \"\";\n      } else {\n        field.value = value ?? \"\";\n      }\n    },\n    []\n  );\n\n  const setDefaultValue = useCallback<SetDefaultValue>(\n    (name, value) => {\n      initialStateRef.current = set(\n        initialStateRef.current,\n        `values.${name}`,\n        value,\n        true\n      );\n\n      setStateRef(`values.${name}`, value, { shouldUpdate: false });\n    },\n    [setStateRef]\n  );\n\n  const setNodesOrStateValue = useCallback(\n    (\n      values: V,\n      {\n        shouldUpdateDefaultValues = true,\n        fields = Object.values(fieldsRef.current),\n      }: {\n        shouldUpdateDefaultValues?: boolean;\n        fields?: Field[] | string[];\n      } = {}\n    ) =>\n      fields.forEach((field: Field | string) => {\n        const name = isPlainObject(field) ? (field as Field).field.name : field;\n\n        if (controlledsRef.current[name]) return;\n\n        let value = get(values, name);\n\n        if (!isUndefined(value)) setNodeValue(name, value);\n\n        if (shouldUpdateDefaultValues) {\n          value = get(defaultValuesRef.current, name);\n\n          setDefaultValue(\n            name,\n            !isUndefined(value) ? value : getNodeValue(name)\n          );\n        }\n      }),\n    [getNodeValue, setDefaultValue, setNodeValue]\n  );\n\n  const getFormState = useCallback<GetFormState<V>>(\n    (\n      path,\n      {\n        target,\n        errorWithTouched,\n        defaultValues: dfValues = {},\n        methodName = \"select\",\n        callback,\n      }\n    ) => {\n      if (!path) return callback ? undefined : stateRef.current;\n\n      const usedState: Map = {};\n      const getPath = (p: string) => {\n        p = target ? `${target}.${p}` : p;\n\n        if (callback) {\n          if (p === \"values\")\n            warn(\n              `💡 react-cool-form > ${methodName}: Getting \"values\" alone might cause unnecessary re-renders. If you know what you're doing, please ignore this warning. See: https://react-cool-form.netlify.app/docs/getting-started/form-state#best-practices`\n            );\n\n          usedState[p] = true;\n        }\n\n        return p;\n      };\n      const helper = (p: string, state: any) => {\n        if (p.startsWith(\"values\")) {\n          if (!isUndefined(state)) return state;\n\n          p = p.replace(\"values.\", \"\");\n          state = get(defaultValuesRef.current, p);\n\n          return !isUndefined(state) ? state : get(dfValues, p);\n        }\n\n        if (\n          !errorWithTouched ||\n          !p.startsWith(\"errors\") ||\n          !state ||\n          isEmptyObject(state)\n        )\n          return state;\n\n        p = p.replace(\"errors\", \"touched\");\n        usedState[p] = true;\n\n        return filterErrors(state, get(stateRef.current, p));\n      };\n      let state;\n\n      if (Array.isArray(path)) {\n        state = path.map((p) => {\n          p = getPath(p);\n          return helper(p, get(stateRef.current, p));\n        });\n      } else if (isPlainObject(path)) {\n        const paths = path as Map<string>;\n        state = Object.keys(paths).reduce((s: Map<any>, key) => {\n          path = getPath(paths[key]);\n          s[key] = helper(path, get(stateRef.current, path));\n          return s;\n        }, {});\n      } else {\n        path = getPath(path);\n        state = helper(path, get(stateRef.current, path));\n      }\n\n      if (callback) callback(usedState);\n\n      return state;\n    },\n    [stateRef]\n  );\n\n  const select = useCallback<Select<V>>(\n    (path, { target, errorWithTouched, defaultValues: dfValues } = {}) =>\n      getFormState(path, {\n        target,\n        errorWithTouched,\n        defaultValues: dfValues,\n        callback: (usedState) => setUsedState(usedState),\n      }),\n    [getFormState, setUsedState]\n  );\n\n  const getState = useCallback<GetState>(\n    (path, target) => getFormState(path, { target }),\n    [getFormState]\n  );\n\n  const setError = useCallback<SetError>(\n    (name, error) => {\n      error = isFunction(error)\n        ? error(get(stateRef.current.errors, name))\n        : error;\n\n      if (error) {\n        setStateRef(`errors.${name}`, error);\n      } else {\n        handleUnset(`errors.${name}`);\n      }\n    },\n    [handleUnset, setStateRef, stateRef]\n  );\n\n  const clearErrors = useCallback<ClearErrors>(\n    (name) => {\n      if (!name) {\n        setStateRef(\"errors\", {});\n      } else if (Array.isArray(name)) {\n        name.forEach((n) => setError(n));\n      } else {\n        setError(name);\n      }\n    },\n    [setError, setStateRef]\n  );\n\n  const runBuiltInValidation = useCallback(\n    (name: string) => {\n      if (builtInValidationMode === false || !fieldsRef.current[name])\n        return undefined;\n\n      const { field } = fieldsRef.current[name];\n\n      if (builtInValidationMode === \"message\") return field.validationMessage;\n\n      for (const k in field.validity) // @ts-expect-error\n        if (k !== \"valid\" && field.validity[k]) return k;\n\n      return undefined;\n    },\n    [builtInValidationMode]\n  );\n\n  const runAllBuiltInValidation = useCallback(() => {\n    if (builtInValidationMode === false) return {};\n\n    return Object.keys(fieldsRef.current).reduce((errors, name) => {\n      const error = runBuiltInValidation(name);\n      errors = { ...errors, ...(error ? set({}, name, error) : {}) };\n      return errors;\n    }, {});\n  }, [builtInValidationMode, runBuiltInValidation]);\n\n  const runFieldValidation = useCallback(\n    async (name: string): Promise<any> => {\n      if (!fieldValidatorsRef.current[name]) return undefined;\n\n      try {\n        const error = await fieldValidatorsRef.current[name](\n          get(stateRef.current.values, name),\n          stateRef.current.values\n        );\n\n        return error;\n      } catch (exception) {\n        warn(`💡 react-cool-form > validate ${name}: `, exception);\n        throw exception;\n      }\n    },\n    [stateRef]\n  );\n\n  const runAllFieldsValidation = useCallback((): Promise<FormErrors<V>> => {\n    const promises = Object.keys(fieldValidatorsRef.current).map((name) =>\n      runFieldValidation(name)\n    );\n\n    return Promise.all(promises).then((errors) =>\n      Object.keys(fieldValidatorsRef.current).reduce((acc, cur, idx) => {\n        acc = { ...acc, ...(errors[idx] ? set({}, cur, errors[idx]) : {}) };\n        return acc;\n      }, {})\n    );\n  }, [runFieldValidation]);\n\n  const runFormValidation = useCallback(\n    async (name?: string): Promise<any> => {\n      if (!formValidatorRef.current) return name ? undefined : {};\n\n      try {\n        const errors = await formValidatorRef.current(stateRef.current.values);\n\n        if (name) return get(errors, name);\n\n        return isPlainObject(errors) ? errors : {};\n      } catch (exception) {\n        warn(`💡 react-cool-form > validate form: `, exception);\n        throw exception;\n      }\n    },\n    [formValidatorRef, stateRef]\n  );\n\n  const validateField = useCallback(\n    async (name: string) => {\n      const hasAsyncValidator =\n        isAsyncFunction(formValidatorRef.current) ||\n        isAsyncFunction(fieldValidatorsRef.current[name]);\n\n      if (hasAsyncValidator) setStateRef(\"isValidating\", true);\n\n      try {\n        const error =\n          (await runFormValidation(name)) ||\n          (await runFieldValidation(name)) ||\n          runBuiltInValidation(name);\n\n        setError(name, error);\n        if (hasAsyncValidator) setStateRef(\"isValidating\", false);\n\n        return error;\n      } catch (exception) {\n        return exception;\n      }\n    },\n    [\n      formValidatorRef,\n      runBuiltInValidation,\n      runFieldValidation,\n      runFormValidation,\n      setError,\n      setStateRef,\n    ]\n  );\n\n  const validateFieldWithLowPriority = useCallback<typeof validateField>(\n    (name) => runWithLowPriority(() => validateField(name)),\n    [validateField]\n  );\n\n  const validateForm = useCallback((): Promise<FormErrors<V>> => {\n    setStateRef(\"isValidating\", true);\n\n    return Promise.all([\n      runAllBuiltInValidation(),\n      runAllFieldsValidation(),\n      runFormValidation(),\n    ]).then((errors) => {\n      const errs = deepMerge(...errors);\n\n      setStateRef(\"errors\", errs);\n      setStateRef(\"isValidating\", false);\n\n      return errs;\n    });\n  }, [\n    runAllBuiltInValidation,\n    runAllFieldsValidation,\n    runFormValidation,\n    setStateRef,\n  ]);\n\n  const runValidation = useCallback<RunValidation>(\n    (name) => {\n      if (!name) return validateForm().then((errors) => isEmptyObject(errors));\n\n      if (Array.isArray(name))\n        return Promise.all(name.map((n) => validateField(n))).then(\n          (errors) => !compact(errors).length\n        );\n\n      return validateField(name).then((error) => !error);\n    },\n    [validateField, validateForm]\n  );\n\n  const setTouched = useCallback<SetTouched>(\n    (name, isTouched = true, shouldValidate = validateOnBlur) => {\n      if (isTouched) {\n        setStateRef(`touched.${name}`, true);\n      } else {\n        handleUnset(`touched.${name}`);\n      }\n\n      if (shouldValidate) validateFieldWithLowPriority(name);\n    },\n    [handleUnset, setStateRef, validateFieldWithLowPriority, validateOnBlur]\n  );\n\n  const setTouchedMaybeValidate = useCallback<SetTouchedMaybeValidate>(\n    (name) =>\n      setTouched(\n        name,\n        true,\n        validateOnChange ? name !== changedFieldRef.current : undefined\n      ),\n    [setTouched, validateOnChange]\n  );\n\n  const setDirty = useCallback<SetDirty>(\n    (name, isDirty = true) => {\n      if (isDirty) {\n        setStateRef(`dirty.${name}`, true);\n      } else {\n        handleUnset(`dirty.${name}`);\n      }\n    },\n    [handleUnset, setStateRef]\n  );\n\n  const setDirtyIfNeeded = useCallback(\n    (name: string) =>\n      setDirty(\n        name,\n        !dequal(\n          get(stateRef.current.values, name),\n          get(initialStateRef.current.values, name)\n        )\n      ),\n    [setDirty, stateRef]\n  );\n\n  const setValue = useCallback<SetValue>(\n    (\n      name,\n      value,\n      {\n        shouldValidate = validateOnChange,\n        shouldTouched = true,\n        shouldDirty = true,\n      } = {}\n    ) => {\n      value = isFunction(value)\n        ? value(get(stateRef.current.values, name))\n        : value;\n\n      if (!isUndefined(value)) {\n        setStateRef(`values.${name}`, value);\n      } else {\n        handleUnset(`values.${name}`);\n      }\n      setNodeValue(name, value);\n\n      if (shouldTouched) setTouched(name, true, false);\n      if (shouldDirty) setDirtyIfNeeded(name);\n      if (shouldValidate) validateFieldWithLowPriority(name);\n    },\n    [\n      handleUnset,\n      setDirtyIfNeeded,\n      setNodeValue,\n      setStateRef,\n      setTouched,\n      stateRef,\n      validateFieldWithLowPriority,\n      validateOnChange,\n    ]\n  );\n\n  const getOptions = useCallback(\n    () => ({\n      getState,\n      setValue,\n      setTouched,\n      setDirty,\n      setError,\n      clearErrors,\n      runValidation,\n      reset,\n      submit,\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const reset: Reset<V> = useCallback(\n    (values, exclude, e) => {\n      if (e?.preventDefault) e.preventDefault();\n      if (e?.stopPropagation) e.stopPropagation();\n\n      const state = { ...stateRef.current };\n      const skip = arrayToMap(exclude || []);\n\n      Object.keys(state).forEach((key) => {\n        if (skip[key]) return;\n\n        if (key === \"values\") {\n          const nextValues =\n            (isFunction(values) ? values(stateRef.current.values) : values) ||\n            initialStateRef.current.values;\n\n          state[key] = nextValues;\n          initialStateRef.current = set(\n            initialStateRef.current,\n            \"values\",\n            nextValues,\n            true\n          );\n          setNodesOrStateValue(nextValues, {\n            shouldUpdateDefaultValues: false,\n          });\n        } else {\n          // @ts-expect-error\n          state[key] = initialStateRef.current[key];\n        }\n      });\n\n      setStateRef(\"\", state);\n      onResetRef.current(state.values, getOptions(), e);\n    },\n    [getOptions, onResetRef, setNodesOrStateValue, setStateRef, stateRef]\n  );\n\n  const submit: Submit<V> = useCallback(\n    async (e) => {\n      if (e?.preventDefault) e.preventDefault();\n      if (e?.stopPropagation) e.stopPropagation();\n\n      const nextTouched = Object.keys({\n        ...fieldsRef.current,\n        ...controlledsRef.current,\n      }).reduce((touched, name) => {\n        touched = set(touched, name, true, true);\n        return touched;\n      }, stateRef.current.touched);\n\n      setStateRef(\"touched\", nextTouched);\n      setStateRef(\"isSubmitting\", true);\n\n      try {\n        const errors = await validateForm();\n\n        if (!isEmptyObject(errors)) {\n          onErrorRef.current(errors, getOptions(), e);\n\n          return { errors };\n        }\n\n        await onSubmitRef.current(stateRef.current.values, getOptions(), e);\n        setStateRef(\"isSubmitted\", true);\n\n        return { values: stateRef.current.values };\n      } catch (exception) {\n        warn(`💡 react-cool-form > submit: `, exception);\n        throw exception;\n      } finally {\n        setStateRef(\"isSubmitting\", false);\n      }\n    },\n    [getOptions, onErrorRef, onSubmitRef, setStateRef, stateRef, validateForm]\n  );\n\n  const handleChangeEvent = useCallback<HandleChangeEvent>(\n    (name, value) => {\n      setStateRef(`values.${name}`, value);\n      setDirtyIfNeeded(name);\n\n      if (validateOnChange) validateFieldWithLowPriority(name);\n    },\n    [\n      setDirtyIfNeeded,\n      setStateRef,\n      validateFieldWithLowPriority,\n      validateOnChange,\n    ]\n  );\n\n  const removeField = useCallback<RemoveField>(\n    (name) => {\n      handleUnset(`values.${name}`);\n      handleUnset(`touched.${name}`);\n      handleUnset(`dirty.${name}`);\n      handleUnset(`errors.${name}`);\n\n      initialStateRef.current = unset(\n        initialStateRef.current,\n        `values.${name}`,\n        true\n      );\n\n      delete fieldParsersRef.current[name];\n      delete fieldValidatorsRef.current[name];\n      delete controlledsRef.current[name];\n    },\n    [handleUnset]\n  );\n\n  const registerForm = useCallback<RegisterForm>(\n    (el) => {\n      if (!el) return;\n\n      formRef.current = el;\n      const form = formRef.current;\n\n      fieldsRef.current = getFields(form);\n      setNodesOrStateValue(initialStateRef.current.values);\n\n      handlersRef.current.change = ({ target }: Event) => {\n        const { name } = target as FieldElement;\n\n        if (!name) {\n          warn('💡 react-cool-form > field: Missing \"name\" attribute.');\n          return;\n        }\n\n        if (fieldsRef.current[name] && !controlledsRef.current[name]) {\n          const parse = fieldParsersRef.current[name]?.parse;\n          const value = getNodeValue(name);\n\n          handleChangeEvent(name, parse ? parse(value) : value);\n          changedFieldRef.current = name;\n        }\n      };\n\n      handlersRef.current.blur = ({ target }: Event) => {\n        if (!isFieldElement(target as HTMLElement)) return;\n\n        const { name } = target as FieldElement;\n\n        if (fieldsRef.current[name] && !controlledsRef.current[name]) {\n          setTouchedMaybeValidate(name);\n          changedFieldRef.current = undefined;\n        }\n      };\n\n      handlersRef.current.submit = (e: Event) => submit(e as any);\n\n      handlersRef.current.reset = (e: Event) => reset(null, null, e as any);\n\n      form.addEventListener(\"input\", handlersRef.current.change);\n      form.addEventListener(\"focusout\", handlersRef.current.blur);\n      form.addEventListener(\"submit\", handlersRef.current.submit);\n      form.addEventListener(\"reset\", handlersRef.current.reset);\n\n      observerRef.current = new MutationObserver(([{ type }]) => {\n        if (type !== \"childList\") return;\n\n        const fields = getFields(form);\n\n        if (shouldRemoveField)\n          Object.keys(fieldsRef.current).forEach((name) => {\n            if (controlledsRef.current[name]) return;\n\n            if (!fields[name]) {\n              removeField(name);\n              return;\n            }\n\n            const currOptions = fieldsRef.current[name].options\n              ?.length as number;\n            const nextOptions = fields[name].options?.length as number;\n\n            if (currOptions > nextOptions) {\n              setStateRef(`values.${name}`, getNodeValue(name, fields), {\n                shouldUpdate: false,\n              });\n            } else if (currOptions < nextOptions) {\n              setNodeValue(\n                name,\n                get(initialStateRef.current.values, name),\n                fields\n              );\n            }\n          });\n\n        let values = defaultValuesRef.current;\n        const addedNodes: string[] = [];\n\n        Object.keys(fields).forEach((name) => {\n          if (fieldsRef.current[name] || controlledsRef.current[name]) return;\n\n          const value = get(stateRef.current.values, name);\n          if (!isUndefined(value)) values = set(values, name, value, true);\n\n          addedNodes.push(name);\n        });\n\n        fieldsRef.current = fields;\n        if (addedNodes.length)\n          setNodesOrStateValue(values, { fields: addedNodes });\n      });\n\n      observerRef.current.observe(form, { childList: true, subtree: true });\n    },\n    [\n      getFields,\n      getNodeValue,\n      handleChangeEvent,\n      removeField,\n      reset,\n      setNodeValue,\n      setNodesOrStateValue,\n      setStateRef,\n      setTouchedMaybeValidate,\n      shouldRemoveField,\n      stateRef,\n      submit,\n    ]\n  );\n\n  const registerField = useCallback<RegisterField<V>>(\n    (validateOrOptions) => (field) => {\n      if (\n        !field?.name ||\n        controlledsRef.current[field.name] ||\n        excludeFieldsRef.current[field.name]\n      )\n        return;\n\n      if (isFunction(validateOrOptions)) {\n        fieldValidatorsRef.current[field.name] = validateOrOptions;\n        return;\n      }\n\n      const { validate: validator, ...parsers } = validateOrOptions;\n\n      if (validator) fieldValidatorsRef.current[field.name] = validator;\n      fieldParsersRef.current[field.name] = parsers;\n    },\n    []\n  );\n\n  shared.set(id, {\n    shouldRemoveField,\n    defaultValuesRef,\n    initialStateRef,\n    controlledsRef,\n    fieldValidatorsRef,\n    changedFieldRef,\n    excludeFieldsRef,\n    getNodeValue,\n    getFormState,\n    setDefaultValue,\n    setTouchedMaybeValidate,\n    handleChangeEvent,\n    removeField,\n    subscribeObserver,\n    unsubscribeObserver,\n    form: registerForm,\n    field: registerField,\n    select,\n    getState,\n    setValue,\n    setTouched,\n    setDirty,\n    setError,\n    clearErrors,\n    runValidation,\n    reset,\n    submit,\n  });\n\n  useEffect(\n    () => () => {\n      if (formRef.current) {\n        const handlers = handlersRef.current as Required<Handlers>;\n\n        formRef.current.removeEventListener(\"input\", handlers.change);\n        formRef.current.removeEventListener(\"focusout\", handlers.blur);\n        formRef.current.removeEventListener(\"submit\", handlers.submit);\n        formRef.current.removeEventListener(\"reset\", handlers.reset);\n        observerRef.current?.disconnect();\n      }\n\n      shared.remove(id);\n    },\n    [id]\n  );\n\n  return {\n    form: registerForm,\n    field: registerField,\n    select,\n    getState,\n    setValue,\n    setTouched,\n    setDirty,\n    setError,\n    clearErrors,\n    runValidation,\n    reset,\n    submit,\n  };\n};\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLSelectElement =>\n  field.type === \"select-one\";\n","export default (element: HTMLElement): element is HTMLInputElement =>\n  element.tagName === \"INPUT\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"number\";\n","import { FieldElement } from \"../types\";\n\nexport default (field: FieldElement): field is HTMLInputElement =>\n  field.type === \"range\";\n","export default (callback: (args: any) => any): any =>\n  (\n    window.requestIdleCallback ||\n    ((cb) => {\n      const start = Date.now();\n      return setTimeout(\n        () =>\n          cb({\n            didTimeout: false,\n            timeRemaining: /* istanbul ignore next */ () =>\n              Math.max(0, 50 - (Date.now() - start)),\n          }),\n        1\n      );\n    })\n  )(callback, { timeout: 2000 });\n","import { FormMethods, FormValues } from \"./types\";\nimport { get } from \"./shared\";\nimport { invariant } from \"./utils\";\n\nexport default <V extends FormValues = FormValues>(\n  formId?: string\n): FormMethods<V> => {\n  const methods = get(formId);\n\n  invariant(\n    !methods,\n    '💡 react-cool-form > useFormMethods: You must provide the corresponding ID to \"useForm\" hook. See: https://react-cool-form.netlify.app/docs/api-reference/use-form#id'\n  );\n\n  const {\n    form,\n    field,\n    select,\n    getState,\n    setValue,\n    setTouched,\n    setDirty,\n    setError,\n    clearErrors,\n    runValidation,\n    reset,\n    submit,\n  } = methods;\n\n  return {\n    form,\n    field,\n    select,\n    getState,\n    setValue,\n    setTouched,\n    setDirty,\n    setError,\n    clearErrors,\n    runValidation,\n    reset,\n    submit,\n  };\n};\n"],"names":["one","all","get","id","val","ref","useRef","useEffect","current","arr","reduce","obj","key","value","FileList","cloneObject","object","Event","Error","isObject","isFileList","Date","getTime","Array","isArray","map","Object","keys","filter","Boolean","deepMerge","objects","prev","forEach","prevValue","currValue","isPlainObject","undefined","filterErrors","error","touched","nextErrors","isUndefined","str","TypeError","length","compact","split","path","defaultValue","stringToPath","condition","message","__DEV__","isFunction","constructor","name","field","type","element","test","tagName","immutable","segs","newObject","slice","idx","nextIsNumber","Number","isNaN","unset","refObject","hasOwnProperty","last","pop","target","index","splice","isEmptyObject","join","initialState","onChange","forceUpdate","useReducer","c","stateRef","stateObserversRef","usedState","update","onChangeRef","useLatest","setStateRef","useCallback","fieldPath","shouldUpdate","dequal","state","set","errors","dirty","prevIsDirty","isDirty","prevIsValid","isValid","prevSubmitCount","submitCount","search","dty","found","values","push","getIsDirty","some","k","startsWith","setUsedState","subscribeObserver","observer","unsubscribeObserver","o","formId","rest","methods","methodName","invariant","observerRef","getFormState","callback","validate","parse","format","errorWithTouched","props","shared","hasWarn","meta","useFormState","isTouched","shouldRemoveField","defaultValuesRef","initialStateRef","controlledsRef","fieldValidatorsRef","changedFieldRef","getNodeValue","setDefaultValue","setTouchedMaybeValidate","handleChangeEvent","removeField","onBlur","restProps","e","nativeEvent","isFieldElement","defaultValues","validateOnChange","validateOnBlur","builtInValidationMode","excludeFields","onReset","onSubmit","onError","debug","handlersRef","formRef","fieldsRef","fieldParsersRef","excludeFieldsRef","arrayToMap","formValidatorRef","onResetRef","onSubmitRef","onErrorRef","isValidating","isSubmitting","isSubmitted","useState","handleUnset","t","n","getFields","form","from","querySelectorAll","fieldId","classList","rcfExclude","dataset","classes","exclude","find","acc","elm","isCheckboxInput","isRadioInput","options","isSelectOne","isSelectMultiple","fields","_fieldParsersRef$curr","valueAsNumber","_fieldParsersRef$curr2","valueAsDate","isNumberInput","isRangeInput","checkboxes","checkbox","checked","hasAttribute","radio","option","selected","isFileInput","files","setNodeValue","includes","setNodesOrStateValue","shouldUpdateDefaultValues","dfValues","getPath","p","helper","replace","paths","s","select","getState","setError","clearErrors","runBuiltInValidation","validationMessage","validity","runAllBuiltInValidation","runFieldValidation","async","exception","runAllFieldsValidation","promises","Promise","then","cur","runFormValidation","validateField","hasAsyncValidator","isAsyncFunction","validateFieldWithLowPriority","window","requestIdleCallback","cb","start","now","setTimeout","didTimeout","timeRemaining","Math","max","timeout","validateForm","errs","runValidation","setTouched","shouldValidate","setDirty","setDirtyIfNeeded","setValue","shouldTouched","shouldDirty","getOptions","reset","submit","preventDefault","stopPropagation","skip","nextValues","nextTouched","registerForm","el","change","_fieldParsersRef$curr3","blur","addEventListener","MutationObserver","currOptions","_fieldsRef$current$na","nextOptions","_fields$name$options","addedNodes","observe","childList","subtree","registerField","validateOrOptions","validator","parsers","handlers","removeEventListener","disconnect"],"mappings":"6SAEIA,gBACEC,EAAoB,GAEbC,EAAM,SAACC,UAA0BA,EAAKF,EAAIE,GAAOH,cCH3CI,OACXC,EAAMC,SAAOF,UAEnBG,aAAU,WACRF,EAAIG,QAAUJ,KAGTC,cCPOI,UACdA,EAAIC,QAAO,SAACC,EAAKC,UACfD,EAAIC,IAAO,EACJD,IACN,gBCNWE,UAAsCA,aAAiBC,qBCAvDD,UACJ,OAAVA,GAAmC,iBAAVA,GCErBE,EAAc,SAAdA,EAAeC,MACfA,aAAkBC,MAAO,MAAM,IAAIC,MAAM,iCAExCC,EAASH,IAAWI,EAAWJ,GAAgBA,EAEhDA,aAAkBK,KAAa,IAAIA,KAAKL,EAAOM,WAE/CC,MAAMC,QAAQR,GAAgBA,EAAOS,KAAI,SAACrB,UAAQW,EAAYX,MAE3DsB,OAAOC,KAAKX,GAAQN,QAAO,SAACC,EAA0BC,UAC3DD,EAAIC,GAAOG,EAAaC,EAA+BJ,IAChDD,IACN,gBCfWF,UAAsBA,EAAImB,OAAOC,qBCEjChB,UACbU,MAAMC,QAAQX,MAAYA,aAAiBQ,OAASF,EAASN,ICD1DiB,EAAY,SAAZA,+BAAgBC,2BAAAA,yBACpBA,EAAQrB,QAAO,SAACsB,EAAMrB,UACpBe,OAAOC,KAAKhB,GAAKsB,SAAQ,SAACrB,OAClBsB,EAAYF,EAAKpB,GACjBuB,EAAYxB,EAAIC,GAElBW,MAAMC,QAAQU,IAAcX,MAAMC,QAAQW,GAC5CH,EAAKpB,aAAWsB,EAAcC,GACrBC,EAAcF,IAAcE,EAAcD,GACnDH,EAAKpB,GAAOkB,EAAUI,EAAWC,GAEjCH,EAAKpB,GAAOuB,KAITH,IACN,gBClBWnB,eAAiDwB,IAAVxB,GCIjDyB,EAAe,SAAfA,EAAgBC,EAAgBC,UAC/BJ,EAAcG,GAEZb,OAAOC,KAAKY,GAAO7B,QAAO,SAACC,EAAeC,OACzC6B,EAAaH,EAChBC,EAAmB3B,GACnB4B,EAAqB5B,KAAQ,UAG3B8B,EAAYD,UAGR9B,EAAIC,GAFXD,EAAIC,GAAO6B,EAKN9B,IACN,IAf+B6B,EAAUD,OAAQF,cCHtCM,MACK,iBAARA,EAAkB,MAAM,IAAIC,UAAU,6BAC5CD,EAAIE,OAEFC,EAAQH,EAAII,MAAM,YAFD,eCCV/B,EAAagC,EAAcC,OACpCb,EAAcpB,KAAYgC,EAAM,OAAOC,MAEtCpC,EAAQqC,EAAaF,GAAMtC,QAC/B,SAACC,EAAKC,UAASD,GAAO,IAAIC,KAC1BI,UAGM0B,EAAY7B,GAAiBoC,EAARpC,cCbfsC,EAAoBC,GAC9BC,cCDUxC,SACG,mBAAVA,cCCOA,UACdyC,EAAWzC,IAAqC,kBAA3BA,EAAM0C,YAAYC,iBCDzBC,SACC,aAAfA,EAAMC,iBCAQ7C,UACduB,EAAcvB,KAAWa,OAAOC,KAAKd,GAAOgC,mBCF9Bc,SACd,wBAAwBC,KAAKD,EAAQE,qBCDvBJ,SACC,SAAfA,EAAMC,iBCDQD,SACC,UAAfA,EAAMC,iBCDQD,SACC,oBAAfA,EAAMC,iBCGN1C,EACAgC,EACAnC,EACAiD,eAAAA,IAAAA,GAAY,IAEP1B,EAAcpB,GAAS,MAAM,IAAI4B,UAAU,2BAE1CmB,EAAOb,EAAaF,GACpBgB,EAAYF,EAAY/C,EAAYC,GAAUA,SAEpD+C,EAAKE,MAAM,GAAI,GAAGvD,QAAO,SAACC,EAAKC,EAAKsD,OAC5BC,GAAgBC,OAAOC,OAAON,EAAKG,EAAM,WAE5C9B,EAAczB,EAAIC,MAAUuD,GAC5B5C,MAAMC,QAAQb,EAAIC,KAASuD,IAG9BxD,EAAIC,GAAOuD,EAAe,GAAK,IADtBxD,EAAIC,KAGZoD,GAAWD,EAAKA,EAAKlB,OAAS,IAAM,IAAMhC,EAEtCmD,GClBHM,EAAQ,SAARA,EAAStD,EAAagC,EAAcc,eAAAA,IAAAA,GAAY,IAC/C1B,EAAcpB,GAAS,MAAM,IAAI4B,UAAU,2BAE1C2B,EAAYT,EAAY/C,EAAYC,GAAUA,EAC9CgD,EAAYO,KAEdP,EAAUQ,eAAexB,iBACpBgB,EAAUhB,GACVuB,MAGHR,EAAOb,EAAaF,OAErBe,EAAKlB,OAAQ,OAAO0B,MAEnBE,EAAOV,EAAKW,MACZC,EAASZ,EAAKrD,QAAO,SAACC,EAAKC,UAASD,GAAO,IAAIC,KAAMoD,MAEvDzC,MAAMC,QAAQmD,GAAS,KACrBC,GAASH,KAETG,EAAQD,EAAO9B,OAAS,EAC1B8B,EAAOE,OAAOD,EAAO,aAEdA,GAAS,IAEVA,GAASH,GAAQ/B,EAAYiC,EAAOC,MACtCD,EAAOE,OAAOD,EAAO,GACrBA,GAAS,OAMNxC,EAAcuC,WAChBA,EAAOF,UAGTK,EAAcH,IAAYpD,MAAMC,QAAQmD,KAAYA,EAAO9B,OAC9DyB,EAAMC,EAAWR,EAAKgB,KAAK,MAC3BR,cCjCJS,EACAC,OAESC,EAAeC,cAAW,SAACC,UAAMA,EAAI,IAAG,MAC3CC,EAAW/E,SAAO0E,GAClBM,EAAoBhF,SAAmB,CAC3C,CAAEiF,UAAW,GAAIC,OAAQN,KAErBO,EAAcC,EAAUT,GAAa,cAErCU,EAAcC,eAClB,SAAC5C,EAAMnC,sBAA4C,KAAnCgF,IAAAA,cAAWC,aAAAA,gBACnBlF,EAAMoC,EAAKD,MAAM,KAAK,MAEvBnC,MAcO,WAAToC,GAA6B,WAARpC,IACrBmF,SAAO7F,EAAImF,EAAS7E,QAASwC,GAAOnC,GACrC,KACMmF,EAAQC,EAAIZ,EAAS7E,QAASwC,EAAMnC,GAAO,GAE/CqF,EAIEF,EAJFE,OACAC,EAGEH,EAHFG,MACSC,EAEPJ,EAFFK,QACSC,EACPN,EADFO,QAEiBC,EAAoBR,EAAjCS,YACAJ,EAAkB,UAARzF,ECrDL,SAACuF,WACH,SAATO,EAAUC,EAAaC,YAAAA,IAAAA,EAAe,kBACxBlF,OAAOmF,OAAOF,kBAAM,KAA3BvG,WACG,IAARA,SACFwG,EAAME,KAAK1G,GACJwG,EAGLzF,EAASf,IAAMsG,EAAOtG,EAAKwG,UAG1BA,EAGAF,CAAOP,GAAOtD,ODuCiBkE,CAAWZ,GAASC,EAChDG,EAAkB,WAAR3F,EAAmBkE,EAAcoB,GAAUI,EACrDG,EACI,iBAAR7F,GAA0BC,EACrB2F,GAAmB,EACpBA,KAENnB,EAAS7E,qBAAewF,GAAOK,QAAAA,EAASE,QAAAA,EAASE,YAAAA,IACjDhB,EAAYjF,QAAQ6E,EAAS7E,UAExBsF,EAAc,OAEnB9C,EAAO6C,GAAa7C,EACpBsC,EAAkB9E,QAAQyB,SAAQ,gBAAGsD,IAAAA,UAAWC,IAAAA,QAE5C9D,OAAOC,KAAK4D,GAAWyB,MACrB,SAACC,UAAMjE,EAAKkE,WAAWD,IAAMA,EAAEC,WAAWlE,OAE3CuC,EAAUc,SAAWA,IAAYD,GACjCb,EAAUgB,SAAWA,IAAYD,IAElCd,aA7CCO,SAAOV,EAAS7E,QAASK,KAC5BwE,EAAS7E,QAAUK,EACnB4E,EAAYjF,QAAQ6E,EAAS7E,SAE7B8E,EAAkB9E,QAAQyB,SAAQ,gBAAGsD,IAAAA,UAAWC,IAAAA,OAC1CM,IAAiBhB,EAAcS,IAAYC,UA4CvD,CAACC,IAGG0B,EAAevB,eAA0B,SAACL,GAC9CD,EAAkB9E,QAAQ,GAAG+E,UAAYA,IACxC,IAEG6B,EAAoBxB,eACxB,SAACyB,UAAa/B,EAAkB9E,QAAQsG,KAAKO,KAC7C,IAGIC,EAAsB1B,eAA6B,SAACyB,GACxD/B,EAAkB9E,QAAU8E,EAAkB9E,QAAQoB,QACpD,SAAC2F,UAAMA,IAAMF,OAEd,UAEI,CACLhC,SAAAA,EACAM,YAAAA,EACAwB,aAAAA,EACAC,kBAAAA,EACAE,oBAAAA,eE9FFtE,sBAC0C,KAAxCwE,IAAAA,OAAWC,0BAEPC,EAAUxH,EAAIsH,GACdG,EAAa,eAEnBC,QAKMC,EAAcvH,WACX4E,EAAeC,cAAW,SAACC,UAAMA,EAAI,IAAG,MACzC0C,EAAyDJ,EAAzDI,aAAcV,EAA2CM,EAA3CN,kBAAmBE,EAAwBI,EAAxBJ,2BAEzC/G,aAAU,kBAER6G,EAAkBS,EAAYrH,SAGvB,kBAAM8G,EAAoBO,EAAYrH,YAE5C,IAEIsH,EAAa9E,eACfyE,GACHE,WAAAA,EACAI,SAAU,SAACxC,GACJsC,EAAYrH,UACfqH,EAAYrH,QAAU,CAAE+E,UAAAA,EAAWC,OAAQN,oFC9BjD1B,wBASyB,KAPvBgE,IAAAA,OACAvE,IAAAA,aACA+E,IAAAA,SACAC,IAAAA,MACAC,IAAAA,OACAC,IAAAA,iBACGC,wFAGLR,QAKMF,EAAUW,EAAWb,GAE3BI,QAuCI/G,EAlCEyH,EAAUhI,UAAO,GACjBiI,EAAOC,EACX,CACE3H,gBAAiB2C,EACjBjB,gBAAiBiB,EACjBiF,qBAAsBjF,EACtB6C,iBAAkB7C,GAEpB,CAAEgE,OAAAA,EAAQW,iBAAAA,IAGVO,EAWEhB,EAXFgB,kBACAC,EAUEjB,EAVFiB,iBACAC,EASElB,EATFkB,gBACAC,EAQEnB,EARFmB,eACAC,EAOEpB,EAPFoB,mBACAC,EAMErB,EANFqB,gBACAC,EAKEtB,EALFsB,aACAC,EAIEvB,EAJFuB,gBACAC,EAGExB,EAHFwB,wBACAC,EAEEzB,EAFFyB,kBACAC,EACE1B,EADF0B,YAGF7I,aACE,kBAAM,WACAmI,GAAmBU,EAAY5F,MAErC,CAACA,EAAM4F,EAAaV,IAGtBG,EAAerI,QAAQgD,IAAQ,EAC3BwE,IAAUc,EAAmBtI,QAAQgD,GAAQwE,GAI7CtF,EAAYxC,EAAI0I,EAAgBpI,QAAQqG,OAAQrD,MAClD3C,EAAQX,EAAIyI,EAAiBnI,QAASgD,GACtC3C,EAAS6B,EAAY7B,GAAiBoC,EAARpC,EAEzB6B,EAAY7B,GAELyH,EAAQ9H,UAIlB8H,EAAQ9H,SAAU,GALlByI,EAAgBzF,EAAM3C,IAS1BA,EAAS6B,EAAY6F,EAAK1H,OAAsBA,EAAb0H,EAAK1H,MACxCA,WAASqH,EAASA,EAAOrH,GAASA,KAAU,OACpCoE,EAAmCmD,EAAnCnD,SAAUoE,EAAyBjB,EAAzBiB,OAAWC,YAAclB,+BAEpC,YAEH5E,KAAAA,EACA3C,MAAAA,EACAoE,SAAU,eACJ7E,KAEA6H,EACF7H,EAAM6H,8BACD,KACCsB,0CACNnJ,SACEmJ,SAAAA,EAAGC,uBAAuBvI,OAASwI,EAAeF,EAAE5E,QAChDqE,EAAaxF,GACb+F,EAGRJ,EAAkB3F,EAAMpD,GACpB6E,GAAUA,0BACd8D,EAAgBvI,QAAUgD,GAE5B6F,OAAQ,SAACE,GACPL,EAAwB1F,GACpB6F,GAAQA,EAAOE,GACnBR,EAAgBvI,aAAU6B,IAEzBiH,GAEL,CAAE/G,MAAOgG,EAAKhG,MAAOkG,YAAaF,EAAKE,UAAWpC,UAAWkC,EAAKlC,wDClCnD,KAZjBlG,IAAAA,OACAuJ,cAAAA,aAAgB,KAChB1B,IAAAA,aACA2B,iBAAAA,oBACAC,eAAAA,oBACAC,sBAAAA,aAAwB,gBACxBnB,kBAAAA,oBACAoB,cAAAA,aAAgB,KAChBC,IAAAA,QACAC,IAAAA,SACAC,IAAAA,QACAC,IAAAA,MAEMC,EAAc7J,SAAiB,IAC/BuH,EAAcvH,WACd8J,EAAU9J,WACV+J,EAAY/J,SAAe,IAC3BgK,EAAkBhK,SAAgB,IAClCuI,EAAiBvI,SAAY,IAC7BiK,EAAmBjK,SAAYkK,EAAWV,IAC1Cf,EAAkBzI,WAClBmK,GAAmB/E,EAAUsC,GAC7Bc,GAAqBxI,SAA+B,IACpDoK,GAAahF,EAAUqE,GAAY,cACnCY,GAAcjF,EAAUsE,GAAa,cACrCY,GAAalF,EAAUuE,GAAY,cACnCtB,GAAmBrI,SAAOoJ,GAC1Bd,GAAkBtI,SAAqB,CAC3CuG,OAAQ8B,GAAiBnI,QACzBgC,QAAS,GACT0D,OAAQ,GACRG,SAAS,EACTF,MAAO,GACP0E,cAAc,EACdtE,SAAS,EACTuE,cAAc,EACdC,aAAa,EACbtE,YAAa,OAQXuE,EAAYpC,GAAgBpI,QAAS0J,GALvC7E,MAAAA,SACAM,MAAAA,YACAwB,MAAAA,aACAC,MAAAA,kBACAE,MAAAA,oBAGI2D,GAAcrF,eAClB,SAAC5C,SACgBA,EAAKD,MAAM,KAAnBmI,OAAGC,OACVxF,GACEuF,EACA5G,EAAMe,GAAS7E,QAAQ0K,GAA0BC,GAAG,GACpD,CACEtF,UAAW7C,MAIjB,CAAC2C,GAAaN,KAGV+F,GAAYxF,eAChB,SAACyF,UACC9J,MAAM+J,KAAKD,EAAKE,iBAAiB,0BAC9B3J,QAAO,SAAC+B,OACDF,EAAQE,EAEZD,EAKED,EALFC,KACAF,EAIEC,EAJFD,KACIgI,EAGF/H,EAHFtD,GACAsL,EAEEhI,EAFFgI,UACWC,EACTjI,EADFkI,QAAWD,WAGPE,EAAUrK,MAAM+J,KAAKG,GACVI,EAAYtB,EAArB/J,gBAGN,4BAA4BoD,KAAKF,IAChC8H,GAAWK,MAAYL,IACxBI,EAAQE,MAAK,SAACX,UAAMU,MAAYV,WAIf,SAAfO,IAA0BlI,KAQ5BqF,EAAerI,QAAQgD,IACP,SAAfkI,IAA0BG,EAAQrI,QAGtC9C,QAAO,SAACqL,EAAaC,SACdvI,EAAQuI,EACNxI,EAASC,EAATD,YAERuI,EAAIvI,gBAAauI,EAAIvI,IAAOC,gBAAOsI,EAAIvI,aAAOC,QAASA,IAEnDwI,EAAgBxI,IAAUyI,EAAazI,GACzCsI,EAAIvI,GAAM2I,QAAUJ,EAAIvI,GAAM2I,kBACrBJ,EAAIvI,GAAM2I,SAAgC1I,IAC/C,CAACA,aC1KDA,SACC,eAAfA,EAAMC,KD0Ka0I,CAAY3I,IAAU4I,EAAiB5I,MAChDsI,EAAIvI,GAAM2I,QAAU5K,MAAM+J,KAAK7H,EAAM0I,UAGhCJ,IACN,MACP,IAGI/C,GAAepD,eACnB,SAACpC,EAAM8I,kBAAAA,IAAAA,EAASjC,EAAU7J,eACG8L,EAAO9I,GAA1BC,IAAAA,MAAO0I,IAAAA,QACXtL,EAAQ4C,EAAM5C,SExLF,UF0LG4C,EE1LfI,QF0LuB,qBACrByG,EAAgB9J,QAAQgD,KAAxB+I,EAA+BC,qBACjC3L,EAAQ4C,EAAM+I,0BAGZlC,EAAgB9J,QAAQgD,KAAxBiJ,EAA+BC,mBACjC7L,EAAQ4C,EAAMiJ,yBG/LRjJ,SACC,WAAfA,EAAMC,KHmMEiJ,CAAclJ,aIpMRA,SACC,UAAfA,EAAMC,KJmM0BkJ,CAAanJ,MACvC5C,EAAQ4C,EAAM+I,eAAiB,IAE7BP,EAAgBxI,GAAQ,KACpBoJ,EAAaV,EACbW,EAAWD,EAAW,GAG1BhM,EADEgM,EAAWhK,OAAS,EACdgK,EAAWjL,QAAO,SAACwD,UAAMA,EAAE2H,WAAStL,KAAI,SAAC2D,UAAMA,EAAEvE,SAChDiM,EAASE,aAAa,UAAYF,EAASjM,MAC5CiM,EAASC,QAAU,CAACD,EAASjM,OAAS,GAEtCiM,EAASC,eAIjBb,EAAazI,KACf5C,YACGsL,EAA+BL,MAAK,SAACmB,UAAUA,EAAMF,qBAClDlM,QAAS,IAEbwL,EAAiB5I,KACnB5C,EAASsL,EACNvK,QAAO,SAACsL,UAAWA,EAAOC,YAC1B1L,KAAI,SAACyL,UAAWA,EAAOrM,UAExBuM,EAAY3J,KAAQ5C,EAAQ4C,EAAM4J,OAE/BxM,IAET,IAGIyM,GAAe1H,eACnB,SAACpC,EAAc3C,EAAYyL,eAAAA,IAAAA,EAAiBjC,EAAU7J,SAC/C8L,EAAO9I,KAASqF,EAAerI,QAAQgD,UAEjB8I,EAAO9I,GAA1BC,IAAAA,MAAO0I,IAAAA,WAEXF,EAAgBxI,GAAQ,KACpBoJ,EAAaV,EAEfU,EAAWhK,OAAS,EACtBgK,EAAW5K,SAAQ,SAAC6K,GAClBA,EAASC,QAAUxL,MAAMC,QAAQX,GAC7BA,EAAM0M,SAAST,EAASjM,SACtBA,KAGRgM,EAAW,GAAGE,UAAYlM,OAEnBqL,EAAazI,GACrB0I,EAA+BlK,SAAQ,SAACgL,GACvCA,EAAMF,QAAUE,EAAMpM,QAAUA,KAEzBwL,EAAiB5I,IAAUlC,MAAMC,QAAQX,GACjDsL,EAAgClK,SAAQ,SAACiL,GACxCA,EAAOC,WAAatM,EAAM0M,SAASL,EAAOrM,UAEnCuM,EAAY3J,IACjBrC,EAAWP,KAAQ4C,EAAM4J,MAAQxM,GAChCA,IAAO4C,EAAM5C,MAAQ,KAE1B4C,EAAM5C,YAAQA,EAAAA,EAAS,MAG3B,IAGIoI,GAAkBrD,eACtB,SAACpC,EAAM3C,GACL+H,GAAgBpI,QAAUyF,EACxB2C,GAAgBpI,kBACNgD,EACV3C,GACA,GAGF8E,aAAsBnC,EAAQ3C,EAAO,CAAEiF,cAAc,MAEvD,CAACH,KAGG6H,GAAuB5H,eAC3B,SACEiB,sBAOI,SALF4G,0BAAAA,oBACAnB,yBAAS5K,OAAOmF,OAAOwD,EAAU7J,YAM5ByB,SAAQ,SAACwB,OACRD,EAAOpB,EAAcqB,GAAUA,EAAgBA,MAAMD,KAAOC,MAE9DoF,EAAerI,QAAQgD,QAEvB3C,EAAQX,EAAI2G,EAAQrD,GAEnBd,EAAY7B,IAAQyM,GAAa9J,EAAM3C,GAExC4M,IACF5M,EAAQX,EAAIyI,GAAiBnI,QAASgD,GAEtCyF,GACEzF,EACCd,EAAY7B,GAAiBmI,GAAaxF,GAArB3C,UAI9B,CAACmI,GAAcC,GAAiBqE,KAG5BxF,GAAelC,eACnB,SACE5C,SAEE2B,IAAAA,OACAwD,IAAAA,qBACAuB,cAAegE,aAAW,KAE1B3F,KADAJ,aACAI,cAGG/E,EAAM,OAAO+E,OAAW1F,EAAYgD,GAAS7E,YAwC9CwF,EAtCET,EAAiB,GACjBoI,EAAU,SAACC,UACfA,EAAIjJ,EAAYA,MAAUiJ,EAAMA,EAE5B7F,IAMFxC,EAAUqI,IAAK,GAGVA,GAEHC,EAAS,SAACD,EAAW5H,UACrB4H,EAAE1G,WAAW,UACVxE,EAAYsD,IAEjB4H,EAAIA,EAAEE,QAAQ,UAAW,IACzB9H,EAAQ9F,EAAIyI,GAAiBnI,QAASoN,GAE9BlL,EAAYsD,GAAiB9F,EAAIwN,EAAUE,GAAtB5H,GALGA,EAS/BmC,GACAyF,EAAE1G,WAAW,WACblB,IACDlB,EAAckB,IAIhB4H,EAAIA,EAAEE,QAAQ,SAAU,WACxBvI,EAAUqI,IAAK,EAERtL,EAAa0D,EAAO9F,EAAImF,GAAS7E,QAASoN,KALxC5H,MASPzE,MAAMC,QAAQwB,GAChBgD,EAAQhD,EAAKvB,KAAI,SAACmM,UAChBA,EAAID,EAAQC,GACLC,EAAOD,EAAG1N,EAAImF,GAAS7E,QAASoN,YAEpC,GAAIxL,EAAcY,GAAO,KACxB+K,EAAQ/K,EACdgD,EAAQtE,OAAOC,KAAKoM,GAAOrN,QAAO,SAACsN,EAAapN,UAC9CoC,EAAO2K,EAAQI,EAAMnN,IACrBoN,EAAEpN,GAAOiN,EAAO7K,EAAM9C,EAAImF,GAAS7E,QAASwC,IACrCgL,IACN,SAEHhL,EAAO2K,EAAQ3K,GACfgD,EAAQ6H,EAAO7K,EAAM9C,EAAImF,GAAS7E,QAASwC,WAGzC+E,GAAUA,EAASxC,GAEhBS,IAET,CAACX,KAGG4I,GAASrI,eACb,SAAC5C,sBAA8D,KAAtD2B,IAAAA,OAAQwD,IAAAA,iBAAiCuF,IAAfhE,qBACjC5B,GAAa9E,EAAM,CACjB2B,OAAAA,EACAwD,iBAAAA,EACAuB,cAAegE,EACf3F,SAAU,SAACxC,UAAc4B,GAAa5B,QAE1C,CAACuC,GAAcX,KAGX+G,GAAWtI,eACf,SAAC5C,EAAM2B,UAAWmD,GAAa9E,EAAM,CAAE2B,OAAAA,MACvC,CAACmD,KAGGqG,GAAWvI,eACf,SAACpC,EAAMjB,IACLA,EAAQe,EAAWf,GACfA,EAAMrC,EAAImF,GAAS7E,QAAQ0F,OAAQ1C,IACnCjB,GAGFoD,aAAsBnC,EAAQjB,GAE9B0I,aAAsBzH,KAG1B,CAACyH,GAAatF,GAAaN,KAGvB+I,GAAcxI,eAClB,SAACpC,GACMA,EAEMjC,MAAMC,QAAQgC,GACvBA,EAAKvB,SAAQ,SAACkJ,UAAMgD,GAAShD,MAE7BgD,GAAS3K,GAJTmC,GAAY,SAAU,MAO1B,CAACwI,GAAUxI,KAGP0I,GAAuBzI,eAC3B,SAACpC,OAC+B,IAA1BqG,GAAoCQ,EAAU7J,QAAQgD,QAGlDC,EAAU4G,EAAU7J,QAAQgD,GAA5BC,SAEsB,YAA1BoG,EAAqC,OAAOpG,EAAM6K,sBAEjD,IAAMrH,KAAKxD,EAAM8K,YACV,UAANtH,GAAiBxD,EAAM8K,SAAStH,GAAI,OAAOA,KAInD,CAAC4C,IAGG2E,GAA0B5I,eAAY,kBACZ,IAA1BiE,EAAwC,GAErCnI,OAAOC,KAAK0I,EAAU7J,SAASE,QAAO,SAACwF,EAAQ1C,OAC9CjB,EAAQ8L,GAAqB7K,UACnC0C,eAAcA,EAAY3D,EAAQ0D,EAAI,GAAIzC,EAAMjB,GAAS,MAExD,MACF,CAACsH,EAAuBwE,KAErBI,GAAqB7I,eACzB8I,eAAOlL,MACAsF,GAAmBtI,QAAQgD,oBAGVsF,GAAmBtI,QAAQgD,GAC7CtD,EAAImF,GAAS7E,QAAQqG,OAAQrD,GAC7B6B,GAAS7E,QAAQqG,QAInB,MAAO8H,SAEDA,KAGV,CAACtJ,KAGGuJ,GAAyBhJ,eAAY,eACnCiJ,EAAWnN,OAAOC,KAAKmH,GAAmBtI,SAASiB,KAAI,SAAC+B,UAC5DiL,GAAmBjL,aAGdsL,QAAQ7O,IAAI4O,GAAUE,MAAK,SAAC7I,UACjCxE,OAAOC,KAAKmH,GAAmBtI,SAASE,QAAO,SAACqL,EAAKiD,EAAK9K,UACxD6H,eAAWA,EAAS7F,EAAOhC,GAAO+B,EAAI,GAAI+I,EAAK9I,EAAOhC,IAAQ,MAE7D,SAEJ,CAACuK,KAEEQ,GAAoBrJ,eACxB8I,eAAOlL,OACAiH,GAAiBjK,QAAS,OAAOgD,OAAOnB,EAAY,WAGjD6D,QAAeuE,GAAiBjK,QAAQ6E,GAAS7E,QAAQqG,eAE3DrD,EAAatD,EAAIgG,EAAQ1C,GAEtBpB,EAAc8D,GAAUA,EAAS,GACxC,MAAOyI,SAEDA,KAGV,CAAClE,GAAkBpF,KAGf6J,GAAgBtJ,eACpB8I,eAAOlL,OACC2L,EACJC,EAAgB3E,GAAiBjK,UACjC4O,EAAgBtG,GAAmBtI,QAAQgD,IAEzC2L,GAAmBxJ,GAAY,gBAAgB,WAG3CpD,QACG0M,GAAkBzL,UAClBiL,GAAmBjL,IAC1B6K,GAAqB7K,UAEvB2K,GAAS3K,EAAMjB,GACX4M,GAAmBxJ,GAAY,gBAAgB,GAE5CpD,EACP,MAAOoM,UACAA,KAGX,CACElE,GACA4D,GACAI,GACAQ,GACAd,GACAxI,KAIE0J,GAA+BzJ,eACnC,SAACpC,UKhiBWuE,ELgiBiB,kBAAMmH,GAAc1L,KK9hBjD8L,OAAOC,qBACN,SAACC,OACMC,EAAQpO,KAAKqO,aACZC,YACL,kBACEH,EAAG,CACDI,YAAY,EACZC,gCACEC,KAAKC,IAAI,EAAG,IAAM1O,KAAKqO,MAAQD,SAErC,KAGJ1H,EAAU,CAAEiI,QAAS,UAfTjI,ILiiBZ,CAACmH,KAGGe,GAAerK,eAAY,kBAC/BD,GAAY,gBAAgB,GAErBmJ,QAAQ7O,IAAI,CACjBuO,KACAI,KACAK,OACCF,MAAK,SAAC7I,OACDgK,EAAOpO,eAAaoE,UAE1BP,GAAY,SAAUuK,GACtBvK,GAAY,gBAAgB,GAErBuK,OAER,CACD1B,GACAI,GACAK,GACAtJ,KAGIwK,GAAgBvK,eACpB,SAACpC,UACMA,EAEDjC,MAAMC,QAAQgC,GACTsL,QAAQ7O,IAAIuD,EAAK/B,KAAI,SAAC0J,UAAM+D,GAAc/D,OAAK4D,MACpD,SAAC7I,UAAYpD,EAAQoD,GAAQrD,UAG1BqM,GAAc1L,GAAMuL,MAAK,SAACxM,UAAWA,KAP1B0N,KAAelB,MAAK,SAAC7I,UAAWpB,EAAcoB,QASlE,CAACgJ,GAAee,KAGZG,GAAaxK,eACjB,SAACpC,EAAMiF,EAAkB4H,YAAlB5H,IAAAA,GAAY,YAAM4H,IAAAA,EAAiBzG,GACpCnB,EACF9C,cAAuBnC,GAAQ,GAE/ByH,cAAuBzH,GAGrB6M,GAAgBhB,GAA6B7L,KAEnD,CAACyH,GAAatF,GAAa0J,GAA8BzF,IAGrDV,GAA0BtD,eAC9B,SAACpC,UACC4M,GACE5M,GACA,EACAmG,EAAmBnG,IAASuF,EAAgBvI,aAAU6B,KAE1D,CAAC+N,GAAYzG,IAGT2G,GAAW1K,eACf,SAACpC,EAAM6C,YAAAA,IAAAA,GAAU,GACXA,EACFV,YAAqBnC,GAAQ,GAE7ByH,YAAqBzH,KAGzB,CAACyH,GAAatF,KAGV4K,GAAmB3K,eACvB,SAACpC,UACC8M,GACE9M,GACCuC,SACC7F,EAAImF,GAAS7E,QAAQqG,OAAQrD,GAC7BtD,EAAI0I,GAAgBpI,QAAQqG,OAAQrD,OAG1C,CAAC8M,GAAUjL,KAGPmL,GAAW5K,eACf,SACEpC,EACA3C,sBAKI,SAHFwP,eAAAA,aAAiB1G,QACjB8G,cAAAA,oBACAC,YAAAA,gBAGF7P,EAAQyC,EAAWzC,GACfA,EAAMX,EAAImF,GAAS7E,QAAQqG,OAAQrD,IACnC3C,EAEC6B,EAAY7B,GAGfoK,aAAsBzH,GAFtBmC,aAAsBnC,EAAQ3C,GAIhCyM,GAAa9J,EAAM3C,GAEf4P,GAAeL,GAAW5M,GAAM,GAAM,GACtCkN,GAAaH,GAAiB/M,GAC9B6M,GAAgBhB,GAA6B7L,KAEnD,CACEyH,GACAsF,GACAjD,GACA3H,GACAyK,GACA/K,GACAgK,GACA1F,IAIEgH,GAAa/K,eACjB,iBAAO,CACLsI,SAAAA,GACAsC,SAAAA,GACAJ,WAAAA,GACAE,SAAAA,GACAnC,SAAAA,GACAC,YAAAA,GACA+B,cAAAA,GACAS,MAAAA,GACAC,OAAAA,UAMED,GAAkBhL,eACtB,SAACiB,EAAQgF,EAAStC,SACZA,GAAAA,EAAGuH,gBAAgBvH,EAAEuH,uBACrBvH,GAAAA,EAAGwH,iBAAiBxH,EAAEwH,sBAEpB/K,eAAaX,GAAS7E,SACtBwQ,EAAOxG,EAAWqB,GAAW,IAEnCnK,OAAOC,KAAKqE,GAAO/D,SAAQ,SAACrB,OACtBoQ,EAAKpQ,MAEG,WAARA,EAAkB,KACdqQ,GACH3N,EAAWuD,GAAUA,EAAOxB,GAAS7E,QAAQqG,QAAUA,IACxD+B,GAAgBpI,QAAQqG,OAE1Bb,EAAMpF,GAAOqQ,EACbrI,GAAgBpI,QAAUyF,EACxB2C,GAAgBpI,QAChB,SACAyQ,GACA,GAEFzD,GAAqByD,EAAY,CAC/BxD,2BAA2B,SAI7BzH,EAAMpF,GAAOgI,GAAgBpI,QAAQI,MAIzC+E,GAAY,GAAIK,GAChB0E,GAAWlK,QAAQwF,EAAMa,OAAQ8J,KAAcpH,KAEjD,CAACoH,GAAYjG,GAAY8C,GAAsB7H,GAAaN,KAGxDwL,GAAoBjL,eACxB8I,eAAOnF,SACDA,GAAAA,EAAGuH,gBAAgBvH,EAAEuH,uBACrBvH,GAAAA,EAAGwH,iBAAiBxH,EAAEwH,sBAEpBG,EAAcxP,OAAOC,kBACtB0I,EAAU7J,QACVqI,EAAerI,UACjBE,QAAO,SAAC8B,EAASgB,UAClBhB,EAAUyD,EAAIzD,EAASgB,GAAM,GAAM,KAElC6B,GAAS7E,QAAQgC,SAEpBmD,GAAY,UAAWuL,GACvBvL,GAAY,gBAAgB,WAGpBO,QAAe+J,YAEhBnL,EAAcoB,UAMbyE,GAAYnK,QAAQ6E,GAAS7E,QAAQqG,OAAQ8J,KAAcpH,GACjE5D,GAAY,eAAe,GAEpB,CAAEkB,OAAQxB,GAAS7E,QAAQqG,UARhC+D,GAAWpK,QAAQ0F,EAAQyK,KAAcpH,GAElC,CAAErD,OAAAA,IAOX,MAAOyI,SAEDA,UAENhJ,GAAY,gBAAgB,MAGhC,CAACgL,GAAY/F,GAAYD,GAAahF,GAAaN,GAAU4K,KAGzD9G,GAAoBvD,eACxB,SAACpC,EAAM3C,GACL8E,aAAsBnC,EAAQ3C,GAC9B0P,GAAiB/M,GAEbmG,GAAkB0F,GAA6B7L,KAErD,CACE+M,GACA5K,GACA0J,GACA1F,IAIEP,GAAcxD,eAClB,SAACpC,GACCyH,aAAsBzH,GACtByH,cAAuBzH,GACvByH,YAAqBzH,GACrByH,aAAsBzH,GAEtBoF,GAAgBpI,QAAU8D,EACxBsE,GAAgBpI,kBACNgD,GACV,UAGK8G,EAAgB9J,QAAQgD,UACxBsF,GAAmBtI,QAAQgD,UAC3BqF,EAAerI,QAAQgD,KAEhC,CAACyH,KAGGkG,GAAevL,eACnB,SAACwL,MACMA,GAELhH,EAAQ5J,QAAU4Q,MACZ/F,EAAOjB,EAAQ5J,QAErB6J,EAAU7J,QAAU4K,GAAUC,GAC9BmC,GAAqB5E,GAAgBpI,QAAQqG,QAE7CsD,EAAY3J,QAAQ6Q,OAAS,gBACnB7N,IADsBmB,OACtBnB,QAEHA,GAKD6G,EAAU7J,QAAQgD,KAAUqF,EAAerI,QAAQgD,GAAO,OACtDyE,WAAQqC,EAAgB9J,QAAQgD,WAAxB8N,EAA+BrJ,MACvCpH,EAAQmI,GAAaxF,GAE3B2F,GAAkB3F,EAAMyE,EAAQA,EAAMpH,GAASA,GAC/CkI,EAAgBvI,QAAUgD,IAI9B2G,EAAY3J,QAAQ+Q,KAAO,gBAAG5M,IAAAA,UACvB8E,EAAe9E,QAEZnB,EAASmB,EAATnB,KAEJ6G,EAAU7J,QAAQgD,KAAUqF,EAAerI,QAAQgD,KACrD0F,GAAwB1F,GACxBuF,EAAgBvI,aAAU6B,KAI9B8H,EAAY3J,QAAQqQ,OAAS,SAACtH,UAAasH,GAAOtH,IAElDY,EAAY3J,QAAQoQ,MAAQ,SAACrH,UAAaqH,GAAM,KAAM,KAAMrH,IAE5D8B,EAAKmG,iBAAiB,QAASrH,EAAY3J,QAAQ6Q,QACnDhG,EAAKmG,iBAAiB,WAAYrH,EAAY3J,QAAQ+Q,MACtDlG,EAAKmG,iBAAiB,SAAUrH,EAAY3J,QAAQqQ,QACpDxF,EAAKmG,iBAAiB,QAASrH,EAAY3J,QAAQoQ,OAEnD/I,EAAYrH,QAAU,IAAIiR,kBAAiB,eAC5B,mBADgC/N,UAGvC4I,EAASlB,GAAUC,GAErB3C,GACFhH,OAAOC,KAAK0I,EAAU7J,SAASyB,SAAQ,SAACuB,eAClCqF,EAAerI,QAAQgD,MAEtB8I,EAAO9I,QAKNkO,WAAcrH,EAAU7J,QAAQgD,GAAM2I,gBAAxBwF,EAChB9O,OACE+O,WAActF,EAAO9I,GAAM2I,gBAAb0F,EAAsBhP,OAEtC6O,EAAcE,EAChBjM,aAAsBnC,EAAQwF,GAAaxF,EAAM8I,GAAS,CACxDxG,cAAc,IAEP4L,EAAcE,GACvBtE,GACE9J,EACAtD,EAAI0I,GAAgBpI,QAAQqG,OAAQrD,GACpC8I,QAhBFlD,GAAY5F,UAqBdqD,EAAS8B,GAAiBnI,QACxBsR,EAAuB,GAE7BpQ,OAAOC,KAAK2K,GAAQrK,SAAQ,SAACuB,OACvB6G,EAAU7J,QAAQgD,KAASqF,EAAerI,QAAQgD,QAEhD3C,EAAQX,EAAImF,GAAS7E,QAAQqG,OAAQrD,GACtCd,EAAY7B,KAAQgG,EAASZ,EAAIY,EAAQrD,EAAM3C,GAAO,IAE3DiR,EAAWhL,KAAKtD,OAGlB6G,EAAU7J,QAAU8L,EAChBwF,EAAWjP,QACb2K,GAAqB3G,EAAQ,CAAEyF,OAAQwF,QAG3CjK,EAAYrH,QAAQuR,QAAQ1G,EAAM,CAAE2G,WAAW,EAAMC,SAAS,OAEhE,CACE7G,GACApC,GACAG,GACAC,GACAwH,GACAtD,GACAE,GACA7H,GACAuD,GACAR,EACArD,GACAwL,KAIEqB,GAAgBtM,eACpB,SAACuM,UAAsB,SAAC1O,YAEnBA,GAAAA,EAAOD,OACRqF,EAAerI,QAAQiD,EAAMD,QAC7B+G,EAAiB/J,QAAQiD,EAAMD,SAI7BF,EAAW6O,GACbrJ,GAAmBtI,QAAQiD,EAAMD,MAAQ2O,WAIzBC,EAA0BD,EAApCnK,SAAwBqK,YAAYF,gBAExCC,IAAWtJ,GAAmBtI,QAAQiD,EAAMD,MAAQ4O,GACxD9H,EAAgB9J,QAAQiD,EAAMD,MAAQ6O,MAExC,W5Bx5Be,SAAClS,EAAwBuH,GACtCvH,EACFF,EAAIE,GAAMuH,EAEV1H,EAAM0H,E4Bu5BRW,CAAWlI,EAAI,CACbuI,kBAAAA,EACAC,iBAAAA,GACAC,gBAAAA,GACAC,eAAAA,EACAC,mBAAAA,GACAC,gBAAAA,EACAwB,iBAAAA,EACAvB,aAAAA,GACAlB,aAAAA,GACAmB,gBAAAA,GACAC,wBAAAA,GACAC,kBAAAA,GACAC,YAAAA,GACAhC,kBAAAA,GACAE,oBAAAA,GACA+D,KAAM8F,GACN1N,MAAOyO,GACPjE,OAAAA,GACAC,SAAAA,GACAsC,SAAAA,GACAJ,WAAAA,GACAE,SAAAA,GACAnC,SAAAA,GACAC,YAAAA,GACA+B,cAAAA,GACAS,MAAAA,GACAC,OAAAA,KAGFtQ,aACE,kBAAM,cACA6J,EAAQ5J,QAAS,OACb8R,EAAWnI,EAAY3J,QAE7B4J,EAAQ5J,QAAQ+R,oBAAoB,QAASD,EAASjB,QACtDjH,EAAQ5J,QAAQ+R,oBAAoB,WAAYD,EAASf,MACzDnH,EAAQ5J,QAAQ+R,oBAAoB,SAAUD,EAASzB,QACvDzG,EAAQ5J,QAAQ+R,oBAAoB,QAASD,EAAS1B,gBACtD/I,EAAYrH,YAASgS,c5B17BP,SAACrS,GACjBA,SACKF,EAAIE,GAEXH,OAAMqC,E4By7BJgG,CAAclI,MAEhB,CAACA,IAGI,CACLkL,KAAM8F,GACN1N,MAAOyO,GACPjE,OAAAA,GACAC,SAAAA,GACAsC,SAAAA,GACAJ,WAAAA,GACAE,SAAAA,GACAnC,SAAAA,GACAC,YAAAA,GACA+B,cAAAA,GACAS,MAAAA,GACAC,OAAAA,qCMx9BFrJ,OAEME,EAAUxH,EAAIsH,UAEpBI,IAoBO,CACLyD,KAHE3D,EAZF2D,KAgBA5H,MAJEiE,EAXFjE,MAgBAwK,OALEvG,EAVFuG,OAgBAC,SANExG,EATFwG,SAgBAsC,SAPE9I,EARF8I,SAgBAJ,WARE1I,EAPF0I,WAgBAE,SATE5I,EANF4I,SAgBAnC,SAVEzG,EALFyG,SAgBAC,YAXE1G,EAJF0G,YAgBA+B,cAZEzI,EAHFyI,cAgBAS,MAbElJ,EAFFkJ,MAgBAC,OAdEnJ,EADFmJ"}