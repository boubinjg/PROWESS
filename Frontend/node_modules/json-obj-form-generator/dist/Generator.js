"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("./utils");

var _generator = require("./components/generator");

var _designer = require("./components/designer");

var _shared = require("./components/shared");

var _icons = require("./components/generator/icons");

var _reactstrap = require("reactstrap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Generator = /*#__PURE__*/function (_Component) {
  _inherits(Generator, _Component);

  var _super = _createSuper(Generator);

  function Generator() {
    var _this;

    _classCallCheck(this, Generator);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      errors: [],
      meta: {},
      defaults: {},
      req: {},
      json: [],
      valid: [],
      flag: false,
      fatal_error: false
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (unique_id, value) {
      var prevVal = this.state.meta;
      var prevErr = this.state.errors;

      if (value === null || value === undefined) {
        delete prevVal[unique_id];
        prevErr[unique_id] = {
          invalid: false
        };
      } else {
        prevVal[unique_id] = value["value"];
        prevErr[unique_id] = value["errors"];
      }

      this.setState({
        meta: prevVal,
        errors: prevErr,
        flag: true
      });
      var invalid = (0, _generator.invalidCheck)(prevErr);

      var val = _generator.metaTo[this.props.mode](prevVal, this.state.defaults, this.state.req, prevErr, this.props.sep);

      if (this.props.onChange) {
        this.props.onChange(val, !invalid);
      }

      if (this.props.isValid) {
        this.props.isValid(!invalid);
      }
    }.bind(_assertThisInitialized(_this)));

    return _this;
  }

  _createClass(Generator, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      try {
        var uids = (0, _designer.getUids)(this.props.json);
        var meta = (0, _designer.jsonToMeta)(this.props.json);
        var valid = (0, _designer.jsonValid)(meta);

        if (!(0, _designer.isValid)(uids, valid, this.props.mode)) {
          if (this.props.isValid) {
            this.props.isValid(false);
          }

          return {
            fatal_error: true,
            flag: true
          };
        }

        var nextState = {
          fatal_error: false
        };

        if (this.props.value !== undefined) {
          meta = _generator.toMeta[this.props.mode](this.props.json, this.props.value, this.props.sep);
          nextState.meta = meta[0];
          nextState.errors = meta[1];
          nextState.defaults = meta[2];
          nextState.req = meta[3];
          nextState.json = this.props.json;
        } else {
          meta = (0, _generator.jsonToMeta_Tree)(this.props.json);
          nextState.meta = meta[0];
          nextState.errors = meta[1];
          nextState.defaults = meta[2];
          nextState.req = meta[3];
          nextState.json = this.props.json;
        }

        var invalid = (0, _generator.invalidCheck)(nextState.errors);

        var val = _generator.metaTo[this.props.mode](nextState.meta, nextState.defaults, nextState.req, nextState.errors, this.props.sep);

        if (this.props.onChange && val !== undefined) {
          this.props.onChange(val, !invalid && Array.isArray(this.props.json));
        }

        if (this.props.isValid) {
          this.props.isValid(!invalid && Array.isArray(this.props.json));
        }
      } catch (_unused) {
        if (this.props.isValid) {
          this.props.isValid(false);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      if (this.state.fatal_error) {
        return /*#__PURE__*/_react.default.createElement("div", {
          className: "".concat(this.props.className !== undefined ? this.props.className : "", " jofgen-fatal-error"),
          style: this.props.style
        }, this.props.fatal_error_icon, /*#__PURE__*/_react.default.createElement("div", {
          className: "jofgen-text-fatal-error"
        }, this.props.fatal_error_msg));
      }

      var genaliaseskeys = Object.keys(_shared.generator_aliases);
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "row " + (this.props.className ? this.props.className : ""),
        style: this.props.style
      }, this.state.json.map(function (item, idx) {
        var Tag;
        var gen;

        if (genaliaseskeys.includes(item.type)) {
          gen = _shared.generator_aliases[item.type];
        } else {
          gen = _shared.generator_aliases.err;
        }

        Tag = gen.tag;

        if (gen.useContainer) {
          return /*#__PURE__*/_react.default.createElement(_react.Fragment, {
            key: idx
          }, /*#__PURE__*/_react.default.createElement(_generator.Container, _extends({}, item, {
            sm: item.sm !== undefined && item.sm !== null && ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"].includes(item.sm) ? item.sm : _this2.props.sm !== undefined && _this2.props.sm !== null && ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"].includes(_this2.props.sm) ? _this2.props.sm : "12",
            req_indicator: _this2.props.req_indicator
          }), /*#__PURE__*/_react.default.createElement(Tag, _extends({}, item, {
            mode: _this2.props.mode,
            errors: _this2.state.errors[item.uid],
            value: _this2.state.meta[item.uid],
            className: _this2.props.className,
            size: _this2.props.size,
            jkey: _this2.props.jkey,
            invalid: false,
            sm: _this2.props.sm,
            onChange: function onChange(id, val) {
              _this2.onChange(id, val);
            },
            isValid: function isValid() {},
            invalidCheck: _generator.invalidCheck,
            generator_aliases: _shared.generator_aliases,
            req_indicator: _this2.props.req_indicator
          }))));
        } else {
          return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactstrap.Col, {
            sm: item.sm !== undefined && item.sm !== null && ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"].includes(item.sm) ? item.sm : _this2.props.sm !== undefined && _this2.props.sm !== null && ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"].includes(_this2.props.sm) ? _this2.props.sm : "12"
          }, /*#__PURE__*/_react.default.createElement(Tag, _extends({}, item, {
            mode: _this2.props.mode,
            errors: _this2.state.errors[item.uid],
            value: _this2.state.meta[item.uid],
            className: _this2.props.className,
            size: _this2.props.size,
            req_indicator: _this2.props.req_indicator,
            jkey: _this2.props.jkey,
            invalid: false,
            sm: _this2.props.sm,
            onChange: function onChange(id, val) {
              _this2.onChange(id, val);
            },
            isValid: function isValid() {},
            invalidCheck: _generator.invalidCheck,
            generator_aliases: _shared.generator_aliases
          }))));
        }
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (!prevState.flag) {
        if (!Array.isArray(nextProps.json)) {
          console.error("Parameter JSON must be array");

          if (nextProps.isValid) {
            nextProps.isValid(false);
          }

          return {
            fatal_error: true,
            flag: true
          };
        }

        try {
          var uids = (0, _designer.getUids)(nextProps.json);
          var meta = (0, _designer.jsonToMeta)(nextProps.json);
          var valid = (0, _designer.jsonValid)(meta);

          if (!(0, _designer.isValid)(uids, valid, nextProps.mode)) {
            if (nextProps.isValid) {
              nextProps.isValid(false);
            }

            return {
              fatal_error: true,
              flag: true
            };
          }

          var nextState = {
            fatal_error: false
          };

          if (nextProps.value !== undefined) {
            meta = _generator.toMeta[nextProps.mode](nextProps.json, nextProps.value, nextProps.sep);
            nextState.meta = meta[0];
            nextState.errors = meta[1];
            nextState.defaults = meta[2];
            nextState.req = meta[3];
            nextState.json = nextProps.json;
          } else {
            meta = (0, _generator.jsonToMeta_Tree)(nextProps.json);
            nextState.meta = meta[0];
            nextState.errors = meta[1];
            nextState.defaults = meta[2];
            nextState.req = meta[3];
            nextState.json = nextProps.json;
          }

          return nextState;
        } catch (_unused2) {
          if (nextProps.isValid) {
            nextProps.isValid(false);
          }

          return {
            fatal_error: true,
            flag: true
          };
        }
      } else {
        return {
          flag: false
        };
      }
    }
  }]);

  return Generator;
}(_react.Component);

exports.default = Generator;
Generator.propTypes = {
  onChange: _propTypes.default.func,
  isValid: _propTypes.default.func,
  json: function json(props, propName, componentName) {
    if (props[propName] === undefined) {
      return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value is required, otherwise there is nothing to generate here."));
    }

    if (!Array.isArray(props[propName])) {
      return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be object or array of objects."));
    }

    var uids = (0, _designer.getUids)(props[propName]);
    var meta = (0, _designer.jsonToMeta)(props[propName]);
    var valid = (0, _designer.jsonValid)(meta);

    if (!(0, _designer.isValid)(uids, valid, props["mode"])) {
      return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. JSON object is not valid - some IDs are not unique."));
    }
  },
  value: _propTypes.default.object,
  mode: _propTypes.default.oneOf(["tree", "linear", "linear_merge"]),
  sep: _propTypes.default.string,
  req_indicator: _propTypes.default.any,
  size: _propTypes.default.string,
  jkey: _propTypes.default.shape(_utils.keyPropType),
  sm: _propTypes.default.oneOf(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]),
  fatal_error_msg: _propTypes.default.string.isRequired,
  fatal_error_icon: _propTypes.default.any.isRequired
};
Generator.defaultProps = {
  mode: "linear",
  jkey: _utils.Default_GkeyPropType,
  json: [],
  sep: ".",
  sm: "12",
  size: "sm",
  req_indicator: "*",
  fatal_error_icon: _icons.fatal_error,
  fatal_error_msg: "Ooops... Something went wrong. Unable to render form."
};