"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.idGenerator = idGenerator;
exports.unique_id_test = exports.unique_id_test_tree = exports.unique_id_test_linear = exports.Default_EXDkeyPropType = exports.Default_DkeyPropType = exports.Default_GkeyPropType = exports.keyPropType = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sufix = {};

function idGenerator() {
  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'id';

  if (sufix[prefix] === undefined) {
    sufix[prefix] = 0;
  }

  sufix[prefix]++;
  return "".concat(prefix).concat(sufix[prefix]);
}

var keyPropType = {
  prefix: _propTypes.default.string.isRequired,
  sufix: _propTypes.default.string.isRequired
};
exports.keyPropType = keyPropType;
var Default_GkeyPropType = {
  prefix: "jofgenGEN-",
  sufix: ""
};
exports.Default_GkeyPropType = Default_GkeyPropType;
var Default_DkeyPropType = {
  prefix: "jofgenDES-",
  sufix: ""
};
exports.Default_DkeyPropType = Default_DkeyPropType;
var Default_EXDkeyPropType = {
  prefix: "jofgenEXD-",
  sufix: ""
};
exports.Default_EXDkeyPropType = Default_EXDkeyPropType;

var unique_id_test_linear = function unique_id_test_linear(obj) {
  var uq = [];

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      uq.push(obj[i].uid);

      if (obj[i].sub && Array.isArray(obj[i].sub)) {
        uq.concat(unique_id_test_linear(obj[i].sub));
      }
    }
  } else {
    uq.concat(obj.uid);

    if (obj.sub && Array.isArray(obj.sub)) {
      uq.concat(unique_id_test_linear(obj.sub));
    }
  }

  return uq;
};

exports.unique_id_test_linear = unique_id_test_linear;

var unique_id_test_tree = function unique_id_test_tree(obj, parent, sep) {
  var uq = [];

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      uq.push(parent + obj[i].uid);

      if (obj[i].sub && Array.isArray(obj[i].sub)) {
        uq.concat(unique_id_test_tree(obj[i].sub, parent + obj[i].uid + sep));
      }
    }
  } else {
    uq.concat(parent + obj.uid);

    if (obj.sub && Array.isArray(obj.sub)) {
      uq.concat(unique_id_test_tree(obj.sub, parent + obj.uid + sep));
    }
  }

  return uq;
};

exports.unique_id_test_tree = unique_id_test_tree;

var unique_id_test = function unique_id_test(obj, mode, sep) {
  var list = [];
  var i;
  list = unique_id_test_linear(obj);

  for (i = 0; i < list.length; i++) {
    if (list.indexOf(list[i], i)) {
      return false;
    }
  }

  return true;
};

exports.unique_id_test = unique_id_test;