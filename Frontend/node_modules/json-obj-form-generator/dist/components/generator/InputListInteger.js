"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getValue = exports.getErrors = exports.InputListInteger = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactstrap = require("reactstrap");

var _icons = require("./icons");

var _reactTransitionGroup = require("react-transition-group");

var _validators = require("./validators");

var _utils = require("./utils");

var _propTypes2 = require("./propTypes");

var _Clearer = _interopRequireDefault(require("./Clearer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InputListInteger = /*#__PURE__*/function (_Component) {
  _inherits(InputListInteger, _Component);

  var _super = _createSuper(InputListInteger);

  function InputListInteger() {
    var _this;

    _classCallCheck(this, InputListInteger);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      gId: (0, _utils.idGenerator)(_this.props.jkey.prefix + "il-int" + _this.props.jkey.sufix),
      preloaded: false
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (e) {
      var validation_result = valid(e.target.value, this.props);
      var val = this.props.value;
      var err = this.props.errors;

      switch (e.target.name) {
        case "value-new":
          err.new_value = e.target.value;
          err.new_min = err.new_value.length === 0 || validation_result[0];
          err.new_max = validation_result[1];
          err.new_type = err.new_value.length === 0 || validation_result[2];
          err.new_invalid = err.new_value.length > 0 && !validation_result[3];
          err.new_value = err.new_type && e.target.value.length > 0 ? (0, _validators.filterInt)(String(e.target.value)) : e.target.value;
          break;

        default:
          var idx = parseInt(e.target.name.replace("value-", ""));
          val[idx] = e.target.value;
          err.emin[idx] = validation_result[0];
          err.emax[idx] = validation_result[1];
          err.etype[idx] = validation_result[2];
          err.invalidArr[idx] = !validation_result[3];
          err.err_req = this.props.required && val.length === 0 && err.err_minNo;
          err.invalid = err.err_minNo || err.err_maxNo || err.invalidArr.includes(true);
          val[idx] = err.etype[idx] && e.target.value.length > 0 ? (0, _validators.filterInt)(String(e.target.value)) : e.target.value;
      }

      if (this.props.onChange !== undefined) {
        this.props.onChange(this.props.uid, {
          value: val,
          errors: err
        }, !err.invalid);
      }

      if (this.props.isValid !== undefined) {
        this.props.isValid(!err.invalid);
      }
    }.bind(_assertThisInitialized(_this)));

    _defineProperty(_assertThisInitialized(_this), "onAdd", function (e) {
      var val = this.props.value;
      var err = this.props.errors;
      var test = valid(err.new_value, this.props);

      if (val === null) {
        val = [];
      }

      val.push(err.new_value);
      err.emin.push(test[0]);
      err.emax.push(test[1]);
      err.etype.push(test[2]);
      err.invalidArr.push(!test[3]);
      err.err_minNo = (0, _validators.intValid)(this.props.minNo) && (0, _validators.filterInt)(this.props.minNo) > val.length;
      err.err_maxNo = (0, _validators.intValid)(this.props.maxNo) && (0, _validators.filterInt)(this.props.maxNo) < val.length;
      err.invalid = err.err_minNo || err.err_maxNo || err.invalidArr.includes(true);
      err.err_req = this.props.required && val.length === 0 && err.err_minNo;
      err.warn_def = true;
      err.new_invalid = false;
      err.new_min = false;
      err.new_max = false;
      err.new_type = false;
      err.new_value = "";

      if (this.props.onChange !== undefined) {
        this.props.onChange(this.props.uid, {
          value: val,
          errors: err
        }, !err.invalid);
      }

      if (this.props.isValid !== undefined) {
        this.props.isValid(!err.invalid);
      }
    }.bind(_assertThisInitialized(_this)));

    _defineProperty(_assertThisInitialized(_this), "onDrop", function (e) {
      var val = this.props.value;
      var err = this.props.errors;
      var idx = parseInt(e.currentTarget.value.replace("btn-", ""));
      val.splice(idx, 1);
      err.invalidArr.splice(idx, 1);
      err.emin.splice(idx, 1);
      err.emax.splice(idx, 1);
      err.etype.splice(idx, 1);
      err.warn_def = !(val.length === 0 && this.props.default && Array.isArray(this.props.default) && this.props.required && (0, _validators.intValid)(this.props.minNo) && (0, _validators.filterInt)(this.props.minNo) <= this.props.default.length && (0, _validators.filterInt)(this.props.minNo) > 0);
      err.err_minNo = err.warn_def && (!this.props.required && val === null || (0, _validators.intValid)(this.props.minNo) && (0, _validators.filterInt)(this.props.minNo) > val.length);
      err.err_maxNo = err.warn_def && (0, _validators.intValid)(this.props.maxNo) && (0, _validators.filterInt)(this.props.maxNo) < val.length;
      err.invalid = err.err_minNo || err.err_maxNo || err.invalidArr.includes(true);
      err.err_req = this.props.required && val.length === 0 && err.err_minNo;
      var sinvalid = [];

      if (val.length === 0 && this.props.required && this.props.default && this.props.minNo !== undefined && this.props.minNo > 0) {
        var err_minNo = (0, _validators.intValid)(this.props.minNo) && (0, _validators.filterInt)(this.props.minNo) > this.props.default.length;
        var err_maxNo = (0, _validators.intValid)(this.props.maxNo) && (0, _validators.filterInt)(this.props.maxNo) < this.props.default.length;
        err.err_req = this.props.required && val.length === 0 && err_minNo;

        for (var i = 0; i < this.props.default.length; i++) {
          sinvalid.push(!valid(this.props.default[i], this.props)[3]);
        }

        err.invalid = err_minNo || err_maxNo || sinvalid.includes(true);
      }

      if (this.props.onChange !== undefined) {
        this.props.onChange(this.props.uid, {
          value: val,
          errors: err
        }, !err.invalid);
      }

      if (this.props.isValid !== undefined) {
        this.props.isValid(!err.invalid);
      }
    }.bind(_assertThisInitialized(_this)));

    _defineProperty(_assertThisInitialized(_this), "Clear", function () {
      var err = {
        warn_def: false,
        invalidArr: [],
        invalid: false,
        emax: [],
        emin: [],
        etype: [],
        new_value: "",
        new_invalid: false,
        new_min: false,
        new_max: false,
        new_type: false,
        err_maxNo: false,
        err_minNo: false,
        err_req: false
      };

      if (this.props.onChange !== undefined) {
        this.props.onChange(this.props.uid, {
          value: null,
          errors: err
        }, !err.invalid);
      }

      if (this.props.isValid !== undefined) {
        this.props.isValid(!err.invalid);
      }
    }.bind(_assertThisInitialized(_this)));

    _defineProperty(_assertThisInitialized(_this), "showInfoPopUp", function () {
      _this.setState({
        popUp: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "hideInfoPopUp", function () {
      _this.setState({
        popUp: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "showInfoPopUpEmpty", function () {
      _this.setState({
        popUpEmpty: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "hideInfoPopUpEmpty", function () {
      _this.setState({
        popUpEmpty: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "showInfoPopUpDefault", function () {
      _this.setState({
        popUpDefault: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "hideInfoPopUpDefault", function () {
      _this.setState({
        popUpDefault: false
      });
    });

    return _this;
  }

  _createClass(InputListInteger, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var new_element;

      if (this.props.value === null || this.props.value !== null && (!(0, _validators.intValid)(this.props.maxNo) || (0, _validators.filterInt)(this.props.maxNo) > this.props.value.length)) {
        new_element = /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
          key: this.state.gId + "-new",
          row: true,
          className: "jofgen-card-lst-row"
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.Col, null, /*#__PURE__*/_react.default.createElement("table", {
          className: "jofgen-card-lst-table"
        }, /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
          name: "value-new",
          type: "text",
          bsSize: this.props.size,
          value: this.props.errors.new_value,
          invalid: this.props.errors.new_invalid,
          placeholder: this.props.placeholder,
          onChange: this.onChange
        }), /*#__PURE__*/_react.default.createElement(_reactstrap.FormFeedback, {
          hidden: this.props.errors.new_type,
          color: "danger"
        }, this.props.err_type), /*#__PURE__*/_react.default.createElement(_reactstrap.FormFeedback, {
          hidden: this.props.errors.new_min,
          color: "danger"
        }, this.props.err_min), /*#__PURE__*/_react.default.createElement(_reactstrap.FormFeedback, {
          hidden: this.props.errors.new_max,
          color: "danger"
        }, this.props.err_max)), /*#__PURE__*/_react.default.createElement("td", {
          className: "btns"
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
          className: "btn-add",
          color: "light",
          size: "sm",
          onClick: this.onAdd
        }, this.props.icons.add))))))));
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: "jofgen-card-lst"
      }, /*#__PURE__*/_react.default.createElement(_Clearer.default, _extends({}, this.props, {
        clear: this.Clear
      }), /*#__PURE__*/_react.default.createElement("div", {
        className: "jofgen-list-body" + (!this.props.required ? "-mr" : "")
      }, new_element, !this.props.errors.warn_def && this.props.required ? /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
        color: "info"
      }, this.props.warn_def, ": [", this.props.default.map(function (value, key) {
        return "\"" + value + (_this2.props.default.length - 1 !== key ? "\", " : "\"");
      }), "]") : null, this.props.errors.err_req ? /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
        color: "danger"
      }, this.props.err_req) : null, this.props.errors.err_minNo ? /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
        color: "danger"
      }, this.props.err_minNo) : null, this.props.errors.err_maxNo ? /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
        color: "danger"
      }, this.props.err_maxNo) : null, /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.TransitionGroup, null, this.props.value !== null && Array.isArray(this.props.value) ? this.props.value.map(function (item, idx) {
        return /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
          key: idx,
          classNames: "jofgen-card-lst-row-item",
          timeout: 50
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
          row: true,
          className: "jofgen-card-lst-row"
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.Col, null, /*#__PURE__*/_react.default.createElement("table", {
          className: "jofgen-card-lst-table"
        }, /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
          name: "value-" + idx,
          type: "text",
          bsSize: _this2.props.size,
          value: item,
          invalid: _this2.props.errors.invalidArr[idx],
          onChange: _this2.onChange
        }), /*#__PURE__*/_react.default.createElement(_reactstrap.FormFeedback, {
          hidden: _this2.props.errors.emin[idx],
          color: "danger"
        }, _this2.props.err_min), /*#__PURE__*/_react.default.createElement(_reactstrap.FormFeedback, {
          hidden: _this2.props.errors.emax[idx],
          color: "danger"
        }, _this2.props.err_max), /*#__PURE__*/_react.default.createElement(_reactstrap.FormFeedback, {
          hidden: _this2.props.errors.etype[idx],
          color: "danger"
        }, _this2.props.err_type)), /*#__PURE__*/_react.default.createElement("td", {
          className: "btns"
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
          className: "btn-remove",
          value: "btn-" + idx,
          color: "light",
          size: "sm",
          onClick: _this2.onDrop
        }, _this2.props.icons.drop))))))));
      }) : null))));
    }
  }]);

  return InputListInteger;
}(_react.Component);

exports.InputListInteger = InputListInteger;

var valid = function valid(value, props) {
  var valid = [];
  var iValue = (0, _validators.filterInt)(String(value));
  var validValue = (0, _validators.intValid)(String(value));

  if (props.min !== undefined && !isNaN(props.min) && validValue) {
    valid.push(iValue >= props.min);
  } else {
    valid.push(true);
  }

  if (props.max !== undefined && !isNaN(props.max) && validValue) {
    valid.push(iValue <= props.max);
  } else {
    valid.push(true);
  }

  valid.push(validValue);
  valid.push(valid[0] && valid[1] && valid[2]);
  return valid;
};

InputListInteger.propTypes = {
  /* properties */
  uid: _propTypes.default.string.isRequired,
  name: _propTypes.default.string,
  required: _propTypes.default.bool,
  value: _propTypes.default.arrayOf(function (props, propName, componentName) {
    if (props[propName] !== undefined) {
      if (!(0, _validators.intValid)(String(props[propName]))) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be integer."));
      }
    }
  }),
  default: _propTypes.default.arrayOf(function (props, propName, componentName) {
    if (props[propName] !== undefined) {
      if (!(0, _validators.intValid)(String(props[propName]))) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be integer."));
      }
    }
  }),
  tip: _propTypes.default.string,
  placeholder: _propTypes.default.string,
  min: function min(props, propName, componentName) {
    if (props[propName] !== undefined) {
      if (!(0, _validators.intValid)(String(props[propName]))) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be integer."));
      }

      if (props[propName] < 0) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be greater than zero or equal to zero."));
      }

      if (props["max"] !== undefined && props["max"] < props[propName]) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be lower than max."));
      }
    }
  },
  max: function max(props, propName, componentName) {
    if (props[propName] !== undefined) {
      if (!(0, _validators.intValid)(String(props[propName]))) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be integer."));
      }

      if (props[propName] < 0) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be greater than zero or equal to zero."));
      }

      if (props["min"] !== undefined && props["min"] > props[propName]) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be greater than min."));
      }
    }
  },
  minNo: function minNo(props, propName, componentName) {
    if (props[propName] !== undefined) {
      if (!(0, _validators.intValid)(String(props[propName]))) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be integer."));
      }

      if (props[propName] < 0) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be greater than zero or equal to zero."));
      }

      if (props["maxNo"] !== undefined && props["maxNo"] < props[propName]) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be lower than maxNo."));
      }
    }
  },
  maxNo: function maxNo(props, propName, componentName) {
    if (props[propName] !== undefined) {
      if (!(0, _validators.intValid)(String(props[propName]))) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be integer."));
      }

      if (props[propName] < 0) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be greater than zero or equal to zero."));
      }

      if (props["minNo"] !== undefined && props["minNo"] > props[propName]) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be greater than minNo."));
      }
    }
  },
  errors: _propTypes.default.object,
  err_req: _propTypes.default.string,
  err_min: _propTypes.default.string,
  err_max: _propTypes.default.string,
  err_minNo: _propTypes.default.string,
  err_maxNo: _propTypes.default.string,
  empty: _propTypes.default.string,

  /* functions */
  onChange: _propTypes.default.func,

  /* icons */
  icons: _propTypes.default.shape({
    add: _propTypes.default.any.isRequired,
    drop: _propTypes.default.any.isRequired
  }),

  /* aditional */
  jkey: _propTypes.default.shape(_propTypes2.keyPropType),
  sm: _propTypes.default.oneOf(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]),
  size: _propTypes.default.string,
  invalid: _propTypes.default.bool,
  invalidUid: _propTypes.default.bool,
  icon: _propTypes.default.any,
  translation: _propTypes.default.shape(_propTypes2.translationUid)
};
InputListInteger.defaultProps = {
  uid: "",
  className: "",
  invalid: false,
  value: null,
  empty: "This field is not mandatory. If you don't want to define any value click here",
  err_req: "Value is required",
  err_minNo: "Number of values is lower than minimum",
  err_maxNo: "Number of values is higher than maximum",
  err_min: "Value is too low",
  err_max: "Value is too high",
  err_type: "Invalid value type",
  warn_def: "Value is not filled. Default value: ",
  icons: {
    add: _icons.plus,
    drop: _icons.trashCan
  },
  jkey: _propTypes2.Default_keyPropType,
  translation: _propTypes2.Default_translationUid,
  size: "sm",
  sm: "12",
  icon: _icons.info
};

var getErrors = function getErrors(e, props) {
  var new_value = getValue(e, props);
  var i;

  if (new_value !== undefined && new_value !== null) {
    var warn_def = !(e.length === 0 && props.default && Array.isArray(props.default) && props.required && (0, _validators.intValid)(props.minNo) && (0, _validators.filterInt)(props.minNo) <= props.default.length && (0, _validators.filterInt)(props.minNo) > 0);

    if (!warn_def) {
      var sinvalid = [];
      var err_minNo = warn_def && (0, _validators.intValid)(props.minNo) && (0, _validators.filterInt)(props.minNo) >= props.default.length;
      var err_maxNo = warn_def && (0, _validators.intValid)(props.maxNo) && (0, _validators.filterInt)(props.maxNo) <= props.default.length;

      for (i = 0; i < props.default.length; i++) {
        sinvalid.push(valid(props.default[i], props)[3]);
      }

      return {
        warn_def: warn_def,
        invalidArr: [],
        invalid: !err_minNo || !err_maxNo || sinvalid.includes(true),
        emax: [],
        emin: [],
        etype: [],
        new_value: "",
        new_invalid: false,
        new_min: false,
        new_max: false,
        new_type: false,
        err_maxNo: false,
        err_minNo: false,
        err_req: false
      };
    } else {
      var invalid = [];
      var emin = [];
      var emax = [];
      var etype = [];
      var err_minNoV = warn_def && props.minNo !== undefined && (0, _validators.intValid)(props.minNo) && (0, _validators.filterInt)(props.minNo) > e.length;
      var err_maxNoV = warn_def && props.maxNo !== undefined && (0, _validators.intValid)(props.maxNo) && (0, _validators.filterInt)(props.maxNo) < e.length;
      var validate;

      for (i = 0; i < e.length; i++) {
        validate = valid(e[i], props);
        emin.push(validate[0]);
        emax.push(validate[1]);
        etype.push(validate[2]);
        invalid.push(!validate[3]);
      }

      var err_req = props.required && e.length === 0 && err_minNoV;
      return {
        warn_def: warn_def,
        invalidArr: invalid,
        invalid: !(err_minNoV && err_maxNoV && !invalid.includes(true) && err_req),
        emax: emax,
        emin: emin,
        etype: etype,
        new_value: "",
        new_invalid: false,
        new_min: false,
        new_max: false,
        new_type: false,
        err_maxNo: err_maxNoV,
        err_minNo: err_minNoV,
        err_req: err_req
      };
    }
  } else {
    return {
      warn_def: false,
      invalidArr: [],
      invalid: false,
      emax: [],
      emin: [],
      etype: [],
      new_value: "",
      new_invalid: false,
      new_min: false,
      new_max: false,
      new_type: false,
      err_maxNo: false,
      err_minNo: false,
      err_req: false
    };
  }
};

exports.getErrors = getErrors;

var getValue = function getValue(e, props) {
  if (props.required) {
    if (e === undefined || e === null || e.length === 0) {
      if (props.default === null || props.default === undefined) {
        return [];
      }

      return props.default;
    } else {
      return e;
    }
  } else {
    if (e === undefined || e === null) {
      return null;
    } else {
      return e;
    }
  }
};

exports.getValue = getValue;