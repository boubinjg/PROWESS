"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prototype = exports.validGetArrays = exports.ListCustom = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactstrap = require("reactstrap");

var _icons = require("../icons");

var _propTypes2 = require("../propTypes");

var _reactTransitionGroup = require("react-transition-group");

var _validators = require("../validators");

var _utils = require("./../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ListCustom = /*#__PURE__*/function (_Component) {
  _inherits(ListCustom, _Component);

  var _super = _createSuper(ListCustom);

  function ListCustom() {
    var _this;

    _classCallCheck(this, ListCustom);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      gId: (0, _utils.idGenerator)(_this.props.jkey.prefix + "-lrgx-" + _this.props.jkey.sufix)
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (e) {
      var props = this.props.value;
      var validation_result = isValid(e.target.value, this.props);

      switch (e.target.name) {
        case "value-new":
          props.new_value = e.target.value;
          props.new_type = props.new_value.length === 0 || validation_result;
          break;

        default:
          var idx = parseInt(e.target.name.replace("value-", ""));
          props.values[idx] = e.target.value;
          props.etype[idx] = validation_result;
      }

      if (this.props.onChange !== undefined) {
        this.props.onChange(this.props.uid, props, !props.etype.includes(false));
      }
    }.bind(_assertThisInitialized(_this)));

    _defineProperty(_assertThisInitialized(_this), "onAdd", function (e) {
      var props = this.props.value;
      var validation_result = isValid(props.new_value, this.props);
      props.values.push(props.new_value);
      props.etype.push(validation_result[0]);
      props.new_value = "";
      props.new_type = true;

      if (this.props.onChange !== undefined) {
        this.props.onChange(this.props.uid, props, !props.etype.includes(false));
      }
    }.bind(_assertThisInitialized(_this)));

    _defineProperty(_assertThisInitialized(_this), "onDrop", function (e) {
      var props = this.props.value;
      var idx = parseInt(e.currentTarget.value.replace("btn-", ""));
      props.values.splice(idx, 1);
      props.etype.splice(idx, 1);

      if (this.props.onChange !== undefined) {
        this.props.onChange(this.props.uid, props, !props.etype.includes(false));
      }
    }.bind(_assertThisInitialized(_this)));

    return _this;
  }

  _createClass(ListCustom, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var new_element;
      var warn_mode;

      if (this.props.value.values.length < this.props.max) {
        new_element = /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
          key: this.state.gId + "-new",
          row: true,
          className: "jofgen-card-lst-row"
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.Col, null, /*#__PURE__*/_react.default.createElement("table", {
          className: "jofgen-card-lst-table"
        }, /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
          name: "value-new",
          type: "text",
          bsSize: this.props.size,
          value: this.props.value.new_value,
          invalid: !this.props.value.new_type,
          onChange: this.onChange
        }), /*#__PURE__*/_react.default.createElement(_reactstrap.FormFeedback, {
          hidden: this.props.value.new_type,
          color: "danger"
        }, this.props.err_type)), /*#__PURE__*/_react.default.createElement("td", {
          className: "btns"
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
          className: "btn-add",
          color: "light",
          size: "sm",
          onClick: this.onAdd
        }, this.props.icons.add))))))));
      }

      if (!this.props.none_enabled || this.props.value.values.length > 0) {
        warn_mode = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, this.props.min !== undefined && this.props.value.values.length < this.props.min ? /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
          color: "danger"
        }, this.props.err_minNo) : null, this.props.max !== undefined && this.props.value.values.length > this.props.max ? /*#__PURE__*/_react.default.createElement(_reactstrap.FormText, {
          color: "danger"
        }, this.props.err_maxNo) : null);
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: this.props.className + "jofgen-card-lst",
        style: this.props.style
      }, new_element, warn_mode, /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.TransitionGroup, null, this.props.value.values.map(function (item, idx) {
        return /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
          key: idx,
          classNames: "jofgen-card-lst-row-item",
          timeout: 50
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
          row: true,
          className: "jofgen-card-lst-row"
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.Col, null, /*#__PURE__*/_react.default.createElement("table", {
          className: "jofgen-card-lst-table"
        }, /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
          name: "value-" + idx,
          type: "text",
          bsSize: _this2.props.size,
          value: item,
          invalid: !_this2.props.value.etype[idx],
          onChange: _this2.onChange
        }), /*#__PURE__*/_react.default.createElement(_reactstrap.FormFeedback, {
          hidden: _this2.props.value.etype[idx],
          color: "danger"
        }, _this2.props.err_type)), /*#__PURE__*/_react.default.createElement("td", {
          className: "btns"
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
          className: "btn-remove",
          value: "btn-" + idx,
          color: "light",
          size: "sm",
          onClick: _this2.onDrop
        }, _this2.props.icons.drop))))))));
      })));
    }
  }]);

  return ListCustom;
}(_react.Component);

exports.ListCustom = ListCustom;
ListCustom.propTypes = {
  /* properties */
  uid: _propTypes.default.string.isRequired,
  value: _propTypes.default.exact({
    new_value: _propTypes.default.string.isRequired,
    new_type: _propTypes.default.bool.isRequired,
    values: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,
    etype: _propTypes.default.arrayOf(_propTypes.default.bool).isRequired
  }),
  min: function min(props, propName, componentName) {
    if (props[propName] !== undefined) {
      if (!(0, _validators.intValid)(String(props[propName]))) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Value must be integer.');
      }

      if (props[propName] < 0) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Value must be greater than zero or equal to zero.');
      }

      if (props["max"] !== undefined && props["max"] < props[propName]) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Value must be lower than max.');
      }
    }
  },
  max: function max(props, propName, componentName) {
    if (props[propName] !== undefined) {
      if (!(0, _validators.intValid)(String(props[propName]))) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Value must be integer.');
      }

      if (props[propName] < 0) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Value must be greater than zero or equal to zero.');
      }

      if (props["min"] !== undefined && props["min"] > props[propName]) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Value must be greater than min.');
      }
    }
  },
  regex: function regex(props, propName, componentName) {
    if (props[propName] !== undefined) {
      try {
        new RegExp(props[propName]);
      } catch (_unused) {
        return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Invalid regular expression');
      }
    }
  },
  err_minNo: _propTypes.default.string,
  err_maxNo: _propTypes.default.string,
  err_typeNo: _propTypes.default.string,

  /* functions */
  onChange: _propTypes.default.func,
  invalid: _propTypes.default.bool,

  /* icons */
  icons: _propTypes.default.shape({
    add: _propTypes.default.any.isRequired,
    drop: _propTypes.default.any.isRequired
  }),

  /* aditional */
  jkey: _propTypes.default.shape(_propTypes2.keyPropType),
  size: _propTypes.default.string
};
ListCustom.defaultProps = {
  className: "",
  invalid: false,
  min: 0,
  max: Infinity,
  regex: ".*",
  err_minNo: "Number of values is lower than minimum",
  err_maxNo: "Number of values is higher than maximum",
  err_type: "Invalid value type",
  icons: {
    add: _icons.plus,
    drop: _icons.trashCan
  },
  jkey: _propTypes2.Default_keyPropType,
  size: "sm"
};

var isValid = function isValid(value, props) {
  try {
    return new RegExp(props.regex).test(value);
  } catch (_unused2) {
    return false;
  }
};

var validGetArrays = function validGetArrays(e, props) {
  try {
    var rgx_test = new RegExp(props.regex);
    var result = {
      new_value: e.new_value,
      new_type: e.new_value.length === 0 ? true : rgx_test.test(e.new_value),
      values: [],
      etype: []
    };
    var values = e.values;
    var valuesLength = values.length;

    for (var i = 0; i < valuesLength; i++) {
      result.values.push(values[i]);
      result.etype.push(rgx_test.test(values[i]));
    }

    return result;
  } catch (_unused3) {
    var result = {
      new_value: e.new_value,
      new_type: false,
      values: [],
      etype: []
    };
    var values = e.values;
    var valuesLength = values.length;

    for (var i = 0; i < valuesLength; i++) {
      result.values.push(values[i]);
      result.etype.push(false);
    }

    return result;
  }
};

exports.validGetArrays = validGetArrays;

var prototype = function prototype() {
  return {
    new_value: "",
    new_type: true,
    values: [],
    etype: []
  };
};

exports.prototype = prototype;