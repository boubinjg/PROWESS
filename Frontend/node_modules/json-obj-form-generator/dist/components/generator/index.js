"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Error", {
  enumerable: true,
  get: function get() {
    return _Error.default;
  }
});
Object.defineProperty(exports, "InputBoolean", {
  enumerable: true,
  get: function get() {
    return _InputBoolean.InputBoolean;
  }
});
Object.defineProperty(exports, "InputCustom", {
  enumerable: true,
  get: function get() {
    return _InputCustom.InputCustom;
  }
});
Object.defineProperty(exports, "InputColor", {
  enumerable: true,
  get: function get() {
    return _InputColor.InputColor;
  }
});
Object.defineProperty(exports, "InputFloat", {
  enumerable: true,
  get: function get() {
    return _InputFloat.InputFloat;
  }
});
Object.defineProperty(exports, "InputInteger", {
  enumerable: true,
  get: function get() {
    return _InputInteger.InputInteger;
  }
});
Object.defineProperty(exports, "InputString", {
  enumerable: true,
  get: function get() {
    return _InputString.InputString;
  }
});
Object.defineProperty(exports, "InputListString", {
  enumerable: true,
  get: function get() {
    return _InputListString.InputListString;
  }
});
Object.defineProperty(exports, "InputListCustom", {
  enumerable: true,
  get: function get() {
    return _InputListCustom.InputListCustom;
  }
});
Object.defineProperty(exports, "InputListInteger", {
  enumerable: true,
  get: function get() {
    return _InputListInteger.InputListInteger;
  }
});
Object.defineProperty(exports, "InputListFloat", {
  enumerable: true,
  get: function get() {
    return _InputListFloat.InputListFloat;
  }
});
Object.defineProperty(exports, "Paragraph", {
  enumerable: true,
  get: function get() {
    return _Paragraph.Paragraph;
  }
});
Object.defineProperty(exports, "Section", {
  enumerable: true,
  get: function get() {
    return _Section.Section;
  }
});
Object.defineProperty(exports, "SectionPackage", {
  enumerable: true,
  get: function get() {
    return _SectionPackage.SectionPackage;
  }
});
Object.defineProperty(exports, "Container", {
  enumerable: true,
  get: function get() {
    return _Container.default;
  }
});
exports.isValidValueJSON = exports.toMeta = exports.metaTo = exports.invalidCheck = exports.valueToMeta_Linear = exports.valueToMeta_LinearMerge = exports.valueToMeta_Tree = exports.getMetaValue = exports.jsonToMeta_Tree = exports.metaValueToLinear = exports.metaValueToLinearMerge = exports.metaValueToTree = void 0;

var _Error = _interopRequireDefault(require("./Error"));

var _InputBoolean = require("./InputBoolean");

var _InputCustom = require("./InputCustom");

var _InputColor = require("./InputColor");

var _InputFloat = require("./InputFloat");

var _InputInteger = require("./InputInteger");

var _InputString = require("./InputString");

var _InputListString = require("./InputListString");

var _InputListCustom = require("./InputListCustom");

var _InputListInteger = require("./InputListInteger");

var _InputListFloat = require("./InputListFloat");

var _Paragraph = require("./Paragraph");

var _Section = require("./Section");

var _SectionPackage = require("./SectionPackage");

var _Container = _interopRequireDefault(require("./Container"));

var _designer = require("./../designer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var aliases = {
  bool: {
    value: false,
    getErrors: _InputBoolean.getErrors,
    mustHaveValue: true
  },
  color: {
    value: "",
    getErrors: _InputColor.getErrors,
    mustHaveValue: true
  },
  rgx: {
    value: "",
    getErrors: _InputCustom.getErrors,
    mustHaveValue: true
  },
  float: {
    value: "",
    getErrors: _InputFloat.getErrors,
    mustHaveValue: true
  },
  int: {
    value: "",
    getErrors: _InputInteger.getErrors,
    mustHaveValue: true
  },
  p: {
    value: null,
    getErrors: _Paragraph.getErrors,
    mustHaveValue: false
  },
  str: {
    value: "",
    getErrors: _InputString.getErrors,
    mustHaveValue: true
  },
  // input lists
  float_il: {
    value: [],
    getErrors: _InputListFloat.getErrors,
    mustHaveValue: true
  },
  int_il: {
    value: [],
    getErrors: _InputListInteger.getErrors,
    mustHaveValue: true
  },
  rgx_il: {
    value: [],
    getErrors: _InputListCustom.getErrors,
    mustHaveValue: true
  },
  str_il: {
    value: [],
    getErrors: _InputListString.getErrors,
    mustHaveValue: true
  },
  // sections
  sec: {
    value: null,
    getErrors: _Section.getErrors,
    mustHaveValue: false
  },
  pack: {
    value: null,
    getErrors: _SectionPackage.getErrors,
    mustHaveValue: false
  }
};
/* meta to value */

var metaValueToTree = function metaValueToTree(obj, def, req, errs) {
  var result = {};

  if (_typeof(obj) === "object") {
    var keys = Object.keys(obj);
    var len = keys.length;
    var key;

    for (var i = 0; i < len; i++) {
      key = keys[i];

      if (_typeof(obj[key]) === "object" && !Array.isArray(obj[key]) && obj[key] !== null) {
        result[key] = metaValueToTree(obj[key], def[key], req[key], errs[key]);
      } else {
        if (def[key] !== null && req[key] && !errs[key].warn_def) {
          result[key] = def[key];
          continue;
        }

        if (obj[key] !== null) {
          result[key] = obj[key];
          continue;
        }
      }
    }
  }

  return result;
};

exports.metaValueToTree = metaValueToTree;

var metaValueToLinearMerge = function metaValueToLinearMerge(obj, def, req, errs, sub_sep, parent) {
  var prefix = parent === undefined ? "" : parent + sub_sep;
  var result = {};

  if (_typeof(obj) === "object") {
    var keys = Object.keys(obj);
    var len = keys.length;
    var key;

    for (var i = 0; i < len; i++) {
      key = keys[i];

      if (_typeof(obj[key]) === "object" && !Array.isArray(obj[key]) && obj[key] !== null) {
        result = _objectSpread(_objectSpread({}, result), metaValueToLinearMerge(obj[key], def[key], req[key], errs[key], sub_sep, prefix + key));
      } else {
        if (def[key] !== null && req[key] && !errs[key].warn_def) {
          result[prefix + key] = def[key];
          continue;
        }

        if (obj[key] !== null) {
          result[prefix + key] = obj[key];
          continue;
        }
      }
    }
  }

  return result;
};

exports.metaValueToLinearMerge = metaValueToLinearMerge;

var metaValueToLinear = function metaValueToLinear(obj, def, req, errs) {
  var result = {};

  if (_typeof(obj) === "object") {
    var keys = Object.keys(obj);
    var len = keys.length;
    var key;

    for (var i = 0; i < len; i++) {
      key = keys[i];

      if (_typeof(obj[key]) === "object" && !Array.isArray(obj[key]) && obj[key] !== null) {
        result = _objectSpread(_objectSpread({}, result), metaValueToLinear(obj[key], def[key], req[key], errs[key]));
      } else {
        if (def[key] !== null && req[key] && !errs[key].warn_def) {
          result[key] = def[key];
          continue;
        }

        if (obj[key] !== null) {
          result[key] = obj[key];
          continue;
        }
      }
    }
  }

  return result;
};
/* JSON to value */


exports.metaValueToLinear = metaValueToLinear;

var jsonToMeta_Tree = function jsonToMeta_Tree(obj) {
  var result = {};
  var errors = {};
  var defaultV = {};
  var req = {};

  if (Array.isArray(obj)) {
    var len = obj.length;
    var uid;

    for (var i = 0; i < len; i++) {
      uid = obj[i].uid;

      if (obj[i].sub !== undefined) {
        var subresult = jsonToMeta_Tree(obj[i].sub);
        result[uid] = subresult[0];
        errors[uid] = subresult[1];
        defaultV[uid] = subresult[2];
        req[uid] = subresult[3];
      } else {
        if (obj[i].value !== undefined) {
          result[uid] = obj[i].value;
          errors[uid] = aliases[obj[i].type].getErrors(obj[i].value, obj[i]);
          defaultV[uid] = obj[i].default !== undefined ? obj[i].default : null;
          req[uid] = obj[i].required ? true : false;
        } else {
          var type = obj[i].type;
          result[uid] = obj[i].required ? aliases[type].value : null;
          errors[uid] = aliases[type].getErrors(result[uid], obj[i]);
          defaultV[uid] = obj[i].default !== undefined && obj[i].required ? obj[i].default : null;
          req[uid] = obj[i].required ? true : false;
        }
      }
    }
  }

  return [result, errors, defaultV, req];
};

exports.jsonToMeta_Tree = jsonToMeta_Tree;

var getMetaValue = function getMetaValue(obj, value) {
  if (obj.type === undefined || !Object.keys(aliases).includes(obj.type)) {
    return null;
  }

  if (value !== undefined && value !== null && aliases[obj.type].valid(value, obj)) {
    return value;
  }

  if (obj.value !== undefined && obj.value !== null && aliases[obj.type].valid(obj.value, obj)) {
    return obj.value;
  }
};
/* JSON and value merge */


exports.getMetaValue = getMetaValue;

var valueToMeta_Tree = function valueToMeta_Tree(obj, val) {
  var result = {};
  var errors = {};
  var defaultV = {};
  var req = {};

  if (Array.isArray(obj)) {
    var len = obj.length;
    var uid;

    for (var i = 0; i < len; i++) {
      uid = obj[i].uid;

      if (obj[i].sub !== undefined) {
        var subresult = valueToMeta_Tree(obj[i].sub, val != undefined && val != null && val[uid] !== undefined && val[uid] !== null ? val[uid] : undefined);
        result[uid] = subresult[0];
        errors[uid] = subresult[1];
        defaultV[uid] = subresult[2];
        req[uid] = subresult[3];
      } else {
        if (val != undefined && val != null && val[uid] !== undefined && val[uid] !== null) {
          result[uid] = val[uid];
          errors[uid] = aliases[obj[i].type].getErrors(val[uid], obj[i]);
          req[uid] = obj[i].required ? true : false;
          defaultV[uid] = obj[i].default !== undefined && obj[i].default !== null && req[uid] ? obj[i].default : null;
        } else {
          var type = obj[i].type;
          result[uid] = obj[i].required ? aliases[type].value : null;
          errors[uid] = aliases[type].getErrors(result[uid], obj[i]);
          req[uid] = obj[i].required ? true : false;
          defaultV[uid] = obj[i].default !== undefined && obj[i].default !== null && req[uid] ? obj[i].default : null;
        }
      }
    }
  }

  return [result, errors, defaultV, req];
};

exports.valueToMeta_Tree = valueToMeta_Tree;

var valueToMeta_LinearMerge = function valueToMeta_LinearMerge(obj, val, sub_sep, parent) {
  var prefix = parent === undefined ? "" : parent + sub_sep;
  var result = {};
  var errors = {};
  var defaultV = {};
  var req = {};

  if (Array.isArray(obj)) {
    var len = obj.length;
    var uid;

    for (var i = 0; i < len; i++) {
      uid = obj[i].uid;

      if (obj[i].sub !== undefined) {
        var subresult = valueToMeta_LinearMerge(obj[i].sub, val, sub_sep, parent);
        result[uid] = subresult[0];
        errors[uid] = subresult[1];
        defaultV[uid] = subresult[2];
        req[uid] = subresult[3];
      } else {
        if (val[prefix + uid] !== undefined && val[prefix + uid] !== null) {
          result[uid] = val[prefix + uid];
          errors[uid] = aliases[obj[i].type].getErrors(val[prefix + uid], obj[i]);
          req[uid] = obj[i].required ? true : false;
          defaultV[uid] = obj[i].default !== undefined && obj[i].default !== null && req[uid] ? obj[i].default : null;
        } else {
          var type = obj[i].type;
          result[uid] = obj[i].required ? aliases[type].value : null;
          errors[uid] = aliases[type].getErrors(result[uid], obj[i]);
          req[uid] = obj[i].required ? true : false;
          defaultV[uid] = obj[i].default !== undefined && obj[i].default !== null && req[uid] ? obj[i].default : null;
        }
      }
    }
  }

  return [result, errors, defaultV, req];
};

exports.valueToMeta_LinearMerge = valueToMeta_LinearMerge;

var valueToMeta_Linear = function valueToMeta_Linear(obj, val) {
  var result = {};
  var errors = {};
  var defaultV = {};
  var req = {};

  if (Array.isArray(obj)) {
    var len = obj.length;
    var uid;

    for (var i = 0; i < len; i++) {
      uid = obj[i].uid;

      if (obj[i].sub !== undefined) {
        var subresult = valueToMeta_Linear(obj[i].sub, val);
        result[uid] = subresult[0];
        errors[uid] = subresult[1];
        defaultV[uid] = subresult[2];
        req[uid] = subresult[3];
      } else {
        if (val[uid] !== undefined && val[uid] !== null) {
          result[uid] = val[uid];
          errors[uid] = aliases[obj[i].type].getErrors(val[uid], obj[i]);
          req[uid] = obj[i].required ? true : false;
          defaultV[uid] = obj[i].default !== undefined && obj[i].default !== null && req[uid] ? obj[i].default : null;
        } else {
          var type = obj[i].type;
          result[uid] = obj[i].required ? aliases[type].value : null;
          errors[uid] = aliases[type].getErrors(result[uid], obj[i]);
          req[uid] = obj[i].required ? true : false;
          defaultV[uid] = obj[i].default !== undefined && obj[i].default !== null && req[uid] ? obj[i].default : null;
        }
      }
    }
  }

  return [result, errors, defaultV, req];
};
/* error check */


exports.valueToMeta_Linear = valueToMeta_Linear;

var invalidCheck = function invalidCheck(obj) {
  var subresult = false;

  if (_typeof(obj) === "object") {
    if (obj.invalid !== undefined && typeof obj.invalid === "boolean") {
      return obj.invalid;
    }

    var keys = Object.keys(obj);
    var len = keys.length;
    var i;

    for (i = 0; i < len; i++) {
      var key = keys[i];

      if (_typeof(obj[key]) === "object") {
        subresult = subresult || invalidCheck(obj[key]);
      } else {
        subresult = subresult || obj[key].invalid;
      }
    }
  }

  return subresult;
};

exports.invalidCheck = invalidCheck;
var metaTo = {
  tree: metaValueToTree,
  linear_merge: metaValueToLinearMerge,
  linear: metaValueToLinear
};
exports.metaTo = metaTo;
var toMeta = {
  tree: valueToMeta_Tree,
  linear_merge: valueToMeta_LinearMerge,
  linear: valueToMeta_Linear
};
exports.toMeta = toMeta;

var isValidValueJSON = function isValidValueJSON(json, value, mode, sep) {
  try {
    var serial_mode = mode && ["tree", "linear", "linear_merge"].includes(mode) ? mode : "tree";
    var separator = sep ? sep : ".";

    if (!(0, _designer.isValidDesignJSON)(json, serial_mode)) {
      return false;
    }

    var meta;

    if (value !== undefined) {
      meta = toMeta[serial_mode](json, value, separator);
    } else {
      meta = jsonToMeta_Tree(json);
    }

    return !invalidCheck(meta[1]);
  } catch (_unused) {
    return false;
  }
};

exports.isValidValueJSON = isValidValueJSON;