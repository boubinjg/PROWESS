"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactstrap = require("reactstrap");

var _utils = require("./../utils");

var _icons = require("./../icons");

var _propTypes2 = require("./../propTypes");

var _validators = require("./../validators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ListDefType = /*#__PURE__*/function (_Component) {
  _inherits(ListDefType, _Component);

  var _super = _createSuper(ListDefType);

  function ListDefType() {
    var _this;

    _classCallCheck(this, ListDefType);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      values: [],
      new_name: '',
      new_value: '',
      new_tip: '',
      popUp: false,
      gId: (0, _utils.idGenerator)(_this.props.jkey.prefix + "tdeflst" + _this.props.jkey.sufix)
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (e) {
      var type = e.target.name.split('-');

      if (type[1] === "new") {
        switch (type[0]) {
          case "name":
            this.setState({
              new_name: e.target.value
            });
            break;

          case "value":
            this.setState({
              new_value: e.target.value
            });
            break;

          case "tip":
            this.setState({
              new_tip: e.target.value
            });
            break;

          default:
            break;
        }
      } else {
        var props = this.state.values;
        var idx = parseInt(type[1]);
        props[idx][type[0]] = e.target.value;
        this.setState({
          values: props
        });

        if (this.props.onChange !== undefined) {
          this.props.onChange(this.props.uid, props, !this.props.minNo || this.props.minNo && this.props.minNo.length <= props.length);
        }
      }
    }.bind(_assertThisInitialized(_this)));

    _defineProperty(_assertThisInitialized(_this), "drop", function (idx) {
      var props = this.state.values;
      props.splice(idx, 1);

      if (this.props.values === undefined) {
        this.setState({
          values: props
        });
      }

      if (this.props.onChange !== undefined) {
        this.props.onChange(this.props.uid, props, !this.props.minNo || this.props.minNo && this.props.minNo.length <= props.length);
      }
    }.bind(_assertThisInitialized(_this)));

    _defineProperty(_assertThisInitialized(_this), "add", function () {
      var props = this.state.values;
      props.push({
        name: this.state.new_name,
        value: this.state.new_value,
        tip: this.state.new_tip
      });

      if (this.props.values === undefined) {
        this.setState({
          values: props,
          new_name: '',
          new_tip: '',
          new_value: ''
        });
      }

      if (this.props.onChange !== undefined) {
        this.props.onChange(this.props.uid, props, !this.props.minNo || this.props.minNo && this.props.minNo.length <= props.length);
      }
    }.bind(_assertThisInitialized(_this)));

    return _this;
  }

  _createClass(ListDefType, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/_react.default.createElement("div", {
        className: this.props.className + "jofgen-D-card-chcklstdef",
        style: this.props.style
      }, /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
        row: true,
        className: "jofgen-D-card-chcklstdef-row"
      }, /*#__PURE__*/_react.default.createElement(_reactstrap.Col, null, /*#__PURE__*/_react.default.createElement("table", {
        className: "jofgen-D-card-chcklstdef-table"
      }, /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
        type: "text",
        name: "name-new",
        bsSize: this.props.size,
        placeholder: this.props.translation.name,
        value: this.state.new_name,
        onChange: this.onChange
      })), /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
        type: "text",
        name: "value-new",
        bsSize: this.props.size,
        placeholder: this.props.translation.value,
        value: this.state.new_value,
        onChange: this.onChange
      })), /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
        type: "text",
        name: "tip-new",
        bsSize: this.props.size,
        placeholder: this.props.translation.tip,
        value: this.state.new_tip,
        onChange: this.onChange
      })), /*#__PURE__*/_react.default.createElement("td", {
        className: "btns"
      }, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
        className: "btn-add",
        color: "light",
        size: "sm",
        onClick: this.add
      }, this.props.icons.add))))))), this.state.values.map(function (item, idx) {
        return /*#__PURE__*/_react.default.createElement(_reactstrap.FormGroup, {
          key: _this2.state.gId + "-" + idx,
          row: true,
          className: "jofgen-D-card-chcklstdef-row"
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.Col, null, /*#__PURE__*/_react.default.createElement("table", {
          className: "jofgen-D-card-chcklstdef-table"
        }, /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
          type: "text",
          name: "name-" + idx,
          bsSize: _this2.props.size,
          placeholder: _this2.props.translation.name,
          value: item.name,
          onChange: _this2.onChange
        })), /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
          type: "text",
          name: "value-" + idx,
          bsSize: _this2.props.size,
          placeholder: _this2.props.translation.value,
          value: item.value,
          onChange: _this2.onChange
        })), /*#__PURE__*/_react.default.createElement("td", null, /*#__PURE__*/_react.default.createElement(_reactstrap.Input, {
          type: "text",
          name: "tip-" + idx,
          bsSize: _this2.props.size,
          placeholder: _this2.props.translation.tip,
          value: item.tip,
          onChange: _this2.onChange
        })), /*#__PURE__*/_react.default.createElement("td", {
          className: "btns"
        }, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
          className: "btn-remove",
          color: "light",
          size: "sm",
          onClick: function onClick() {
            _this2.drop(idx);
          }
        }, _this2.props.icons.drop)))))));
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var nextState = {};

      if (!prevState.flag) {
        if (nextProps.values && nextProps.values !== prevState.values) {
          nextState.values = nextProps.values;
        }
      } else {
        nextState.flag = false;
      }

      return nextState;
    }
  }]);

  return ListDefType;
}(_react.Component);

exports.default = ListDefType;
ListDefType.propTypes = {
  minNo: function minNo(props, propName, componentName) {
    if (props[propName] !== undefined) {
      if (!(0, _validators.intValid)(String(props[propName]))) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be integer."));
      }

      if (props[propName] < 0) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be greater than zero or equal to zero."));
      }

      if (props["maxNo"] !== undefined && props["maxNo"] < props[propName]) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be lower than maxNo."));
      }
    }
  },
  maxNo: function maxNo(props, propName, componentName) {
    if (props[propName] !== undefined) {
      if (!(0, _validators.intValid)(String(props[propName]))) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be integer."));
      }

      if (props[propName] < 0) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be greater than zero or equal to zero."));
      }

      if (props["minNo"] !== undefined && props["minNo"] > props[propName]) {
        return new Error("Invalid prop `".concat(propName, "` supplied to `").concat(componentName, "`. Value must be greater than minNo."));
      }
    }
  },
  values: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    value: _propTypes.default.string,
    tip: _propTypes.default.string
  })),
  jkey: _propTypes.default.shape(_propTypes2.keyPropType),
  size: _propTypes.default.string,
  icons: _propTypes.default.shape({
    add: _propTypes.default.any.isRequired,
    drop: _propTypes.default.any.isRequired
  }),
  translation: _propTypes.default.shape({
    name: _propTypes.default.string.isRequired,
    value: _propTypes.default.string.isRequired,
    tip: _propTypes.default.string.isRequired
  }),
  onChange: _propTypes.default.func
};
ListDefType.defaultProps = {
  className: "",
  size: "sm",
  translation: {
    name: "Name",
    value: "Value",
    tip: "Tip - popup text"
  },
  jkey: _propTypes2.Default_keyPropType,
  icons: {
    add: _icons.plus,
    drop: _icons.trashCan
  }
};