"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Container", {
  enumerable: true,
  get: function get() {
    return _Container.default;
  }
});
Object.defineProperty(exports, "Extensor", {
  enumerable: true,
  get: function get() {
    return _Extensor.default;
  }
});
Object.defineProperty(exports, "InputBoolean", {
  enumerable: true,
  get: function get() {
    return _InputBoolean.InputBoolean;
  }
});
Object.defineProperty(exports, "InputColor", {
  enumerable: true,
  get: function get() {
    return _InputColor.InputColor;
  }
});
Object.defineProperty(exports, "InputCustom", {
  enumerable: true,
  get: function get() {
    return _InputCustom.InputCustom;
  }
});
Object.defineProperty(exports, "InputFloat", {
  enumerable: true,
  get: function get() {
    return _InputFloat.InputFloat;
  }
});
Object.defineProperty(exports, "InputInteger", {
  enumerable: true,
  get: function get() {
    return _InputInteger.InputInteger;
  }
});
Object.defineProperty(exports, "InputString", {
  enumerable: true,
  get: function get() {
    return _InputString.InputString;
  }
});
Object.defineProperty(exports, "InputListCustom", {
  enumerable: true,
  get: function get() {
    return _InputListCustom.InputListCustom;
  }
});
Object.defineProperty(exports, "InputListFloat", {
  enumerable: true,
  get: function get() {
    return _InputListFloat.InputListFloat;
  }
});
Object.defineProperty(exports, "InputListInteger", {
  enumerable: true,
  get: function get() {
    return _InputListInteger.InputListInteger;
  }
});
Object.defineProperty(exports, "InputListString", {
  enumerable: true,
  get: function get() {
    return _InputListString.InputListString;
  }
});
Object.defineProperty(exports, "Paragraph", {
  enumerable: true,
  get: function get() {
    return _Paragraph.Paragraph;
  }
});
Object.defineProperty(exports, "Section", {
  enumerable: true,
  get: function get() {
    return _Section.Section;
  }
});
Object.defineProperty(exports, "SectionPackage", {
  enumerable: true,
  get: function get() {
    return _SectionPackage.SectionPackage;
  }
});
exports.isValidDesignJSON = exports.jsonToMeta = exports.jsonValid = exports.getUids = exports.isValid = exports.recursive_check_valid = exports.recursive_get_unique_valid = exports.recursive_check_unique = void 0;

var _Container = _interopRequireDefault(require("./Container"));

var _Extensor = _interopRequireDefault(require("./Extensor"));

var _InputBoolean = require("./InputBoolean");

var _InputColor = require("./InputColor");

var _InputCustom = require("./InputCustom");

var _InputFloat = require("./InputFloat");

var _InputInteger = require("./InputInteger");

var _InputString = require("./InputString");

var _InputListCustom = require("./InputListCustom");

var _InputListFloat = require("./InputListFloat");

var _InputListInteger = require("./InputListInteger");

var _InputListString = require("./InputListString");

var _Paragraph = require("./Paragraph");

var _Section = require("./Section");

var _SectionPackage = require("./SectionPackage");

var _shared = require("./../shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var uidsCheck_Tree = function uidsCheck_Tree(uids) {
  var arr = [];

  if (Array.isArray(uids)) {
    for (var i = 0; i < uids.length; i++) {
      if (Array.isArray(uids[i])) {
        arr.push(uids[i][0]);
        var subcheck = uidsCheck_Tree(uids[i][1]);

        if (!subcheck) {
          return false;
        }
      } else {
        arr.push(uids[i]);
      }
    }
  }

  for (var j = 0; j < arr.length; j++) {
    if (arr.includes(arr[j], j + 1) && arr[j] !== null && arr[j] !== undefined) {
      return false;
    }
  }

  return true;
};

var uidsGetArr_Tree = function uidsGetArr_Tree(uids) {
  var valid = [];
  var arr = [];
  var i;

  if (Array.isArray(uids)) {
    for (i = 0; i < uids.length; i++) {
      if (Array.isArray(uids[i])) {
        arr.push(uids[i][0]);
      } else {
        arr.push(uids[i]);
      }
    }

    for (i = 0; i < uids.length; i++) {
      if (Array.isArray(uids[i])) {
        valid.push([uids[i][0] !== null && uids[i][0] !== undefined && (arr.indexOf(uids[i][0]) < i || arr.lastIndexOf(uids[i][0]) > i), uidsGetArr_Tree(uids[i][1])]);
      } else {
        valid.push(uids[i] !== null && uids[i] !== undefined && (arr.indexOf(uids[i]) < i || arr.lastIndexOf(uids[i]) > i));
      }
    }
  }

  return valid;
};

var uidsGetArr_LinearMerge = function uidsGetArr_LinearMerge(uids) {
  var valid = [];
  var arr = [];
  var i;

  if (Array.isArray(uids)) {
    for (i = 0; i < uids.length; i++) {
      if (Array.isArray(uids[i])) {
        arr.push(uids[i][0]);
      } else {
        arr.push(uids[i]);
      }
    }

    for (i = 0; i < uids.length; i++) {
      if (Array.isArray(uids[i])) {
        valid.push([uids[i][0] !== null && uids[i][0] !== undefined && (arr.indexOf(uids[i][0]) < i || arr.lastIndexOf(uids[i][0]) > i), uidsGetArr_LinearMerge(uids[i][1])]);
      } else {
        valid.push(uids[i] !== null && uids[i] !== undefined && (arr.indexOf(uids[i]) < i || arr.lastIndexOf(uids[i]) > i));
      }
    }
  }

  return valid;
};

var uidsGetArrmetafunc_Linear = function uidsGetArrmetafunc_Linear(uids, arr) {
  var valid = [];
  var i;

  if (Array.isArray(uids)) {
    for (i = 0; i < uids.length; i++) {
      if (Array.isArray(uids[i])) {
        valid.push([uids[i][0] !== null && uids[i][0] !== undefined && arr.indexOf(uids[i][0]) !== arr.lastIndexOf(uids[i][0]), uidsGetArrmetafunc_Linear(uids[i][1], arr)]);
      } else {
        valid.push(uids[i] !== null && uids[i] !== undefined && arr.indexOf(uids[i]) !== arr.lastIndexOf(uids[i]));
      }
    }
  }

  return valid;
};

var uidsGetArr_Linear = function uidsGetArr_Linear(uids) {
  var arr = uidsCheck_LinearmetaFunc(uids);
  return uidsGetArrmetafunc_Linear(uids, arr);
};

var uidsCheck_LinearMerge = function uidsCheck_LinearMerge(uids) {
  var arr = [];

  if (Array.isArray(uids)) {
    for (var i = 0; i < uids.length; i++) {
      if (Array.isArray(uids[i])) {
        arr.push(uids[i][0]);
        var subcheck = uidsCheck_LinearMerge(uids[i][1]);

        if (!subcheck) {
          return false;
        }
      } else {
        arr.push(uids[i]);
      }
    }
  }

  for (var j = 0; j < arr.length; j++) {
    if (arr.includes(arr[j], j + 1) && arr[j] !== null && arr[j] !== undefined) {
      return false;
    }
  }

  return true;
};

var uidsCheck_LinearmetaFunc = function uidsCheck_LinearmetaFunc(uids) {
  var arr = [];

  if (Array.isArray(uids)) {
    for (var i = 0; i < uids.length; i++) {
      if (Array.isArray(uids[i])) {
        arr.push(uids[i][0]);
        arr = [].concat(_toConsumableArray(arr), _toConsumableArray(uidsCheck_LinearmetaFunc(uids[i][1])));
      } else {
        arr.push(uids[i]);
      }
    }
  }

  return arr;
};

var uidsCheck_Linear = function uidsCheck_Linear(uids) {
  var arr = uidsCheck_LinearmetaFunc(uids);

  for (var j = 0; j < arr.length; j++) {
    if (arr.includes(arr[j], j + 1) && arr[j] !== null && arr[j] !== undefined) {
      return false;
    }
  }

  return true;
};

var recursive_check_unique = {
  tree: uidsCheck_Tree,
  linear_merge: uidsCheck_LinearMerge,
  linear: uidsCheck_Linear
};
exports.recursive_check_unique = recursive_check_unique;
var recursive_get_unique_valid = {
  tree: uidsGetArr_Tree,
  linear_merge: uidsGetArr_LinearMerge,
  linear: uidsGetArr_Linear
};
exports.recursive_get_unique_valid = recursive_get_unique_valid;

var recursive_check_valid = function recursive_check_valid(valids) {
  if (Array.isArray(valids)) {
    for (var i = 0; i < valids.length; i++) {
      if (Array.isArray(valids[i])) {
        if (!valids[i][0]) {
          return false;
        } else {
          if (!recursive_check_valid(valids[i][1])) {
            return false;
          }
        }
      } else {
        if (!valids[i]) {
          return false;
        }
      }
    }
  }

  return true;
};

exports.recursive_check_valid = recursive_check_valid;

var isValid = function isValid(ids, valids, mode) {
  if (!recursive_check_valid(valids)) {
    return false;
  }

  if (!recursive_check_unique[mode](ids)) {
    return false;
  }

  return true;
};

exports.isValid = isValid;

var getUids = function getUids(e) {
  var result = [];
  var i;
  var len = e.length;

  if (Array.isArray(e)) {
    for (i = 0; i < len; i++) {
      if (e[i].sub === undefined) {
        if (_shared.designer_aliases[e[i].type].mustHaveUid) {
          result.push(e[i].uid === undefined || e[i].uid === null ? "" : e[i].uid);
        } else {
          result.push(null);
        }
      } else {
        if (_shared.designer_aliases[e[i].type].mustHaveUid) {
          result.push([e[i].uid === undefined || e[i].uid === null ? null : e[i].uid, getUids(e[i].sub)]);
        } else {
          result.push([getUids(e[i].sub)]);
        }
      }
    }
  }

  return result;
};

exports.getUids = getUids;

var jsonValid = function jsonValid(e) {
  var result = [];
  var i;
  var len = e.length;

  if (Array.isArray(e)) {
    for (i = 0; i < len; i++) {
      if (e[i].sub === undefined) {
        result.push(_shared.designer_aliases[e[i].type].valid(e[i]));
      } else {
        result.push([_shared.designer_aliases[e[i].type].valid(e[i]), jsonValid(e[i].sub)]);
      }
    }
  }

  return result;
};

exports.jsonValid = jsonValid;

var jsonToMeta = function jsonToMeta(e) {
  var result = [];
  var i;
  var len = e.length;

  if (Array.isArray(e)) {
    for (i = 0; i < len; i++) {
      if (e[i].sub === undefined) {
        result.push(_shared.designer_aliases[e[i].type].rebuild(e[i]));
      } else {
        var metaObj = _shared.designer_aliases[e[i].type].rebuild(e[i]);

        var sub = jsonToMeta(e[i].sub);
        metaObj.sub = sub;
        result.push(metaObj);
      }
    }
  }

  return result;
};

exports.jsonToMeta = jsonToMeta;

var isValidDesignJSON = function isValidDesignJSON(json, mode) {
  try {
    return isValid(getUids(json), jsonValid(jsonToMeta(json)), mode && ["tree", "linear", "linear_merge"].includes(mode) ? mode : "tree");
  } catch (_unused) {
    return false;
  }
};

exports.isValidDesignJSON = isValidDesignJSON;