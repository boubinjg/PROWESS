{"version":3,"file":"strategy.js","sourceRoot":"","sources":["../../../src/passport-saml/strategy.ts"],"names":[],"mappings":"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","sourcesContent":["import { Strategy as PassportStrategy } from 'passport-strategy';\nimport * as saml from './saml';\nimport * as url from 'url';\nimport { AuthenticateOptions, AuthorizeOptions, RequestWithUser, SamlConfig, VerifyWithoutRequest, VerifyWithRequest } from './types';\nimport { Profile } from './types';\n\nclass Strategy extends PassportStrategy {\n  name: string;\n  _verify: VerifyWithRequest | VerifyWithoutRequest;\n  _saml: saml.SAML;\n  _passReqToCallback?: boolean;\n  _authnRequestBinding?: string;\n\n  constructor(options: SamlConfig, verify: VerifyWithRequest | VerifyWithoutRequest) {\n    super();\n    if (typeof options == 'function') {\n      verify = options;\n      options = {};\n    }\n\n    if (!verify) {\n      throw new Error('SAML authentication strategy requires a verify function');\n    }\n\n    // Customizing the name can be useful to support multiple SAML configurations at the same time.\n    // Unlike other options, this one gets deleted instead of passed along.\n    if  (options.name) {\n      this.name  = options.name;\n    } else {\n      this.name = 'saml';\n    }\n\n\n    this._verify = verify;\n    this._saml = new saml.SAML(options);\n    this._passReqToCallback = !!options.passReqToCallback;\n    this._authnRequestBinding = options.authnRequestBinding || 'HTTP-Redirect';\n  }\n\n  authenticate(req: RequestWithUser, options: AuthenticateOptions & AuthorizeOptions): void {\n\n    options.samlFallback = options.samlFallback || 'login-request';\n\n    const validateCallback = (err: Error | null, profile?: Profile | null, loggedOut?: boolean) => {\n        if (err) {\n          return this.error(err);\n        }\n\n        if (loggedOut) {\n          req.logout();\n          if (profile) {\n            req.samlLogoutRequest = profile;\n            return this._saml.getLogoutResponseUrl(req, options, redirectIfSuccess);\n          }\n          return this.pass();\n        }\n\n        const verified = (err: Error | null, user?: Record<string, unknown>, info?: Record<string, unknown>) => {\n          if (err) {\n            return this.error(err);\n          }\n\n          if (!user) {\n            return this.fail(info, 401);\n          }\n\n          this.success(user, info);\n        };\n\n        if (this._passReqToCallback) {\n          (this._verify as VerifyWithRequest)(req, profile, verified);\n        } else {\n          (this._verify as VerifyWithoutRequest)(profile, verified);\n        }\n    };\n\n    const redirectIfSuccess = (err: Error | null, url?: string | null) => {\n      if (err) {\n        this.error(err);\n      } else {\n        this.redirect(url!);\n      }\n    };\n\n    if (req.query && (req.query.SAMLResponse || req.query.SAMLRequest)) {\n      const originalQuery = url.parse(req.url).query;\n      this._saml.validateRedirect(req.query, originalQuery, validateCallback);\n    } else if (req.body && req.body.SAMLResponse) {\n      this._saml.validatePostResponse(req.body, validateCallback);\n    } else if (req.body && req.body.SAMLRequest) {\n      this._saml.validatePostRequest(req.body, validateCallback);\n    } else {\n      const requestHandler = {\n        'login-request': () => {\n          if (this._authnRequestBinding === 'HTTP-POST') {\n            this._saml.getAuthorizeForm(req, (err: Error | null, data?: any) => {\n              if (err) {\n                this.error(err);\n              } else {\n                const res = req.res!;\n                res.send(data);\n              }\n            });\n          } else { // Defaults to HTTP-Redirect\n            this._saml.getAuthorizeUrl(req, options, redirectIfSuccess);\n          }\n        },\n        'logout-request': () => {\n            this._saml.getLogoutUrl(req, options, redirectIfSuccess);\n        }\n      }[options.samlFallback];\n\n      if (typeof requestHandler !== 'function') {\n        return this.fail(401);\n      }\n\n      requestHandler();\n    }\n  }\n\n  logout(req: RequestWithUser, callback: (err: Error | null, url?: string | null) => void): void {\n    this._saml.getLogoutUrl(req, {}, callback);\n  }\n\n  generateServiceProviderMetadata( decryptionCert: string | null, signingCert?: string | null ): string {\n    return this._saml.generateServiceProviderMetadata( decryptionCert, signingCert );\n  }\n}\n\nexport = Strategy;\n"]}